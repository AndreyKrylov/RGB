// qvScript

SUB Загрузка;

	LET vQvPath						= 'c:\QlikView';
	LET 'Файл настроек'	  			= '[$(vQvPath)\Config\Settings.xls] (biff, embedded labels, table is [$1$])';

//	Star is *; 
	
	CALL QvSqlConnection
	
	[Переменные загрузки] 			:SELECT [Переменная], 	[Описание переменной]  	FROM [Настройки] Where len([Описание переменной]) > 0;	
	[Документы] 					:SELECT [Документ], 	[Описание документа]  	FROM [Настройки] Where len([Описание документа]) > 0;
	[Листы] 						:SELECT [Лист], 	 	[Описание листа]  		FROM [Настройки] Where len([Описание листа]) > 0;
		FOR 'Счетчик переменных' 	= 0 to NoOfRows('Листы') - 1;
		LET 'Описание листа' 		= Peek('Описание листа'		, $(Счетчик переменных), 'Листы');
		LET [$(Описание листа)] 	= Peek('Лист' 				, $(Счетчик переменных), 'Листы');  				NEXT	

		FOR 'Счетчик переменных'	= 0 to NoOfRows('Переменные загрузки') - 1;
		LET 'Переменная' 			= Peek('Переменная'			, $(Счетчик переменных), 'Переменные загрузки');
		LET [$(Переменная)] 		= Peek('Описание переменной', $(Счетчик переменных), 'Переменные загрузки');  	NEXT
		
		LET 'Условие загрузки'		= 'not IsNull(' & $(Номер документа) & ') and not IsNull([$1])';
		LET vDocCondition				= 'len(' & $(Номер документа) & ') > 0';

//	CALL Индекс						//	Получение индекса документа
	LET 'Номер документа' = $(Номер документа);
	
	[Таблицы данных]  				:SELECT [Таблица] 								FROM [Таблицы] Where $(vDocCondition) and len([Таблица]) > 0;
	
//	IF FieldIndex( 'Таблица', 'Tool Bar' ) 		then; LOAD  Concat(ClassName, ',') AS AllClassNames; LOAD ClassName,  Name,  Display FROM [$(vQvPath)\Settings\Настройки.xls] (biff, embedded labels, table is [21$]) WHERE Display = 'Y'; LET vToolbarClass = peek('AllClassNames', 0, 'ClassNames');	ENDIF
	IF FieldIndex( 'Таблица', 'SectionAccess' ) then; CALL SectionAccess; ENDIF; 
	CALL НастройкиОтчета; CALL Данные; IF FieldIndex( 'Таблица', 'Базы SQL' ) then ; CALL Базы; ENDIF 	
ENDSUB
SUB QvSqlConnection
//	LET vConfigConnection           = 'OLEDB CONNECT TO [Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Initial Catalog=Agroproduct; Data Source=' & SubField(SubField('$(must_include=C:\Program Files\QlikView\Web\Settings.ini)', 'SQL=', 2), chr(13), 1) & ';
//	Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=QLIK_SERVER;Use Encryption for Data=False; Tag with column collation when possible=False] (XPassword is JEGcBTJNNRZKHUJNHDaUGWVMSTbMDcEY)'; $(vConfigConnection);

	LET vSqlURLs = SubField(SubField('$(must_include=C:\Program Files\QlikView\Web\Settings.ini)', 'QvSQL=', 2), chr(13), 1); 
	FOR vCounter = 0 to SubStringCount(vSqlURLs, ';'); LET vSqlURL = Trim(SubField(vSqlURLs, ';', vCounter + 1)); SET ErrorMode = 0;  
	LET vExp = 'Trim(SubField(SubField(vSqlURL, ''|'', $1), '':'', $2))'; LET vConfigConnection = 'OLEDB CONNECT TO [Data Source='& $(vExp(1,1)) &';Workstation ID='& 
	ComputerName() &'; Initial Catalog='& $(vExp(1,2)) &'; User ID='& $(vExp(2,1)) &'; Password='& $(vExp(2,2)) &'; Provider=SQLOLEDB.1; Persist Security Info=True; 
	Use Procedure for Prepare=1; Auto Translate=True; Packet Size=4096; Use Encryption for Data=False; Tag with column collation when possible=False]'; 
	$(vConfigConnection); IF ScriptError = 0 then; SET ErrorMode = 1; EXIT FOR; ENDIF; NEXT; LET vSqlURLs = Null(); LET vSqlURL = Null(); LET vExp = Null();
ENDSUB
SUB SectionAccess
	[Table.97]: SELECT $(Номер документа) as [Field.01]  FROM [Таблицы] Where $(vDocCondition) and [Таблица] = 'SectionAccess'; LET vAccessIndex = SubField(peek('Field.01'), Chr(10), 2); DROP Table [Table.97]; // LOAD MsgBox ('$(vAccessIndex)') autogenerate 1;
	IF index(vAccessIndex, 'O') > 0 then; [Table.98]:	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации.qvd]  	(qvd); [Table.99]: LOAD Concat(Distinct trim([РНН организации]),  Chr(10)) as [LoadList] Resident [Table.98]; LET СписокРНН = mid(peek('LoadList'), 2); DROP Tables [Table.98], [Table.99]; ENDIF
	IF index(vAccessIndex, 'K') > 0 then; [Table.98]:	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты.qvd]  	(qvd); [Table.99]: LOAD Concat(Distinct trim([Контрагенты.Вид]),  Chr(10)) as [LoadList] Resident [Table.98]; LET СписокКон = mid(peek('LoadList'), 1); DROP Tables [Table.98], [Table.99]; ENDIF
	IF index(vAccessIndex, 'S') > 0 then; [Table.98]:	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады.qvd] 	 	(qvd); [Table.99]: LOAD Concat(Distinct trim([Склады.Вид]), 	  Chr(10)) as [LoadList] Resident [Table.98]; LET СписокСкл = mid(peek('LoadList'), 1); DROP Tables [Table.98], [Table.99]; ENDIF
	IF index(vAccessIndex, 'N') > 0 then; [Table.98]:	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура.qvd] 	(qvd); [Table.99]: LOAD Concat(Distinct trim([Номенклатура.Вид]), Chr(10)) as [LoadList] Resident [Table.98]; LET СписокНом = mid(peek('LoadList'), 1); DROP Tables [Table.98], [Table.99]; ENDIF
	IF index(vAccessIndex, 'Y') > 0 then; [Table.98]:	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата >= '01.01.2006'; [Table.99]: LOAD Concat(Distinct trim([Годы]), 		  Chr(10)) as [LoadList] Resident [Table.98]; LET СписокГод = mid(peek('LoadList'), 1); DROP Tables [Table.98], [Table.99]; ENDIF
	IF index(vAccessIndex, '#') > 0 then; LET Var = '1 as [Key]'; ELSE; 
	LET Var = mid(if(index(vAccessIndex, 'O') > 0, ' &''|''& SubField(if([РНН организации]  = ''*'', ''$' & '(СписокРНН)'', [РНН организации]),  Chr(10))') & 
				  if(index(vAccessIndex, 'K') > 0, ' &''|''& SubField(if([Контрагенты.Вид]  = ''*'', ''$' & '(СписокКон)'', [Контрагенты.Вид]),  Chr(10))') &
				  if(index(vAccessIndex, 'S') > 0, ' &''|''& SubField(if([Склады.Вид]  		= ''*'', ''$' & '(СписокСкл)'', [Склады.Вид]),  	 Chr(10))') & 
				  if(index(vAccessIndex, 'N') > 0, ' &''|''& SubField(if([Номенклатура.Вид] = ''*'', ''$' & '(СписокНом)'', [Номенклатура.Вид]), Chr(10))') &
				  if(index(vAccessIndex, 'Y') > 0, ' &''|''& SubField(if([Период] 			= ''*'', ''$' & '(СписокГод)'', [Период]), 			 Chr(10))'), 8); 
	LET Var = if(Len(vAccessIndex) > 1,  Var & ' as [AccessKey]', Var & ' as ' & if(index(vAccessIndex, 'O') > 0, '[РНН организации]', if(index(vAccessIndex, 'K') > 0, '[Контрагенты.Вид]', if(index(vAccessIndex, 'S') > 0, '[Склады.Вид]',  if(index(vAccessIndex, 'N') > 0, '[Номенклатура.Вид]', if(index(vAccessIndex, 'Y') > 0, '[Годы]')))))); ENDIF
	[Table.97]: SELECT * FROM [Пользователи] Where $(vDocCondition) and len([Пользователь]) > 0; 
	[Table.000]	:LOAD Upper(Доступ) as ACCESS, Upper(Пользователь) as NTNAME, [Вид доступа] as ВидДоступа, Upper([E-mail]) as MAIL, [Objects.Index], Expressions.Index as ExpIndex, Dimensions.Index as [DimIndex], SubField(Dimensions.Index, ',') as [Filters.Index], SubField(Settings.Index, ',') as [Settings.Index.1], $(Var) 				Resident [Table.97];  DROP Table [Table.97]; Section Access;  LOAD * Resident [Table.000]; Section Application; //
ENDSUB

//SUB Индекс; LET 'Номер документа' = $(Номер документа); ENDSUB //	Получение индекса документа из переменной

SUB НастройкиОтчета									//	Загрузка настроек отчета
	IF	FieldIndex( 'Таблица', 'ActualDate' ) 		then; [Table.005] 	:SELECT [ActualDate] FROM [Настройки] Where len([ActualDate]) > 0; ENDIF
		NoConcatenate [Table.99]: SELECT * FROM [Измерения] ORDER BY cast([Dimensions.Order] as int) asc;
	IF	FieldIndex( 'Таблица', 'Измерения' ) 		then; [Table.151]  	:LOAD [~Dimensions.Title], [~Dimensions.Title.Rus], [~Dimensions.Title.Eng], [Dimensions.Field], [Dimensions.Label], [Dimensions.Label.Rus], [Dimensions.Label.Eng], [Dimensions.TextColor], [Dimensions.Index], [Dimensions.BkgColor], [Dimensions.TextFmt], RowNo() as [Dimensions.Number] 												Resident [Table.99] Where $(vDocCondition) and len([Dimensions.Field]) 			> 0 Order By [Dimensions.Order]; 	ENDIF; 
	IF	FieldIndex( 'Таблица', 'Измерения' ) 		then; [Table.152]  	:LOAD '(' & RowNo() & ') ' & [~Dimensions.Title]  as [~SortOrder] 																																										Resident [Table.99] Where $(vDocCondition) and len([Dimensions.Field]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Фильтры' ) 		then; [Table.155] 	:LOAD [~Filters.Title], [~Filters.Title.Rus], [~Filters.Title.Eng], [Filters.Field], [Dimensions.Index] as [Filters.Index], RowNo() as [Filters.Number] 																															Resident [Table.99] Where $(vDocCondition) and len([~Filters.Title]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Фильтры' ) 		then; [Table.156] 	:LOAD [~Filters.Title] as [FieldName], [~Filters.Title.Rus] as [FieldName_Rus], [~Filters.Title.Eng] as [FieldName_Eng] 																															Resident [Table.99] Where $(vDocCondition) and len([~Filters.Title]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Итоги' ) 		then; [Table.154]  	:LOAD '=$' & '(vDimensions.Label(' & RowNo() & '))' as [Subtotals.Label], [Dimensions.Index] as [Subtotals.Index], [~Dimensions.Title] as [~Subtotals.Title], [~Dimensions.Title.Rus] as [~Subtotals.Title.Rus], [~Dimensions.Title.Eng] as [~Subtotals.Title.Eng]																			Resident [Table.99] Where $(vDocCondition) and len([Dimensions.Field]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Позиции итогов' ) 	then; [Table.59]  	:LOAD [~Subtotals.Position] 																																																			Resident [Table.99] Where $(vDocCondition) and len([~Subtotals.Position]) 		> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Settings' ) 		then; [Table.157] 	:LOAD [Settings.Field] as [Settings.Field.Minor], [Settings.Label], RowNo()  as [Settings.No.Minor], [Settings.Index] as [Settings.Index.0]																								Resident [Table.99] Where $(vDocCondition) and len([Settings.Label]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Settings' ) 		then; [Table.158] 	:LOAD [Settings.Field] as [Settings.Field.Major], [~Settings.Title], RowNo() as [Settings.No.Major], [Settings.Index] as [Settings.Index.1], [~Settings.Title.Rus], [~Settings.Title.Eng] 												Resident [Table.99] Where $(vDocCondition) and len([~Settings.Title]) 			> 0 Order By [Dimensions.Order]; 	ENDIF;							
		SET Verbatim = 1; DROP Table [Table.99]; NoConcatenate [Table.99]: SELECT * FROM [Выражения] ORDER BY cast([Expressions.Order] as int) asc;
	IF	FieldIndex( 'Таблица', 'Выражения' ) 		then; [Table.159] 	:LOAD [~Expressions.Title], [~Expressions.Title.Rus], [~Expressions.Title.Eng], [Expressions.Definition], [Expressions.Label], [Expressions.Label.Rus], [Expressions.Label.Eng], [Expressions.Index], [Expressions.BkgColor], [Expressions.TextColor], RowNo() as [Expressions.Number], 
																																								SubField(SubField([Expressions.Definition], '),', 1), '>}', 2) as [Expressions.Equation], [Expressions.Order]														Resident [Table.99]	Where $(vDocCondition) and len([Expressions.Definition])	> 0 Order By [Expressions.Order]; 	ENDIF; 
//Dual([~Expressions.Title], [Expressions.Order]) as 
		SET Verbatim = 0; DROP Table [Table.99]; NoConcatenate [Table.99]: SELECT * FROM [Другие настройки];
	IF	FieldIndex( 'Таблица', 'Ном. группы' ) 		then; [Table.201]  			:LOAD [~Номенклатурные группы], [Номенклатурные группы] 																																												Resident [Table.99] Where $(vDocCondition) and len([Номенклатурные группы])		> 0;  	ENDIF;
	IF	FieldIndex( 'Таблица', 'Отчеты' ) 			then; [Table.61]			:LOAD [~Отчеты] 																																																						Resident [Table.99] Where $(vDocCondition) and len([~Отчеты])					> 0; 	ENDIF;
	IF	FieldIndex( 'Таблица', 'Движения')			then; [Движения] 			:LOAD [~Движения], RowNo() as [Entries.Number]																																													Resident [Table.99] Where $(vDocCondition) and len([~Движения])					> 0;	ENDIF;
//	IF	FieldIndex( 'Таблица', 'Нулевые значения' ) then; [Нулевые значения]  	:LOAD [~Нулевые значения] 																																																		Resident [Table.99] Where $(vDocCondition) and len([~Нулевые значения])			> 0; 	ENDIF;
//	IF	FieldIndex( 'Таблица', 'Сортировка' ) 		then; [Сортировка]  		:LOAD [SortOrder] 																																																				Resident [Table.99] Where $(vDocCondition) and len([SortOrder])					> 0;  	ENDIF							
	IF	FieldIndex( 'Таблица', 'Документы' ) 		then; [ДокументыКлик]  		:LOAD [Документы], [НаименованиеДокумента], [ИндексДокумента] 																																									Resident [Table.99] Where $(vDocCondition) and len([НаименованиеДокумента])		> 0; 	ENDIF;		
//	IF	FieldIndex( 'Таблица', 'Вид контрагента' ) 	then; [Вид контрагента]  	:LOAD [Поступление и перемещения], [Вид контрагента], [Реализация и перемещения] 																																				Resident [Table.99] Where $(vDocCondition) and len([Вид контрагента])			> 0;   	ENDIF;	
	IF	FieldIndex( 'Таблица','Исключенные группы') then; [Исключенные группы]	:LOAD [Исключенные группы] 																																																		Resident [Table.99] Where $(vDocCondition) and len([Исключенные группы])		> 0; 	ENDIF;	
	IF	FieldIndex( 'Таблица', 'Филиалы' ) 			then; [Филиалы]  			:LOAD [~Филиалы] 																																																				Resident [Table.99] Where $(vDocCondition) and len([~Филиалы])					> 0;  	ENDIF;	
	IF	FieldIndex( 'Таблица', 'Шимова' ) 			then; [Шимова]  			:LOAD [~Шимова] 																																																				Resident [Table.99] Where $(vDocCondition) and len([~Шимова])					> 0;  	ENDIF;
	IF	FieldIndex( 'Таблица', '~Номенклатура' ) 	then; [~Номенклатура]  		:LOAD [~Номенклатура] 																																																			Resident [Table.99] Where $(vDocCondition) and len([~Номенклатура])				> 0; 	ENDIF;
	IF	FieldIndex( 'Таблица', '~Упаковка' ) 		then; [~Упаковка]  			:LOAD [~Упаковка] 																																																				Resident [Table.99] Where $(vDocCondition) and len([~Упаковка])					> 0; 	ENDIF;																												
	IF	FieldIndex( 'Таблица', '~ВесНоменклатуры' ) then; [~ВесНоменклатуры]  	:LOAD [~ВесНоменклатуры]																																																		Resident [Table.99] Where $(vDocCondition) and len([~ВесНоменклатуры])			> 0;	ENDIF;
	IF	FieldIndex( 'Таблица', 'Languages' )		then; [Table.170]  			:LOAD [LangNo], [~Language], [ShortLang]																																																Resident [Table.99] Where $(vDocCondition) and len([LangNo])					> 0;	ENDIF;
		DROP Table [Table.99];
	IF	FieldIndex( 'Таблица', 'Переменные отчета')	then; [Table.171]			:SELECT [Variables.Name], [Variables.Definition] 																																												FROM [Переменные отчета] Where $(vDocCondition) and len([Variables.Name])		> 0;	

		FOR vCounter			= 0 to NoOfRows('Table.171') - 1;
		LET vVariable 			= Peek('Variables.Name', 	$(vCounter), 'Table.171');
		LET [$(vVariable)]  	= Peek('Variables.Definition', 	$(vCounter), 'Table.171'); NEXT; ENDIF; LET vCounter = Null(); LET vVariable = Null();
		IF lookup('Variables.Definition', 'Variables.Name', 'vDocuments.ActualDate' , 'Table.171') = 'Reload' then; LET vDocuments.ActualDate = Now(); DROP Table [Table.171]; ENDIF;  
	IF	FieldIndex( 'Таблица', 'Languages' ) 		then; [Table.172] 			:SELECT [LangField],	[StringNo],	[Русский],	[English]																																											FROM [Панель инструментов] Where len([StringNo])								> 0;	ENDIF;
ENDSUB

//*
SUB Календарь												//	Загрузка календаря
	IF	FieldIndex( 'Таблица', 'Календарь' ) 					then; [Календарь]   		:LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 									(qvd) where  Дата >= $(НачальнаяДатаОтчета) and Дата <= $(ПоследняяДатаОтчета);  										ENDIF	
	IF	FieldIndex( 'Таблица', 'Календарь с прогнозом' ) 		then; [Календарь] 			:LOAD * FROM [\\qlikview2\qvdocs\Source\Компоновка\Календарь.qvd] 		(qvd) where (Дата >= $(НачальнаяДатаОтчета) and Дата <= $(ПоследняяДатаОтчета)) or [Годы и месяцы] like '*Прогноз*'; 	ENDIF
	IF	FieldIndex( 'Таблица', 'Календарь движений (старый)' ) 	then; [Календарь движений]	:LOAD * FROM [$(Путь к настройкам)\QVD\Календарь движений.qvd] 			(qvd) where  Дата >= $(НачальнаяДатаОтчета) and Дата <= $(ПоследняяДатаОтчета);  										ENDIF
	IF	FieldIndex( 'Таблица', 'Календарь движений (новый)' ) 	then; [Календарь движений]	:LOAD * FROM [\\qlikview2\qvdocs\QVD\Календарь движений (новый).qvd] 	(qvd) where  Дата >= $(НачальнаяДатаОтчета) and Дата <= $(ПоследняяДатаОтчета); 										ENDIF	
ENDSUB

SUB Данные													//	Загрузка общих данных из файла настроек и файлов QVD
	IF	FieldIndex( 'Таблица', 'План' ) 						then; [План] 				:LOAD * FROM [\\qlikview\QlikView\QVD\# ПланМилланда.qvd] (qvd) where  Дата >= $(Начальная дата отчета) and Дата <= $(Последняя дата отчета);  ENDIF
	IF	FieldIndex( 'Таблица', 'Прайс' ) 						then; [Прайс] 				:LOAD * FROM [\\qlikview2\qvdocs\Source\Компоновка\Прайс.qvd] (qvd) where  Дата >= $(Начальная дата отчета) and Дата <= $(Последняя дата отчета);  ENDIF
	IF	FieldIndex( 'Таблица', 'Организации' ) 					then; [Организации] 		:SELECT [Организация] as [Организации], [Филиал] as [Филиалы], [Регион] as [Регионы], [Канал] as [Каналы], [РНН организации], [БИН организации] 																	FROM [Организации] 		Where $(vDocCondition) and len([Филиал])					> 0; ENDIF
	IF	FieldIndex( 'Таблица', 'Склады' ) 						then; [Склады] 				:SELECT [Склад] as [Склады], [Вид склада] as [Виды складов], [РНН организации] 																																		FROM [Склады] 			Where $(vDocCondition) and len([Склад])					> 0; ENDIF
	IF	FieldIndex( 'Таблица', 'Категории клиентов' ) 			then; [Категории клиентов]	:SELECT [Категория клиента] as [Категории клиентов], [Группа 2]  as [Группы категорий клиентов 2] 																													FROM [Контрагенты] 		Where len([Группа 2])									> 0; ENDIF
	IF	FieldIndex( 'Таблица', 'Цеха' ) 						then; [Цеха]				:SELECT [Номенклатурные группы (3)], [Цех] 																																											FROM [Другие настройки] Where $(vDocCondition) and len([Цех])						> 0; ENDIF
ENDSUB

SUB Базы2														//  Загрузка информации о базах SQL и метаданных 1С
		IF noOfRows('Базы SQL') <> null then; DROP Table [Базы SQL]; ENDIF; LET SomeList = SubField(SubField(vConsole.LoadList, НомерЗагрузки & ' ', 2) , Chr(10)); //'@'&'$(НомерЗагрузки)';   //$($(SomeList))
		$(vConfigConnection); [Table.99]: SELECT * FROM [Базы SQL]; 
		[Базы SQL] 					:LOAD [База], [Строка подключения], [№] as [Номер базы], [Начало базы], [Окончание базы], [Смещение дат], [Версия 1С] Resident [Table.99] Where Match(#, $(SomeList)); DROP Table [Table.99];
			FOR 'Счетчик переменных' 	= 0 to NoOfRows('Базы SQL') - 1;
			LET 'Строка подключения'  	= Peek('База', 					$(Счетчик переменных), 'Базы SQL');
			LET [$(Строка подключения)] = Peek('Строка подключения' ,	$(Счетчик переменных), 'Базы SQL'); NEXT
		LET ErrorConnection 		= False();
		IF noOfRows('Метаданные') 	<> null then; DROP Table [Метаданные];	 ENDIF; LET vLoadCondition = 'len([$(НомерЗагрузки)]) > 0';
		IF	FieldIndex( 'Таблица', 'Метаданные' ) 				then; [Метаданные] 			:SELECT *  																																																			FROM [Метаданные] 		Where $(vLoadCondition) and len([Мета переменная])			> 0; ENDIF
ENDSUB

SUB Базы														//  Загрузка информации о базах SQL и метаданных 1С
		IF noOfRows('Базы SQL') <> null then; DROP Table [Базы SQL]; ENDIF; //LET SomeList = SubField(SubField(vConsole.LoadList, НомерЗагрузки & ' ', 2) , Chr(10)); //'@'&'$(НомерЗагрузки)';   //$($(SomeList))
		$(vConfigConnection); [Table.99]: SELECT * FROM [Базы SQL]; 
		[Базы SQL] 					:LOAD [База], [Строка подключения], [№] as [Номер базы], [Начало базы], [Окончание базы], [Смещение дат], [Версия 1С] Resident [Table.99] Where not IsNull([$(НомерЗагрузки)]); DROP Table [Table.99];
			FOR 'Счетчик переменных' 	= 0 to NoOfRows('Базы SQL') - 1;
			LET 'Строка подключения'  	= Peek('База', 					$(Счетчик переменных), 'Базы SQL');
			LET [$(Строка подключения)] = Peek('Строка подключения' ,	$(Счетчик переменных), 'Базы SQL'); NEXT
		LET ErrorConnection 		= False();
		IF noOfRows('Метаданные') 	<> null then; DROP Table [Метаданные];	 ENDIF; LET vLoadCondition = 'len([$(НомерЗагрузки)]) > 0';
		[Метаданные]: SELECT * FROM [Метаданные] Where $(vLoadCondition) and len([Мета переменная]) > 0; 
ENDSUB

SUB Подключение										//  Подключение к базе из списка по счетчику и получение метаданных базы
	FOR Each Var in 'База','Номер базы','Строка подключения','СтрокаПодключения','Начало базы','Окончание базы','Смещение дат','Версия 1С'; LET [$(Var)] =  peek('$(Var)', $(СчетчикБаз), 'Базы SQL'); NEXT
	SET ErrorMode = 0; OLEDB CONNECT TO $(Строка подключения); IF ScriptError <> 0 then; SET ErrorMode = 1; LET Connection = False(); LET ErrorConnection = True(); EXIT Sub; ELSE; LET Connection = True(); SET ErrorMode = 1; ENDIF
		FOR 'Счетчик переменных' 	= 0 to NoOfRows('Метаданные') - 1;
		LET 'Мета переменная' 		= Peek('Мета переменная', 	$(Счетчик переменных), 	'Метаданные');
		LET [$(Мета переменная)] 	= peek('Префикс', 			$(Счетчик переменных), 	'Метаданные') &  Peek('База ' & $(Номер базы), $(Счетчик переменных), 	'Метаданные'); NEXT
	LET НомерБазы 						= if('$(Версия 1С)' like '7.7*', 'right(''0'' + cast($(Номер базы) as varchar), 2)', 'cast(right(''0'' + cast($(Номер базы) as varchar), 2) as varbinary)');
	LET VarType 						= if('$(Версия 1С)' like '8*', 'varbinary', 'varchar');
	LET | 								= if('$(Версия 1С)' like '7.7*', 'cast(''|'' as varchar)', 'cast('''' as varbinary)');
	LET '.' 							= if('$(Версия 1С)' like '7.7*', 'cast(''.'' as varchar)', 'cast('''' as varbinary)');
ENDSUB
 
SUB МаркерыДистров									//  Подстановка маркера по ссылкам контрагентов
	[Маркеры1]: 	LOAD Distinct [Контрагенты.Ссылка], if(([НомерБазы] < 3330 and [Группы категорий клиентов] = 'Дистрибьюторы') or ([НомерБазы] > 3330 and ([Дистрибьютор] like '*Милланд*' or [Код торговли] = '2-006898')), 'Д', ' ') as [Temp1] From [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] (qvd); 
	[Маркеры2]:		Left Join (Table.00) LOAD * Resident [Маркеры1]; DROP Table [Маркеры1];
ENDSUB

SUB ЗаменаСсылок										//  Замена ссылок организаций с маркерами дистр-ов
	[ЗаменаС1]: 	LOAD [Организации.Ссылка], ' ' as [Temp1],  [Организации.Ссылка] 		as [Temp2] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd); Concatenate // Where Exists(Организации.Ссылка); Concatenate
	(ЗаменаС1)		LOAD [Организации.Ссылка], 'Д' as [Temp1],  [Организации.Ссылка] & '|Д' as [Temp2] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd) Where [НомерБазы] < 3330 or ([НомерБазы] > 3330 and Match([РНН организации], '600700506607', '480100220813', '032600222029')); Concatenate
	(ЗаменаС1)		LOAD [Организации.Ссылка], 'Д' as [Temp1],  [Организации.Ссылка] 		as [Temp2] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd) Where [НомерБазы] > 3330 and not Match([РНН организации], '600700506607', '480100220813', '032600222029');
	[ЗаменаС2]:		Left Join (Table.00) LOAD [Организации.Ссылка], [Temp1], [Temp2] Resident [ЗаменаС1];  
					DROP Fields [Temp1], [Организации.Ссылка]; RENAME Field [Temp2] to [Организации.Ссылка]; DROP Table [ЗаменаС1];
ENDSUB

SUB AccessKey										//  AccessKey
	IF index(vAccessIndex, 'O') > 0 then; [Table.99]:			LOAD Distinct [Организации.Ссылка],  [РНН организации]  as  [Field.1] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);  Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; ENDIF
	IF index(vAccessIndex, 'K') > 0 then; [Table.99]:			LOAD Distinct [Контрагенты.Ссылка],  [Контрагенты.Вид]  as  [Field.2] FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);  Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; ENDIF
	IF index(vAccessIndex, 'S') > 0 then; [Table.99]:			LOAD Distinct [Склады.Ссылка],  	 [Склады.Вид]  		as  [Field.3] FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);  	 Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; ENDIF
	IF index(vAccessIndex, 'N') > 0 then; [Table.99]:			LOAD Distinct [Номенклатура.Ссылка], [Номенклатура.Вид] as  [Field.4] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка); Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; ENDIF 

	IF index(vAccessIndex, 'Y') > 0 then; [Table.99]: LOAD Distinct [НомерБазы], 0 as  [Field.9] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd) Where Exists(Организации.Ссылка);  [Table.99]: LOAD '#' as [НомерБазы], 1 as  [Field.9] AutoGenerate 1; Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99];  		
	[Table.99]: LOAD Distinct [Дата] as [$(Var.2)], Year([Дата]) as [Field.5], 0 as [Field.9] Resident [Table.01]; [Table.99]: LOAD Distinct [Дата] as [$(Var.2)], Year(Today()) as [Field.5], 1 as [Field.9] Resident [Table.01]; Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; DROP Field [Field.9]; ENDIF; 																																					

	[Table.99]: LOAD '' as [Field.0] AutoGenerate 1; LET Var.1 = '';
	IF index(vAccessIndex, 'O') > 0 then; Left Join (Table.99) LOAD Distinct [РНН организации]  as  [Field.1] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd]  (qvd) Where Exists(Организации.Ссылка);  LET Var.1 = Var.1 & ',[Field.1]'; ENDIF
	IF index(vAccessIndex, 'K') > 0 then; Left Join (Table.99) LOAD Distinct [Контрагенты.Вид]  as  [Field.2] FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd]  (qvd) Where Exists(Контрагенты.Ссылка);  LET Var.1 = Var.1 & ',[Field.2]'; ENDIF
	IF index(vAccessIndex, 'S') > 0 then; Left Join (Table.99) LOAD Distinct [Склады.Вид]  		as  [Field.3] FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd]  	  (qvd) Where Exists(Склады.Ссылка);  	   LET Var.1 = Var.1 & ',[Field.3]'; ENDIF
	IF index(vAccessIndex, 'N') > 0 then; Left Join (Table.99) LOAD Distinct [Номенклатура.Вид] as  [Field.4] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd) Where Exists(Номенклатура.Ссылка); LET Var.1 = Var.1 & ',[Field.4]'; ENDIF 
	IF index(vAccessIndex, 'Y') > 0 then; Left Join (Table.99) LOAD Distinct [Годы] 			as  [Field.5] Resident [Table.01]; 	  															   LET Var.1 = Var.1 & ',[Field.5]'; ENDIF 

	LET Var = Mid(if(index(vAccessIndex, 'O') > 0, ' &''|''& [Field.1]') & if(index(vAccessIndex, 'K') > 0, ' &''|''& [Field.2]') & if(index(vAccessIndex, 'S') > 0, ' &''|''& [Field.3]') & if(index(vAccessIndex, 'N') > 0, ' &''|''& [Field.4]') & if(index(vAccessIndex, 'Y') > 0, ' &''|''& [Field.5]'), 8); LET Var.1 = mid(Var.1, 2);
	DROP Field [Field.0]; Left Join (Table.99) 	LOAD *, $(Var) as [AccessKey] Resident [Table.99]; Left Join (Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99];  DROP Fields $(Var.1); 
ENDSUB

SUB Выход	

/*Добавление пустых строк для полного каледаря после сокращения данных*/
	LET Var.2 = if(FieldNumber('ДатаДвижения', 'Table.00') > 0, 'ДатаДвижения', 'Дата'); LET Var = ''; IF NoOfRows('Table.00') > 0 then; FOR Counter = 1 to NoOfFields('Table.00'); LET Var = Var &','& FieldName(Counter,'Table.00'); NEXT;  	
	LET Var.1 = If(WildMatch(Var, '*Организации.Ссылка*'), ', Distinct [Организации.Ссылка]') & ', ''#'' as [НомерБазы]' & If(WildMatch(Var, '*Контрагенты.Ссылка*'), ', ''#'' as [Контрагенты.Ссылка]') & If(WildMatch(Var, '*Склады.Ссылка*'), ', ''#'' as [Склады.Ссылка]') & If(WildMatch(Var, '*Номенклатура.Ссылка*'), ', ''#'' as [Номенклатура.Ссылка]'); IF Len(Var.1) > 0 then; LET  Var.1 = Mid(Var.1, 3); 
	[Table.99]: LOAD $(Var.1) FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd) Where Exists(Организации.Ссылка); Left Join(Table.99) LOAD [Дата] as [$(Var.2)] Resident [Table.01]; Concatenate(Table.00) LOAD * Resident [Table.99]; DROP Table [Table.99]; ENDIF; ENDIF;

	$(vAccessKey); $(vConfigConnection); [Table.99]: SELECT * FROM [Измерения] Where $(vDocCondition) and len([Dimensions.NewName]) > 0; [FieldNameMap]: Mapping Load PurgeChar([Dimensions.OldName], '[]'), PurgeChar([Dimensions.NewName], '[]') Resident [Table.99]; DROP Table [Table.99]; Rename Fields using [FieldNameMap];

/*Удаление временных таблиц и переменных*/
	FOR 'Счетчик переменных'  	= 0 to NoOfRows('Листы') - 1; 					LET 'Описание листа' 	= Peek('Описание листа', 		$(Счетчик переменных), 'Листы'); 				LET [$(Описание листа)] 	= Null();  NEXT
	FOR 'Счетчик переменных' 	= 0 to NoOfRows('Переменные загрузки') - 1; 	LET 'Переменная' 		= Peek('Переменная', 			$(Счетчик переменных), 'Переменные загрузки');	LET [$(Переменная)] 		= Null();  NEXT	

	IF noOfRows('Метаданные') 		<> null 									then 
		FOR 'Счетчик переменных' 	= 0 to NoOfRows('Метаданные') - 1;
		LET 'Мета переменная' 		= Peek('Мета переменная', 		$(Счетчик переменных), 'Метаданные');
		LET [$(Мета переменная)] 	= Null(); NEXT; DROP Table [Метаданные]; 	ENDIF
	IF noOfRows('Базы SQL') <> null 											then
		FOR 'Счетчик переменных' 	= 0 to NoOfRows('Базы SQL') - 1;
		LET 'Строка подключения'  	= Peek('База', 					$(Счетчик переменных), 'Базы SQL');
		LET [$(Строка подключения)] = Null(); NEXT; DROP Table [Базы SQL];  	ENDIF
	FOR Each Var in 'Переменные отчета','Переменные загрузки','Документы','Листы','Таблицы данных'; IF noOfRows(Var) <> null  then; DROP Table [$(Var)]; ENDIF; NEXT; 		
	FOR Each Var in 'Путь к настройкам','Файл настроек','Счетчик переменных','Счетчик баз','База','Номер базы','Строка подключения','Мета переменная','Компоновка','Начало базы','Окончание базы','Смещение дат','Строка сохранения', 'СписокРНН', 'СписокНом', 'СписокКон', 'vAccessIndex', 'Var.1', 'Var.2', 'vAccessKey'; LET [$(Var)] = Null(); NEXT; LET Var = Null();  
//	SET ErrorMode = 0; DROP Field [НомерБазы]; SET ErrorMode = 1;
	IF not IsNull(FIELDVALUECOUNT('НомерБазы')) THEN; DROP Field [НомерБазы]; ENDIF;
	EXIT Script;
ENDSUB
									/*Документы*/

IF SubField(DocumentName(), '.', 1) = 'Gallery' then; CALL Загрузка; CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Себестоимость' then; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2008';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] 		(qvd) Where Exists(Дата);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 		(qvd) Where Exists(Номенклатура.Ссылка);
CALL Выход; ENDIF

IF Match(SubField(DocumentName(), '.', 1), 'Выработка', 'Sample') then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Выработка\*.qvd] 				(qvd) Where Exists(Дата); Concatenate
   	(Table.00)		LOAD * FROM [$(vQvPath)\QVD\# ПланЗаводов.qvd] 				(qvd) ;//Where Exists(Дата);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Дебиторка (Алматы)' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= '01.01.2011';
//	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Дебиторка\Торговля 39 #2.qvd] 	(qvd) Where Exists(ДатаДвижения);
//	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Дебиторка\Торговля 23.qvd] 		(qvd) Where Exists(ДатаДвижения);
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Дебиторка\Торговля*.qvd] 		(qvd) Where Exists(ДатаДвижения);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Дебиторка (Регионы)' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= '01.01.2011';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Дебиторка\Бухгалтерия*.qvd] 	(qvd) Where Exists(ДатаДвижения);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Дебиторка' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= '01.01.2015' and ДатаДвижения < MonthStart($(vDocuments.RenewDate));
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Дебиторка\*.qvd] 				(qvd) Where Exists(ДатаДвижения); Concatenate
	(Table.00) 		LOAD * FROM [$(vQvPath)\QVD\ОбновлениеДебиторки.qvd] 		(qvd); CALL МаркерыДистров; CALL ЗаменаСсылок;
	[Table.02]:  	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= MonthStart($(vDocuments.RenewDate)) or ДатаДвижения < '01.01.2015';
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.13]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Валюты*.qvd] 		(qvd) Where Exists(Валюты.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);	
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Комплектация' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2008';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Комплектация\*.qvd] 				(qvd) Where Exists(Дата);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 			(qvd) Where Exists(Склады.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 		(qvd) Where Exists(Номенклатура.Ссылка);
	[Table.30]: 	LOAD [Номенклатура] as [Номенклатура комплектации], [Номенклатура.Ссылка] as [НоменклатураКомплектации.Ссылка] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd](qvd) Where Exists([НоменклатураКомплектации.Ссылка], [Номенклатура.Ссылка]);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Кредиторка заводов' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 			(qvd) Where Дата >= '01.01.2011';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Кредиторка заводов\*.qvd] 			(qvd) Where Exists(ДатаДвижения);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 		(qvd) Where Exists(Контрагенты.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Начисления' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2006' and Дата <= AddMonths(Today(), 2);
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Начисления\*.qvd] 					(qvd) Where Exists(Дата);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);
	[Table.15]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\ФизическиеЛица*.qvd]	(qvd) Where Exists(ФизическиеЛица.Ссылка);
	left Join (Table.01)
	SELECT 	[Годы и месяцы], 
	     	[Кал. дни], 
	     	[40-5-дни], 
	     	[40-5-часы], 
	     	[40-6-дни], 
	     	[40-6-часы], 
	     	[36-5-дни], 
	     	[36-5-часы], 
	     	[36-6-дни], 
	     	[36-6-часы]
	FROM [Календарь];	
	[Вид учета]:
	SELECT 
	     [~Вид учета], 
	     [~Баланс]
	FROM [Календарь];
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Остатки и выработка' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= '01.01.2015' and ДатаДвижения < MonthStart($(vDocuments.RenewDate));
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Остатки\База*.qvd] 				(qvd) Where Exists(ДатаДвижения); Concatenate 
   	(Table.00) 		LOAD * FROM [$(vQvPath)\QVD\ОбновлениеОстатков.qvd] 		(qvd); Left Join
   	(Table.00)		LOAD 'Остатки' as [Документ], 0 as [Вес] 			AutoGenerate 1;       
	[Table.02]:  	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= MonthStart($(vDocuments.RenewDate)) or ДатаДвижения < '01.01.2015';
	Concatenate (Table.00)
	LOAD
		 Дата 														as [ДатаДвижения]	
		,Документ													as [Документ]
		
		,[Организации.Ссылка]										as [Организации.Ссылка]
        ,[Склады.Ссылка]											as [Склады.Ссылка]
        ,[Номенклатура.Ссылка]  									as [Номенклатура.Ссылка]
        
     	,Количество 												as [Количество]
     	,Сумма 														as [Сумма]
     	,Вес 														as [Вес]
     	,1 															as [ВидДвижения]
	  	FROM [$(vQvPath)\QVD\Выработка\*.qvd] (qvd);
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка); 
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Остатки' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2011';
	[Table.02]: 	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= '01.01.2011' and ДатаДвижения < MonthStart($(vDocuments.RenewDate));
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Остатки\База*.qvd] 				(qvd) Where Exists(ДатаДвижения);
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\ОбновлениеОстатков.qvd] 		(qvd);
	[Table.02]:  	LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= MonthStart($(vDocuments.RenewDate)) or ДатаДвижения < '01.01.2011';
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Поступление' then ; CALL Загрузка
	[Table.01]:		LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2008';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] 				(qvd) Where Exists(Дата); 

	[Table.17]: 	LOAD *, НомерДокумента as НомерДокументаУслуги, Дата as ДатаДокументаУслуги FROM [$(vQvPath)\QVD\# УслугиСтороннихОрганизаций.qvd] (qvd) Where Exists(Документ.Ссылка, ДокументПоступления) ;
	DROP Fields НомерДокумента, Дата From [Table.17]; Left Join([Table.17]) LOAD Distinct  НомерДокумента, Дата, Документ.Ссылка as ДокументПоступления Resident [Table.00];
	Concatenate ([Table.00]) LOAD * Resident [Table.17]; DROP Table [Table.17];
//, Сумма * Курс as СуммаУслуги
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);
	[Table.13]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Валюты*.qvd] 		(qvd) Where Exists(Валюты.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка);
	
	
	[Прогноз]:
	Load * INLINE [
	Прогноз

	Числа
	Годы и месяцы
	];
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Реализация и остатки' then ; CALL Загрузка
	[Table.01]: LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >=  MonthStart(AddMonths(Today(), - 6)); //MonthStart(AddMonths(Today(), - 6)); // '01.01.2017'
	[Table.00]: LOAD  [НомерБазы], [Дата], [Документ], [Организации.Ссылка], '#' as [Склады.Ссылка], [Валюты.Ссылка], [Номенклатура.Ссылка], [Контрагенты.Ссылка], [Количество], [Сумма], [Вес] FROM [$(vQvPath)\QVD\Реализация\*.qvd] (qvd) Where Exists(Дата); Left Join (Table.00) LOAD 3 as [ВидДвижения] AutoGenerate 1; Left Join 
	(Table.00)  LOAD [Дата], [Дата] as [ДатаДвижения] Resident [Table.01]; DROP Table [Table.01]; DROP Field [Дата]; ; CALL МаркерыДистров; CALL ЗаменаСсылок; STORE [Table.00] into [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Table [Table.00]; [Table.01]: LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd);

	[Table.02]: LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= MonthStart(AddMonths(Today(), - 6)) and ДатаДвижения < MonthStart($(vDocuments.RenewDate));  // '01.01.2015';
	[Table.00]: LOAD * FROM [$(vQvPath)\QVD\Остатки\База*.qvd] 				(qvd) Where Exists(ДатаДвижения); Concatenate 
   	(Table.00)  LOAD * FROM [$(vQvPath)\QVD\ОбновлениеОстатков.qvd] 		(qvd); Left Join (Table.00)	LOAD 'Остатки' as [Документ], 0 as [Вес], '#' as [Контрагенты.Ссылка], '#' as [Валюты.Ссылка] AutoGenerate 1;      
	[Table.02]: LOAD * FROM [$(vQvPath)\QVD\# КалендарьДвижений.qvd] 		(qvd) Where ДатаДвижения >= MonthStart($(vDocuments.RenewDate)) or ДатаДвижения < MonthStart(AddMonths(Today(), - 6)); // '01.01.2015';

	[Table.00]:  LOAD * FROM [$(vQvPath)\QVD\Temp.qvd] 						(qvd); 

	[Table.10]: LOAD Distinct [НомерБазы], [Организации.Ссылка] 	FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd); 	Left Join
	(Table.10)	LOAD Distinct [НомерБазы], [Номенклатура.Ссылка] 	FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd);	Concatenate
	(Table.00)  LOAD *, '01.01.2000' as [ДатаДвижения], 0 as [ВидДвижения], 0 as [Количество], 'Остатки' as [Документ], 0 as [Вес], '#' as [Контрагенты.Ссылка], '#' as [Валюты.Ссылка], '#' as [Склады.Ссылка] Resident [Table.10]; DROP Table [Table.10];
	
	[Table.11]: LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 	(qvd) Where Exists(Организации.Ссылка);
	[Table.12]: LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 		(qvd) Where Exists(Склады.Ссылка);
	[Table.13]: LOAD * FROM [$(vQvPath)\QVD\Справочники\Валюты*.qvd] 		(qvd) Where Exists(Валюты.Ссылка);
	[Table.14]: LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 	(qvd) Where Exists(Контрагенты.Ссылка);
	[Table.16]: LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where Exists(Номенклатура.Ссылка); DROP Field [Ассортимент];

	[Assortment]:
	Load * INLINE [
	Ассортимент,				AssortIndex

	ТОО "Компания A-TRADE",		A
	ТОО "Компания A-TRADE",		AM
	ТОО "Компания A-TRADE",		AC
	ТОО "Компания A-TRADE",		AMC
	
	ТОО "А.П.Милланд",			M
	ТОО "А.П.Милланд",			AM
	ТОО "А.П.Милланд",			MC
	ТОО "А.П.Милланд",			AMC
	
	ТОО "А.П.Милланд" new,		C
	ТОО "А.П.Милланд" new,		AC
	ТОО "А.П.Милланд" new,		MC
	ТОО "А.П.Милланд" new,		AMC
	];
//	ТОО "Компания A-TRADE",		A
//	ТОО "Компания A-TRADE",		AM
//	ТОО "А.П.Милланд",			M
//	ТОО "А.П.Милланд",			AM		
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Реализация' then ; CALL Загрузка

	[Table.01]: 	LOAD *    FROM [$(vQvPath)\QVD\# Календарь.qvd] 				(qvd) Where Дата >= '01.01.2006';
//	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Реализация\*.qvd] 					(qvd) Where Exists([Дата]); Left Join
//		LET A = '[Номенклатура.Ссылка], [Код номенклатуры] as [Номенклатура.Код] ';
	[Table.99]:		LOAD 	  Distinct [Номенклатура.Ссылка], [Код номенклатуры] 	as [Номенклатура.Код] FROM [$(vQvPath)\QVD\Справочники\Номенклатура.qvd] (qvd);
	[Table.00]: 	LOAD * 	  FROM [$(vQvPath)\QVD\Реализация\База 0*.qvd] 			(qvd) Where Exists([Дата]); Left Join
	(Table.00)		LOAD * 	  Resident [Table.99]; Left Join //DROP Table [Table.99];
	(Table.00) 		LOAD *    FROM [$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] 	(qvd); RENAME Fields [СебестоимостьЗаводская] to [СебестоимостьЗаводская_], [СебестоимостьСырьевая] to [СебестоимостьСырьевая_]; Left Join
	(Table.00) 		LOAD *    FROM [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] 	(qvd); DROP Field [Номенклатура.Код] From [Table.00]; 
	[Table.02]: 	LOAD *,   if(IsNull(СебестоимостьЗаводская_), [СебестоимостьЗаводская], [СебестоимостьЗаводская_]) as [СебестоимостьЗаводская2],
							  if(IsNull(СебестоимостьСырьевая_), [СебестоимостьСырьевая], [СебестоимостьСырьевая_]) as [СебестоимостьСырьевая2] Resident [Table.00]; 
		DROP Table	[Table.00]; DROP Fields [СебестоимостьСырьевая_], [СебестоимостьСырьевая], [СебестоимостьЗаводская_], [СебестоимостьЗаводская];
		RENAME Fields [СебестоимостьЗаводская2] to [СебестоимостьЗаводская], [СебестоимостьСырьевая2] to [СебестоимостьСырьевая]; RENAME Table [Table.02] to [Table.00]; 
					STORE          [Table.00] into [$(vQvPath)\QVD\Temp.qvd] 		(qvd); DROP Table [Table.00];
	[Table.00]: 	LOAD *    FROM [$(vQvPath)\QVD\Реализация\База 1*.qvd] 			(qvd) Where Exists([Дата]); 
	[Table.00]: 	LOAD *    FROM [$(vQvPath)\QVD\Реализация\База 2*.qvd] 			(qvd) Where Exists([Дата]);
	[Table.00]: 	LOAD *    FROM [$(vQvPath)\QVD\Реализация\База 3*.qvd] 			(qvd) Where Exists([Дата]);
	[Table.00]: 	LOAD *    FROM [$(vQvPath)\QVD\Реализация\База 4*.qvd] 			(qvd) Where Exists([Дата]); Left Join
//	(Table.00)		LOAD $(A) FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd); Left Join
	(Table.00)		LOAD * 	  Resident [Table.99]; DROP Table [Table.99]; Left Join 
	(Table.00) 		LOAD *    FROM [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] 	(qvd); DROP Field [Номенклатура.Код] From [Table.00]; 
	[Table.00]: 	LOAD *    FROM [$(vQvPath)\QVD\Temp.qvd] 						(qvd); Left Join
	
	(Table.00) 		LOAD * FROM [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] 	(qvd) Where Exists([Дата]); Concatenate
	(Table.00)	 	LOAD * FROM [$(vQvPath)\QVD\Обмен\*.qvd] 						(qvd) Where Exists([Дата]); Concatenate
    (Table.00) 		LOAD * FROM [$(vQvPath)\QVD\Ретро-бонусы\*.qvd] 				(qvd) Where Exists([Дата]); CALL МаркерыДистров; Concatenate
    (Table.00) 		LOAD *, ' ' as [Temp1], '#' as [Контрагенты.Ссылка] 							  							FROM [$(vQvPath)\QVD\Списание\*.qvd] 	(qvd) Where Exists([Дата]) and Exists([Номенклатура.Ссылка]); Concatenate // 
    (Table.00) 		LOAD *, ' ' as [Temp1], '#' as [Контрагенты.Ссылка], '#' as [Номенклатура.Ссылка], Date(Today()) as [Дата] 	FROM [$(vQvPath)\QVD\# Логистика.qvd] 	(qvd)					  									; Concatenate
//  (Table.00)	 	LOAD *, ' ' as [Temp1], '#' as [Контрагенты.Ссылка], '#' as [Номенклатура.Ссылка] 							FROM [$(vQvPath)\QVD\Начисления\*.qvd] 	(qvd) Where Exists([Дата])									; Concatenate
    (Table.00) 		LOAD *, ' ' as [Temp1], '#' as [Контрагенты.Ссылка] 														FROM [$(vQvPath)\QVD\# ПланМилланда.qvd](qvd) Where Exists([Дата])									; Concatenate
    (Table.00) 		LOAD *, ' ' as [Temp1], '$' as [Контрагенты.Ссылка] 														FROM [$(vQvPath)\QVD\# Выработка.qvd] 	(qvd) Where Exists([Дата])									; CALL ЗаменаСсылок; 	 
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);    
	[Table.12]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Склады*.qvd] 			(qvd) Where Exists(Склады.Ссылка);
	[Table.13]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Валюты*.qvd] 			(qvd) Where Exists(Валюты.Ссылка);
	[Table.14]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] 		(qvd) Where Exists(Контрагенты.Ссылка);
	[Table.15]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\ФизическиеЛица*.qvd] 	(qvd) Where Exists(ФизическиеЛица.Ссылка);
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 		(qvd) Where Exists(Номенклатура.Ссылка);
	[Table.17]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\ТипыСписания*.qvd] 		(qvd) Where Exists(ТипыСписания.Ссылка);
	[Table.18]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\СтатьиЗатрат*.qvd] 		(qvd) Where Exists(СтатьиЗатрат.Ссылка);
	[Table.19]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Торговые точки*.qvd] 	(qvd) Where Exists(ТорговыеТочки.Ссылка);
CALL Выход; ENDIF

IF SubField(DocumentName(), '.', 1) = 'Списание' then ; CALL Загрузка
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2006';
	[Table.00]: 	LOAD * FROM [$(vQvPath)\QVD\Списание\*.qvd] 					(qvd) Where Exists([Дата]); 
	[Table.11]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd] 		(qvd) Where Exists(Организации.Ссылка);    
	[Table.16]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 		(qvd) Where Exists(Номенклатура.Ссылка);
	[Table.17]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\ТипыСписания*.qvd] 		(qvd) Where Exists(ТипыСписания.Ссылка);
	[Table.18]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\СтатьиЗатрат*.qvd] 		(qvd) Where Exists(СтатьиЗатрат.Ссылка);
CALL Выход; ENDIF
///$tab <

IF SubField(DocumentName(), '.', 1) = 'Console' then ; CALL Загрузка	

	
////////////////////	Панель загрузок

	[LoadTable]: SELECT  [LoadNo], [LoadName], [LoadOrder] FROM [Настройки] Where len([LoadNo]) > 0;

	LET i = 0; IF '$(i)' = 1 then; FOR i = 0 to NoOfRows('LoadTable') - 1; 
	LET Переменная 		 = '@' & Peek('LoadNo', $(i), 'LoadTable'); 
	LET [$(Переменная)]  = '#'; NEXT; ENDIF; LET i = Null();

	[BaseList]:	SELECT [#] as [BaseNo], [BN] as [BaseName] FROM [Базы SQL] Where len([#]) > 0;
	[LoadList]: LOAD Chr(39)& Concat(DISTINCT if([LoadNo] >= 1, [LoadNo]), Chr(39) & Chr(44) & Chr(39), [LoadOrder]) & Chr(39) as [LoadList] Resident [LoadTable]; LET Список = peek('LoadList');
	FOR Each Счетчик in $(Список) ; $(Счетчик): LOAD [BaseNo] as $(Счетчик) Resident [BaseList]; NEXT 

////////////////////	Панель отчетов


	[XLReports]: 		SELECT  Distinct [XlsNo], [XlsName], [XlsDescr], [XlsTable], [XlsTime], [XlsFunc], [XlsPath], [XlsMail], [XlsText], [XlsLink] 		FROM [Настройки] 		Where len([XlsNo]) 		> 0;
	[XLSheets]: 		SELECT  		 [XlsBM], [XlsSheet], [XlsStart], [XlsEnd], [XlsFilter], [XlsQVW], [XlsVBA], [XlsTabNo], [XlsLink], [XlsCell] 		FROM [Настройки] 		Where len([XlsLink]) 	> 0;
	[E-mail адреса]: 	SELECT  Distinct [eMails] 																											FROM [Пользователи] 	Where len([eMails]) 	> 0;
	[ReportSets]: 		SELECT  		 [ReportSets] 																										FROM [Другие настройки] Where len([ReportSets]) > 0 and len([0]) > 0;

////////////////////	Всякое



SUB СоответствиеДатБазам(Field)
	[Таблица1]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); 
	[Таблица2]: LOAD if([Версия 1С] like '7.7*', right(0 & №, 2), '3'& left(№, 1) & '3' & right(№, 1)) as [НомерБазы], [Начало базы], [Окончание базы]
				FROM $(Файл настроек($(Базы SQL))) Where not [База] like '*#*' and not IsNull(№);
	
	FOR i=0 to NoOfRows('Таблица2')-1
		LET DateStart 	= Peek('Начало базы',		$(i),'Таблица2'); 
		LET DateEnd		= Peek('Окончание базы',	$(i),'Таблица2'); 
		LET НомерБазы	= Peek('НомерБазы',			$(i),'Таблица2') & chr(39);
		[Таблица3]: LOAD [Дата], $(НомерБазы) as [НомерБазы] Resident [Таблица1] Where [Дата] >= '$(DateStart)' and [Дата] < '$(DateEnd)';
	NEXT i; DROP Tables [Таблица1], [Таблица2]; left Join 
	(Таблица3) LOAD [НомерБазы], Field & '.Ссылка', SubField(Field & '.Ссылка', [НомерБазы], 2) as Field From $(vQvPath)\QVD\Справочники\$(Field)* (qvd); left Join 
	(Таблица0) LOAD * Resident [Таблица3]; DROP Table [Таблица3]; DROP Field Field;

ENDSUB

SUB СоответствиеДатБазам2
	[Таблица1]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where [Дата] like '01.*'; 
	[Таблица2]: LOAD if([Версия 1С] like '7.7*', right(0 & №, 2), '3'& left(№, 1) & '3' & right(№, 1)) as [НомерБазы], [Начало базы], [Окончание базы], [Версия 1С], SubField([База], '" -', 1) as [База]
				FROM $(Файл настроек($(Базы SQL))) Where not [База] like '*#*' and not IsNull(№);
	
	FOR i=0 to NoOfRows('Таблица2')-1
		LET DateStart 	= 			Peek('Начало базы',		$(i),'Таблица2'); 
		LET DateEnd		= 			Peek('Окончание базы',	$(i),'Таблица2'); 
		LET НомерБазы	= chr(39) & Peek('НомерБазы',		$(i),'Таблица2') & chr(39);
		LET Версия1С 	= chr(39) & Peek('Версия 1С',		$(i),'Таблица2') & chr(39);
		LET База 		= chr(39) & Peek('База',			$(i),'Таблица2') & chr(39);
		[Таблица3]: LOAD [Дата], $(НомерБазы) as [НомерБазы], $(Версия1С) as [Версия 1С], $(База) as [База] Resident [Таблица1] Where [Дата] >= '$(DateStart)' and [Дата] < '$(DateEnd)';
	NEXT i; DROP Tables [Таблица1], [Таблица2]; Left Join (Таблица0) LOAD * Resident [Таблица3]; DROP Fields [Версия 1С], [База];
ENDSUB




	[TaskList]: Load * inline 
	[ TaskList
	Загрузка данных
	Отправка почты
	Копирование
	Замена файлов ];

	[tRealizationType]: Load * inline 
	[ fRealizationType
	Реализация (док)
	Реализация (рег)];

	[tLoadType]: Load * inline 
	[ fLoadType
	Обычная загрузка
	Быстрая загрузка];
	
//	IF vConsole.TaskNumber <> 0 then; LET Task = Loads(vConsole.TaskNumber, vConsole.TaskList); ENDIF
///$tab AB


SUB Load.A; 										// Календарь

	LET Декада = 'if(Day(Date) < 11, 1, if(Day(Date) > 10 and Day(Date) < 21, 2, 3))'; NoConcatenate
	[Таблица0]:
	LOAD
	  Date(Date) 																		as [Дата],
	  Date(Date) 																		as [Дата.2],
	  Year(Date) 																		as [Годы],

	  Ceil(Num(Month(Date), '0') / 6) & ' полугодие' 									as [Полугодия],
	  Ceil(Num(Month(Date), '0') / 3) & ' квартал' 										as [Кварталы],
	  Month(Date) 																		as [Месяцы],
	  $(Декада) & ' декада' 															as [Декады],
	  Num(Week(Date), '00') & ' неделя' 												as [Недели],
	  Day(Date) 																		as [Числа],	 
	   
	  Num(Month(Date), '00') 															as [Номера месяцев],
	  WeekDay(Date) 																	as [Дни недели],
	  Year(Date) & ' - ' & Ceil(Num(Month(Date), '0') / 6) & ' полугодие' 				as [Годы и полугодия],
	  Year(Date) & ' - ' & Ceil(Num(Month(Date), '0') / 3) & ' квартал' 				as [Годы и кварталы],
	  Year(Date) & '-' & Num(Month(Date), '00') 										as [Годы и номера месяцев],
	  Year(Date) & ' ' & Month(Date) 													as [Годы и месяцы],
//	  if(Date(Date) = MonthStart(AddYears(Today(), 1)), 'Прогноз на ' &  
//	  Year(Today()) & ' ' & Month(Today()), Year(Date) & ' ' & Month(Date)) 			as [Годы и месяцы],
	  Year(Date) & ' ' & Month(Date) & ' ' & $(Декада) & ' декада'  					as [Годы, месяцы и декады],
	  WeekYear(Date) & ' - ' & Num(Week(Date), '00') & ' неделя' 						as [Годы и недели],
	  Month(Date) & ' ' & Day(Date) 													as [Месяцы и числа];
	  
	LOAD Date('2000-01-01' + IterNo() - 1) as [Date] AutoGenerate 1 While Date('2000-01-01' + IterNo() - 1) <= Date('2020-01-01');
	 
	MonthNames.ru = MonthNames; MonthNames = MonthNames.eng;
	Left Join LOAD Distinct [Дата], Lower(Month(Дата)) as [Month] Resident [Таблица0];
	MonthNames = MonthNames.ru; MonthNames.ru = Null();
	
	STORE [Таблица0] into [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Table [Таблица0];
//	CALL Load.G;
ENDSUB	


SUB Load.B; 										// Календарь Движений

	[Таблица1]: LOAD  Date('2000-01-01' + IterNo() - 1) as [Дата] AutoGenerate 1 While Date('2000-01-01' + IterNo() - 1) <= Date('2020-01-01'); Left Join 
	(Таблица1)  LOAD [Дата] as [ДатаДвижения] Resident [Таблица1];

	[Таблица0]: LOAD [Дата], 				 [ДатаДвижения], 0 as [ТипДней] Resident [Таблица1] Where [Дата] =  		 [ДатаДвижения]										; Concatenate // Дата = Дата движения
	(Таблица0)  LOAD [Дата], 				 [ДатаДвижения], 2 as [ТипДней] Resident [Таблица1] Where [Дата] >  		 [ДатаДвижения] and InMonth([ДатаДвижения], Дата, 0); Concatenate // Дата = От начала месяца до Дата (без включения)
	(Таблица0)  LOAD [Дата], 				 [ДатаДвижения], 3 as [ТипДней] Resident [Таблица1] Where [Дата] >= 		 [ДатаДвижения] and InMonth([ДатаДвижения], Дата, 0); Concatenate // Дата = От начала месяца до Дата с включением
	(Таблица0)  LOAD [Дата], 				 [ДатаДвижения], 1 as [ТипДней] Resident [Таблица1] Where MonthStart(Дата) = [ДатаДвижения] and InMonth([ДатаДвижения], Дата, 0); Concatenate // Дата = Начало месяца
	(Таблица0)  LOAD [Дата], '01.01.2000' as [ДатаДвижения], 4 as [ТипДней] Resident [Таблица1] Where [Дата] =  		 [ДатаДвижения]										; 			  // Дата = '01.01.2000' для нулевых значений

	DROP Table [Таблица1]; STORE [Таблица0] into [$(vQvPath)\QVD\# КалендарьДвижений.qvd] (qvd); DROP Table [Таблица0];

ENDSUB
///$tab CDE


SUB Load.C; 										// План Милланда

//	[Таблица1]: LOAD * FROM $(Файл настроек($(План))) ; LET Даты = ''; FOR i=1 to NoOfFields('Таблица1'); IF FieldName($(i),'Таблица1') like '*.*.*' then; 
//	LET Даты = '$(Даты)' & ',' & Chr(39)&FieldName($(i),'Таблица1')&Chr(39); ENDIF; NEXT; LET Даты = Mid('$(Даты)', 2);
//	FOR Each Дата in $(Даты); [Таблица2]: LOAD  Date('$(Дата)') as Дата, [РНН организации], [Код номенклатуры], "$(Дата)" as [Сумма], 'План' as [Документ]
//	Resident [Таблица1] Where not IsNull([Код номенклатуры]) and [Код номенклатуры] <> 'Итого'; NEXT; DROP Table [Таблица1];

	[Таблица1]: SELECT * FROM План; LET Даты = ''; FOR i=1 to NoOfFields('Таблица1'); IF FieldName($(i),'Таблица1') like '*.*.*' then; LET Даты = Даты & '[' & FieldName($(i),'Таблица1') & '],'; ; ENDIF; NEXT;  LET Даты = left(Даты, len(Даты)-1); DROP Table [Таблица1];
	[Таблица1]: CrossTable([Дата], [Сумма]) SELECT  [РНН организации] & '|' & [Код номенклатуры] as [Header],  $(Даты) FROM [План] Where not [Код номенклатуры] like '%Итого%';
	[Таблица2]: LOAD SubField([Header], '|', 1) as [РНН организации], SubField([Header], '|', 2) as [Код номенклатуры], Date(Date#([Дата],'DD.MM.YYYY')) as [Дата], [Сумма], 'План' as [Документ] Resident [Таблица1]; DROP Table [Таблица1];


	[Таблица3]: LOAD Distinct [РНН организации],  MaxString([Организации.Ссылка])  as [Организации.Ссылка]  FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd]  (qvd) Where Match([НомерБазы], '38', '3338') Group By [РНН организации];
	[Таблица4]: LOAD Distinct [Код номенклатуры], MaxString([Номенклатура.Ссылка]) as [Номенклатура.Ссылка] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd) Where Match([НомерБазы], '38', '3338') Group By [Код номенклатуры];

	Left Join (Таблица2) LOAD * Resident [Таблица3]; DROP Table [Таблица3];
	Left Join (Таблица2) LOAD * Resident [Таблица4]; DROP Table [Таблица4];
		 
	[Таблица0]: NoConcatenate LOAD * Resident [Таблица2]  Where not IsNull(Сумма) and Сумма <> 0; DROP Table [Таблица2]; DROP Fields [РНН организации], [Код номенклатуры];

	STORE [Таблица0] into [$(vQvPath)\QVD\# ПланМилланда.qvd] (qvd); DROP Table [Таблица0];

ENDSUB	

SUB Load.D; 										// План Заводов

//	[Таблица1]: LOAD * FROM $(Файл настроек($(План заводов))) ; LET Даты = ''; 
//	FOR i=1 to NoOfFields('Таблица1'); IF FieldName($(i),'Таблица1') like '*.*.*' then; LET Даты = '$(Даты)' & ',' & Chr(39)&FieldName($(i),'Таблица1')&Chr(39); ENDIF; NEXT; LET Даты = Mid('$(Даты)', 2);
//	FOR Each Дата in $(Даты); [Таблица0]: LOAD [РНН организации], [Код номенклатуры], Date('$(Дата)')as [Дата], "$(Дата)" as [Вес], 'План' as [Документ], 1 as [ВидДвижения] Resident [Таблица1]; NEXT; DROP Table [Таблица1];

	[Таблица1]: SELECT * FROM [План заводов]; LET Даты = ''; FOR i=1 to NoOfFields('Таблица1'); IF FieldName($(i),'Таблица1') like '*.*.*' then; 
	LET Даты = Даты & '[' & FieldName($(i),'Таблица1') & '],'; ENDIF; NEXT;  LET Даты = left(Даты, len(Даты)-1); //NoConcatenate// DROP Table [Таблица1];
	[Таблица2]: CrossTable([Дата], [Вес]) LOAD  [РНН организации] & '|' & [Код номенклатуры] as [Header],  $(Даты) Resident [Таблица1]; DROP Table [Таблица1];
	[Таблица0]: LOAD SubField([Header], '|', 1) as [РНН организации], SubField([Header], '|', 2) as [Код номенклатуры], Date(Date#([Дата],'DD.MM.YYYY')) as [Дата], [Вес], 'План' as [Документ], 1 as [ВидДвижения] Resident [Таблица2]; DROP Table [Таблица2];
	
	Таблица2: LOAD Distinct [Код номенклатуры], [Номенклатура.Ссылка], [НомерБазы] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd) Where [Номенклатура.Тип] = 'Номенклатура'; Inner Join (Таблица0) LOAD * Resident Таблица2; DROP Table Таблица2;
	Таблица3: LOAD Distinct [РНН организации],  [Организации.Ссылка],  [НомерБазы] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd]  (qvd) Where not WildMatch([Организации.Ссылка], '06*', '03|     0   |', '*|Д*'); Inner Join (Таблица0) LOAD * Resident Таблица3; DROP Table Таблица3;		
	DROP Fields [РНН организации], [Код номенклатуры]; STORE [Таблица0] into [$(vQvPath)\QVD\# ПланЗаводов.qvd] (qvd); DROP Table [Таблица0];
	
ENDSUB

SUB Load.E; 										// Логистика

	[Таблица1]: LOAD [НомерБазы], [РНН организации], [Организации.Ссылка] From [$(vQvPath)\QVD\Справочники\Организации*.qvd] (qvd) Where not [Организации.Ссылка] like '*Д';
	[Таблица2]: LOAD [НомерБазы], [Валюты.Ссылка], [Рынки] From [$(vQvPath)\QVD\Справочники\Валюты*.qvd] (qvd); Left Join (Таблица1)	LOAD * Resident [Таблица2]; DROP Table [Таблица2]; DROP Field [НомерБазы];
	[Таблица0]: SELECT РННОрганизации as [РНН организации], Экспорт as [Сумма], 'Экспорт' as [Рынки] FROM [Логистика]; Concatenate
	(Таблица0)  SELECT РННОрганизации as [РНН организации], НеЭкспорт as [Сумма], 'Казахстан' as [Рынки] FROM [Логистика]; Left Join
	(Таблица0)	LOAD Distinct [РНН организации], [Организации.Ссылка], [Валюты.Ссылка], [Рынки], 'Логистика' as [Документ] Resident [Таблица1]; Drop Table [Таблица1]; Drop Fields [РНН организации], [Рынки];

	LET СтрокаСохранения = '$(vQvPath)\QVD\# Логистика.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
ENDSUB

SUB Load.F; 										// Операционные затраты

	[Таблица1]: SELECT * FROM [Операционные затраты]; LET Даты = ''; FOR i=1 to NoOfFields('Таблица1'); IF FieldName($(i),'Таблица1') like '*.*.*' then; 
	LET Даты = Даты & '[' & FieldName($(i),'Таблица1') & '],'; ENDIF; NEXT;  LET Даты = left(Даты, len(Даты)-1); DROP Table [Таблица1];
	[Таблица1]: CrossTable([Дата], [СуммаЗатрат]) SELECT  [РНН организации],  $(Даты) FROM [Операционные затраты];
	[Таблица0]: LOAD [РНН организации], Date(Date#([Дата],'DD.MM.YYYY')) as [Дата], [СуммаЗатрат], 'ОперационныеЗатраты' as [Документ] Resident [Таблица1]; DROP Table [Таблица1];
	
	Таблица3: LOAD Distinct [РНН организации],  [Организации.Ссылка],  [НомерБазы] FROM [$(vQvPath)\QVD\Справочники\Организации*.qvd]  (qvd) Where not WildMatch([Организации.Ссылка], '06*', '03|     0   |', '*|Д*'); Inner Join (Таблица0) LOAD * Resident Таблица3; DROP Table Таблица3;		
	DROP Fields [РНН организации], [НомерБазы]; STORE [Таблица0] into [$(vQvPath)\QVD\# ОперационныеЗатраты.qvd] (qvd); DROP Table [Таблица0];

/*	[Таблица7]: LOAD * From [$(vQvPath)\QVD\# ОперационныеЗатраты.qvd] (qvd); [Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd);	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], sum([СуммаЗатрат]) as [Сумма1] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], 						  					  sum([СуммаЗатрат]) as [Сумма2] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка];	DROP Table [Таблица0]; Left Join 		
	(Таблица7)  LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], [Сумма1] / [Сумма2] as [Коэфицент] Resident [Таблица1]; DROP Table [Таблица1]; [Таблица0]: LOAD *, [Коэфицент] * [СуммаЗатрат] as [Сумма] Resident [Таблица7]; DROP Fields [Коэфицент], [СуммаЗатрат]; 
	DROP Table [Таблица7]; STORE [Таблица0] into [$(vQvPath)\QVD\# ОперационныеЗатраты.qvd] (qvd); DROP Tables [Таблица0];
*/	
ENDSUB

SUB Load.G; 										// Загрузка Excel в SQL
	LET Var = TransferFile();
	OLEDB CONNECT TO [Provider=SQLOLEDB.1;Persist Security Info=True;User ID=sa;Initial Catalog=Agroproduct;Data Source=88.99.89.151;Use Procedure for Prepare=1;Auto Translate=True;Packet Size=4096;Workstation ID=QLIK_SERVER;Use Encryption for Data=False;Tag with column collation when possible=False] (XPassword is dVZOATJNNRZKHUJNHDaUGWVMSTbMDcQF);
	[Table.71]: LOAD [Лист], [Описание листа], 0 as [Temp] FROM [Settings.xls] (biff, embedded labels, table is [0$]) Where Len(Лист) > 0; 
	FOR i = 0 TO NoOfRows('Table.71') - 1; LET vSheetName = Peek('Лист', i) & '$'; LET vTableName = Peek('Описание листа', i); [Table.72]: LOAD * FROM [Settings.xls] (biff, embedded labels, table is [$(vSheetName)]); 
	LET vFields0 = ''; FOR j = 1 to NoOfFields('Table.72'); IF len(FieldName($(j),'Table.72')) > 4 or (len(FieldName($(j),'Table.72')) <= 4 and not FieldName($(j),'Table.72') like 'F*') then;
	LET vFields0 = vFields0 & '[' & Replace(FieldName($(j),'Table.72'), '.', '#') & '] as [' & FieldName($(j),'Table.72') & '], '; ENDIF; NEXT; LET vFields0 = left(vFields0, len(vFields0)-2); 
	LET vFields1 = ''; FOR j=1 to NoOfFields('Table.72'); IF len(FieldName($(j),'Table.72')) > 4 or (len(FieldName($(j),'Table.72')) <= 4 and not FieldName($(j),'Table.72') like 'F*') then; LET vType = If(FieldName($(j),'Table.72') like '*Order*', 'INT', 'VARCHAR(max)');
	LET vFields1 = vFields1 & '[' & FieldName($(j),'Table.72') & '] $(vType), '; ENDIF; NEXT;  LET vFields1 = left(vFields1, len(vFields1)-2); DROP Table [Table.72];
	SQL IF OBJECT_ID(N'dbo.$(vTableName)', N'U') IS NOT NULL DROP TABLE [$(vTableName)]; SQL CREATE TABLE [$(vTableName)]( $(vFields1) );  LET vOrder = If(vTableName = 'Выражения', 'Order by [Expressions#Order]', '');
	SQL INSERT INTO [$(vTableName)]  SELECT $(vFields0) FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0', N'Excel 8.0;Database=c:\web\agroproduct\settings.xls', 'SELECT * FROM [$(vSheetName)] $(vOrder)'); NEXT; DROP Table [Table.71]; //[Expressions.Order]  $(vOrder)
  	LET Var = DelRemoteFile();
ENDSUB
///$tab 1


$(vConsole.LoadStart(1)); 										// Организации
	
 		LET Организация = ''&chr(39)&''& SubField('$(База)', ' - ', 1) & ''&chr(39)&''; 

		[Таблица0]:
		SELECT
		 	 $(НомерБазы)																		as [НомерБазы]
			,$(НомерБазы)+$(|)+$(Справочник.Организации.Ссылка)+$(|)							as [Организации.Ссылка]
			,$(Организация)																		as [Организация] 
			,$(Справочник.Организации.РННОрганизации)											as [РНН организации]	
			,$(Справочник.Организации.Наименование)												as [Организации.Наименование]

		FROM
			 $(Справочник.Организации)															as Организации 				(nolock) 	
		;

$(vConsole.LoadEnd);										

SUB Conf.1; $(vConfigConnection);

	RENAME Table [Таблица0] to [Таблица2]; Left Join 
	(Таблица2) SELECT [Вид организации], [Организация], [Филиал], [РНН организации], [БИН организации], [Регион], [Регион 2], [Канал] FROM [Организации];
	
		NoConcatenate
		[Таблица0]:
		LOAD 
			 [НомерБазы] 																			as [НомерБазы]
		    ,[Организация] 																			as [Организации]
		    ,[Вид организации]																		as [Вид организации]
		    ,if(isnull(Филиал), [Организации.Наименование], Филиал) 								as [Филиалы]
		    ,if(isnull(Филиал), [Организации.Наименование], Филиал) 								as [Филиалы и дист-ры]
		    ,[РНН организации] 																		as [РНН организации]
		    ,[БИН организации]																		as [БИН организации]
		    ,[Организации.Ссылка]																	as [Организации.Ссылка]
		    
		    ,[Регион] 																				as [Регионы]
		    ,[Регион 2] 																			as [Регионы 2]
		    ,[Канал] 																				as [Каналы]	    
		Resident [Таблица2]; DROP Table [Таблица2];  
		
		LET 'РНН организации' = 'if([Организации] like ''*Милланд*'', ''М-Дистры'', if([Организации] like ''*A-TRADE*'', ''А-Дистры'', if([Организации] like ''*Coppa Italia*'', ''К-Дистры'')))';
		Concatenate  (Таблица0)  
		LOAD 
		
			 [НомерБазы] 																		as [НомерБазы]
	    	,[Организации] 																		as [Организации]
	    	,'Торговые компании'																as [Вид организации]				
			,[Филиалы]																			as [Филиалы]
			,SubField([Филиалы], ' - ', 1) & ' - Дистрибьюторы' 								as [Филиалы и дист-ры]
	    	,$(РНН организации)																	as [РНН организации]
	    	,[БИН организации]																	as [БИН организации]	
			,[Организации.Ссылка] & '|Д' 														as [Организации.Ссылка]	

			,[Регионы] 																			as [Регионы]
			,[Регионы 2] 																		as [Регионы 2]
	    	,'Дистрибьюторы'																	as [Каналы]	
	    					    				
		Resident [Таблица0] Where [Вид организации] = 'Торговые компании';
			
		Concatenate (Таблица0) 
		LOAD
//		 	 right('0' & $(Номер базы), 2)													as [НомерБазы]
		 	 '04'																			as [НомерБазы]			 
			,'Завод "Молпродукт"' 															as [Организации]
			,'Заводы'																		as [Вид организации]
			,'"Молпродукт" - Петропавловск' 												as [Филиалы]
			,'"Молпродукт" - Петропавловск' 												as [Филиалы и дист-ры]
			,'481400060780' 																as [РНН организации]
			,'' 																			as [БИН организации]
//			,right('0' & $(Номер базы), 2) & '|     0   |' 									as [Организации.Ссылка]
			,'04|     0   |' 																as [Организации.Ссылка]
			
		    ,'Петропавловск' 																as [Регионы]
		    ,'Петропавловск' 																as [Регионы 2]
		    ,'Регионы' 																		as [Каналы]	
		AutoGenerate 1;
			
		Concatenate (Таблица0) 
		LOAD
		 	 '03'																			as [НомерБазы]			 
			,'Завод "Emile"' 																as [Организации]
			,'Заводы'																		as [Вид организации]
			,'"Emile" - Алматы' 															as [Филиалы]
			,'"Emile" - Алматы' 															as [Филиалы и дист-ры]
			,'600700600406' 																as [РНН организации]
			,'' 																			as [БИН организации]
			,'03|     0   |' 																as [Организации.Ссылка]
			
		    ,'Алматы ' 																		as [Регионы]
		    ,'Алматы ' 																		as [Регионы 2]
		    ,'Алматы ' 																		as [Каналы]	
		AutoGenerate 1;	
						
ENDSUB

///$tab 2


$(vConsole.LoadStart(2)); 										// Склады		

		[Таблица1]:
		SELECT
			 $(НомерБазы)          																as [НомерБазы]
			,$(Справочник.Склады.Наименование)													as [Склады.Наименование]
			,$(НомерБазы)+$(|)+$(Справочник.Склады.Ссылка)+$(|)									as [Склады.Ссылка]

		FROM
			 $(Справочник.Склады)													            as Склады 					(nolock)	
		;

$(vConsole.LoadEnd);
	

SUB Conf.2; $(vConfigConnection);
	[ТаблицаZ]: Mapping SELECT  Distinct  [Склад] as [Склады.Наименование], [Вид склада] as [Склады.Вид] FROM [Склады] Where len([Склад]) > 0;
	[Таблица0]: LOAD * , ApplyMap('ТаблицаZ', [Склады.Наименование], 'Не определен') as [Склады.Вид] Resident [Таблица1]; DROP Table [Таблица1]; RENAME Field [Склады.Наименование] to [Склады];
	Concatenate(Таблица0) LOAD '#' as [НомерБазы], '#' as [Склады.Ссылка], 'Основной' as [Склады.Вид] AutoGenerate 1;
ENDSUB
///$tab 3


$(vConsole.LoadStart(3)); 										// Валюты	

		[Таблица0]:
		SELECT
			 $(НомерБазы)          																as [НомерБазы]
			,$(Справочник.Валюты.Наименование)													as [Валюты]
			,$(НомерБазы)+$(|)+$(Справочник.Валюты.Ссылка)+$(|)									as [Валюты.Ссылка]
			
		FROM
			 $(Справочник.Валюты)													            as Валюты 					(nolock)

		Where
			len($(Справочник.Валюты.Наименование)) > 0
		;

$(vConsole.LoadEnd); 
		
SUB Conf.3

	[Таблица1]: LOAD [НомерБазы], [Валюты.Ссылка]
		,if([Валюты] like '*тенге*', 'KZT', if([Валюты]  like 'RU*', 'RUR', [Валюты])) 		as [Валюты] 
	 	,if([Валюты] like '*kzt*' or [Валюты]  like '*тенге*', 'Казахстан', 'Экспорт') 		as [Рынки]
	Resident [Таблица0]; DROP Table [Таблица0];	RENAME Table [Таблица1] to [Таблица0];
	Concatenate(Таблица0) LOAD '#' as [НомерБазы], '#' as [Валюты.Ссылка], 'Казахстан' as [Рынки] AutoGenerate 1;
ENDSUB
///$tab 4


$(vConsole.LoadStart(4)); 										// Контрагенты


		IF not '$(Версия 1С)' like '7.7*' then 

			LET Справочник.Контрагенты.КодТорговли 				= if('$(База)' = 'ТОО "Coppa Italia Trading"', ''&chr(39)&''&chr(39)&'', '#1$(Справочник.Контрагенты.КодТорговли)');
			LET Справочник.Контрагенты.НаличиеХолодильников 	= if('$(База)' like '*Милланд*13' or '$(База)' like '*Милланд*Торговля', 'case when #1$(Справочник.Контрагенты.НаличиеХолодильников) = 1 Then '&chr(39)&'Да'&chr(39)&' else '&chr(39)&'Нет'&chr(39)&' end', ''&chr(39)&''&chr(39)&'');	
			LET КонтролироватьСуммуЗадолженности 				= 'case when $(Справочник.ДоговорыКонтрагентов.КонтролироватьСуммуЗадолженности) = 1 then '&chr(39)&'Да'&chr(39)&' else '&chr(39)&'Нет'&chr(39)&' end';	
			LET Справочник.ТорговыеТочки.ТипТочки 				= 'case when $(Справочник.ТорговыеТочки.ТипТочки) = 1 then '&chr(39)&'Оптовый'&chr(39)&' else '&chr(39)&''&chr(39)&' end';	

			[Таблица3]:
			Select 
	
				 $(НомерБазы)          															as [НомерБазы]
				,$(НомерБазы)+$(|)+#1$(Справочник.Контрагенты.Ссылка)+$(|)						as [Контрагенты.Ссылка]
				,#1$(Справочник.Контрагенты.Родитель) 											as [Контрагенты.Родитель]
				,#1$(Справочник.Контрагенты.ЭтоГруппа) 											as [Контрагенты.ЭтоГруппа]
				
				,#1$(Справочник.Контрагенты.Наименование) 										as [Контрагенты]
				,#1$(Справочник.Контрагенты.РНН) 												as [РНН контрагента]
				,#1$(Справочник.Контрагенты.ИдентификационныйКодЛичности) 						as [БИН контрагента]
				,#2$(Справочник.Контрагенты.Наименование) 										as [Головной контрагент]
				,$(Справочник.Контрагенты.КодТорговли)											as [Код торговли]
				,$(Справочник.Контрагенты.НаличиеХолодильников) 								as [Наличие холодильников]
				
				,$(Справочник.КатегорияКлиентов.Наименование) 									as [Категория клиента]
				,$(Справочник.ВидыКонтактнойИнформации.Наименование) 							as [Вид контактной информации]
				,$(РегистрСведений.КонтактнаяИнформация.Представление) 							as [Контактная информация]
//				,$(Справочник.ТорговыеТочки.Наименование) 										as [Наименование торговой точки]
//				,$(Справочник.ТорговыеТочки.Адрес) 												as [Адрес торговой точки]
//				,$(Справочник.ТорговыеТочки.Телефон) 											as [Телефон торговой точки]
//				,$(Справочник.ТорговыеТочки.ТипТочки)											as [Тип торговой точки]

				,$(Справочник.ДоговорыКонтрагентов.Наименование) 								as [Наименование договора]
				,$(Справочник.ДоговорыКонтрагентов.ДопустимаяСуммаЗадолженности) 				as [Допустимая сумма задолженности]
				,$(КонтролироватьСуммуЗадолженности) 											as [Контролировать сумму задолженности]
				,$(Справочник.ДоговорыКонтрагентов.ДатаНачалаДействияДоговора) 					as [Дата начала действия договора]
	
			From
				$(Справочник.Контрагенты) 						 					            as #1Контрагенты				(nolock)
					Left Join $(Справочник.Контрагенты) 							            as #2Контрагенты 				(nolock) On #1$(Справочник.Контрагенты.ГоловнойКонтрагент) 			= #2$(Справочник.Контрагенты.Ссылка)
					Left Join $(РегистрСведений.КонтактнаяИнформация) 				            as КонтактнаяИнформация			(nolock) On #1$(Справочник.Контрагенты.Ссылка) 						= $(РегистрСведений.КонтактнаяИнформация.Объект)
					Left Join $(Справочник.ВидыКонтактнойИнформации) 				            as ВидыКонтактнойИнформации 	(nolock) On $(РегистрСведений.КонтактнаяИнформация.Вид) 				= $(Справочник.ВидыКонтактнойИнформации.Ссылка)
//					Left Join $(Справочник.ТорговыеТочки) 							            as ТорговыеТочки 				(nolock) On #1$(Справочник.Контрагенты.Ссылка) 						= $(Справочник.ТорговыеТочки.Владелец)
					Left Join $(Справочник.КатегорияКлиентов) 						            as КатегорияКлиентов 			(nolock) On #1$(Справочник.Контрагенты.КатегорияКлиентов) 			= $(Справочник.КатегорияКлиентов.Ссылка)
					Left Join $(Справочник.ДоговорыКонтрагентов)					            as ДоговорыКонтрагентов			(nolock) On #1$(Справочник.Контрагенты.Ссылка) 						= $(Справочник.ДоговорыКонтрагентов.Владелец)
	
			;
		
		ELSE
		
			[Таблица3]:
			SELECT
				
				 $(НомерБазы)          															as [НомерБазы]
				,$(НомерБазы)+$(|)+$(Справочник.Контрагенты.Ссылка)+$(|)						as [Контрагенты.Ссылка]

				,'' 																			as [Контрагенты.Родитель]
				,'' 																			as [Контрагенты.ЭтоГруппа]
				
				,$(Справочник.Контрагенты.Наименование)											as [Контрагенты]
				,$(Справочник.Контрагенты.РНН) 													as [РНН контрагента]
				,'' 																			as [БИН контрагента]
				,''																				as [Головной контрагент]
				,''																				as [Код торговли]
				,''																				as [Наличие холодильников]
				
				,'' 																			as [Категория клиента]
				,'' 																			as [Вид контактной информации]
				,'' 																			as [Контактная информация]
//				,'' 																			as [Наименование торговой точки]
//				,'' 																			as [Адрес торговой точки]
//				,'' 																			as [Телефон торговой точки]
//				,''																				as [Тип торговой точки]

				,'' 																			as [Наименование договора]
				,'' 																			as [Допустимая сумма задолженности]
				,'' 																			as [Контролировать сумму задолженности]
				,'' 																			as [Дата начала действия договора]
								
			FROM
				 $(Справочник.Контрагенты)											            as Контрагенты					(nolock)
	
			;		

		ENDIF

	$(vConfigConnection);
	[ТаблицаQ]: Mapping SELECT [РНН организации] as [РНН контрагента], 'Внутренние ' + Lower([Вид организации]) as [Контрагенты.Вид] From [Организации] Where $(vDocCondition) and len([РНН организации]) > 0 and len([Вид организации]) > 0;
	[ТаблицаR]: Mapping SELECT [Категория клиента], [Группа] as [Группы категорий клиентов] 	From [Контрагенты]; 
		
////////////////////////////// Добавляем <Без категории> и [Вид контрагента](Внешний и Внутренний)
		[Таблица0]: LOAD *
						, if(len([Категория клиента]) < 1, '<Без категории>', [Категория клиента]) as [Категория клиента 2]
//						, ApplyMap('ТаблицаQ', [РНН контрагента], 'Внешний') as [Вид контрагента] Resident [Таблица3]; 
						, ApplyMap('ТаблицаR', [Категория клиента], 'Прочее') as [Группы категорий клиентов]  
						, ApplyMap('ТаблицаQ', [РНН контрагента], if(Match([Категория клиента], 'Складской', 'инвентаризация') or [Контрагенты] = 'Фактический приход', 'Внутренние другие', 'Внешние контрагенты')) as [Контрагенты.Вид] Resident [Таблица3]; 
		DROP Table [Таблица3]; //Left Join (Таблица0) LOAD * Resident [Таблица1]; 
		DROP Field [Категория клиента] From [Таблица0]; RENAME Field [Категория клиента 2] to [Категории клиентов];

////////////////////////////// Добавляем поле [Дистрибьютор] для Милланда
		IF '$(База)' like '*Милланд*' then
			Left Join (Таблица0) SELECT Distinct [Код торговли], [Дистрибьютор] From[Дистрибьюторы] Where len([Дистрибьютор]) > 0;
		ELSE
			Left Join (Таблица0) LOAD '' as [Дистрибьютор] AutoGenerate 1;
		ENDIF

////////////////////////////// Добавляем наименования категорий и контрагентов для Шимовой
		IF '$(База)' like '*Милланд*' then
			Left Join (Таблица0) SELECT [Код торговли], [Контрагент] as [Контрагенты 2] From [Контрагенты] Where [Организация] like '%Милланд%' and len([Ф]) > 0;
		ELSEIF '$(База)' like '*A-TRADE*' then
			Left Join (Таблица0) SELECT [Код торговли], [Контрагент] as [Контрагенты 2] From [Контрагенты] Where [Организация] like '%A-TRADE%' and len([Ф]) > 0;
		ELSEIF '$(База)' like '*Coppa Italia Trading*' then
			Left Join (Таблица0) SELECT [Контрагенты],  [Контрагент] as [Контрагенты 2] From [Контрагенты] Where [Организация] like '%Coppa Italia Trading%' and len([Ф]) > 0;
		ELSE
			Left Join (Таблица0) LOAD '' as [Контрагенты 2] AutoGenerate 1;
		ENDIF
			
		IF '$(База)' like '*Милланд*' then
			Left Join (Таблица0) SELECT [Категории клиентов 1] as [Категории клиентов], [Категории клиентов 2] From [Контрагенты] Where [Организация] like '%Милланд%';	
		ELSEIF '$(База)' like '*A-TRADE*' then
			Left Join (Таблица0) SELECT [Категории клиентов 1] as [Категории клиентов], [Категории клиентов 2] From [Контрагенты] Where [Организация] like '%A-TRADE%';
		ELSEIF '$(База)' like '*Coppa Italia Trading*' then
			Left Join (Таблица0) SELECT [Категории клиентов 1] as [Категории клиентов], [Категории клиентов 2] From [Контрагенты] Where [Организация] like '%Coppa Italia Trading%';
		ELSE
			Left Join (Таблица0) LOAD '' as [Категории клиентов 2] AutoGenerate 1;
		ENDIF
		
		[Таблица5]: LOAD * 
						,if(Len([Контрагенты 2]) < 2, [Контрагенты], [Контрагенты 2]) as [Контрагенты 3]
						,if([Контрагенты] like '*ООО*', 'Экспорт', 'Казахстан') as [Рынки 2]
						,if(Len([Контрагенты 2]) > 2, 'Дистрибьюторы', if([Категории клиентов 2] = 'Дистрибьюторы', 'прочие', if(Len([Категории клиентов 2]) > 2, [Категории клиентов 2], 'прочие')))	as [Категории клиентов 3]
					Resident [Таблица0]; Drop Table [Таблица0]; RENAME Table [Таблица5] to [Таблица0]; DROP Fields [Контрагенты 2], [Категории клиентов 2]; RENAME Fields [Контрагенты 3] to [Контрагенты 2], [Категории клиентов 3] to [Категории клиентов 2];	
			
		IF СчетчикБаз = 0 then; STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); ELSE; [Таблица0]: LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd); STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); ENDIF; DROP Table [Таблица0];
			
$(vConsole.LoadEnd);  

SUB Conf.4

//	DROP Table [Таблица1]; 
	[Таблица0]: LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd); Concatenate(Таблица0) LOAD '#' as [НомерБазы], '#' as [Контрагенты.Ссылка], 'Внешние контрагенты' as [Контрагенты.Вид] AutoGenerate 1;
															 Concatenate(Таблица0) LOAD '#' as [НомерБазы], '$' as [Контрагенты.Ссылка], 'Внутренние заводы'   as [Контрагенты.Вид] AutoGenerate 1;
	
ENDSUB
///$tab 5


$(vConsole.LoadStart(5)); 										// ФизическиеЛица

		[Таблица0]:
		SELECT 
			 $(НомерБазы)          																as [НомерБазы]
			,UPPER($(Справочник.ФизическиеЛица.Наименование))									as [ФизическиеЛица.Наименование]
			,$(НомерБазы)+$(|)+$(Справочник.ФизическиеЛица.Ссылка)+$(|)							as [ФизическиеЛица.Ссылка]
			,$(Справочник.ФизическиеЛица.РНН)													as [ФизическиеЛица.РНН]
			,$(Справочник.ФизическиеЛица.ИдентификационныйКодЛичности)							as [ФизическиеЛица.ИИН]

		FROM
			 $(Справочник.ФизическиеЛица)											            as ФизическиеЛица			(nolock)
		;
	
		LET НаименованиеФайла = 'Справочники\ФизическиеЛица'; IF Match($(Номер базы), 22, 23, 39) then; CALL УнификацияИмен; ENDIF
 		
 		IF СчетчикБаз = 0 then; STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); ELSE; [Таблица0]: LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd); STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); ENDIF; DROP Table [Таблица0];
 
$(vConsole.LoadEnd); 

SUB Conf.5

	[Таблица0]: LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd);
	
ENDSUB

SUB УнификацияИмен
	
	IF not isnull(FileSize(НаименованиеФайла)) then
	
			LET Num = If($(Номер базы) = 39, 3338, 3231);
			
			Left Join(Таблица0)
			LOAD ФизическиеЛица.Наименование as ФизическиеЛица.Наименование2, ФизическиеЛица.РНН
			FROM [$(vQvPath)\QVD\Справочники\ФизическиеЛица.qvd] (qvd)  Where len(ФизическиеЛица.РНН) > 5 and ФизическиеЛица.РНН <> '00000000000' and [НомерБазы] = $(Num);

			[Таблица1]:
			LOAD *, if(len(ФизическиеЛица.Наименование2) > 2 and ФизическиеЛица.Наименование <> ФизическиеЛица.Наименование2, ФизическиеЛица.Наименование2,ФизическиеЛица.Наименование) as Temp 
			Resident [Таблица0]; DROP Table [Таблица0]; DROP Field ФизическиеЛица.Наименование; DROP Field ФизическиеЛица.Наименование2; RENAME Table [Таблица1] to [Таблица0]; RENAME Field Temp to ФизическиеЛица.Наименование;

			Left Join(Таблица0)
			LOAD ФизическиеЛица.Наименование as ФизическиеЛица.Наименование2, ФизическиеЛица.ИИН
			FROM [$(vQvPath)\QVD\Справочники\ФизическиеЛица.qvd] (qvd) Where len(ФизическиеЛица.ИИН) > 5 and ФизическиеЛица.ИИН <> '00000000000' and [НомерБазы] = $(Num);
			
			[Таблица1]:
			LOAD *, if(len(ФизическиеЛица.Наименование2) > 2 and ФизическиеЛица.Наименование <> ФизическиеЛица.Наименование2, ФизическиеЛица.Наименование2,ФизическиеЛица.Наименование) as Temp 
			Resident [Таблица0]; DROP Table [Таблица0]; DROP Field ФизическиеЛица.Наименование; DROP Field ФизическиеЛица.Наименование2; RENAME Table [Таблица1] to [Таблица0]; RENAME Field Temp to ФизическиеЛица.Наименование;
	ENDIF
	
ENDSUB
///$tab 6


$(vConsole.LoadStart(6)); 										// Номенклатура

		LET Вес 				= if('$(Версия 1С)' like '7.7*', chr(39)&chr(39), if('$(Версия 1С)' like '8*Бух', '#1$(Справочник.Номенклатура.Вес)', '$(Справочник.ЕдиницыИзмерения.Вес)'));
		LET ЕдиницыИзмерения 	= if('$(Версия 1С)' like '8* У*', 'left join  $(Справочник.ЕдиницыИзмерения) as ЕдиницыИзмерения on #1$(Справочник.Номенклатура.ЕдиницаДляОтчетов) = $(Справочник.ЕдиницыИзмерения.Ссылка)', '');
	
		FOR Each Справочник in 'Номенклатура', 'Материалы', 'ФиксированныеАктивы'

			IF '$(Версия 1С)' like '8*' and  Match('$(Справочник)', 'Материалы', 'ФиксированныеАктивы') then; ELSE

				LET $ 	= 'case when ''$(Справочник)'' = ''Материалы'' then cast(''$'' as $(VarType)) when ''$(Справочник)'' = ''ФиксированныеАктивы'' then cast(''$$'' as $(VarType)) else cast('''' as $(VarType)) end';
				LET Код = 'isnull(#1$(Справочник.$(Справочник).Код), ''Без кода'')';
				[Таблица1]:
				SELECT

					 $(НомерБазы)																		as [НомерБазы]
					,$(НомерБазы)+$(|)+$($)+#1$(Справочник.$(Справочник).Ссылка)+$(|)					as [Номенклатура.Ссылка]
//					,#1$(Справочник.$(Справочник).Код)													as [Номенклатура.Код]
					,$(Код)																				as [Номенклатура.Код]	
					,#1$(Справочник.$(Справочник).Наименование)											as [Номенклатура.Наименование]
					,#1$(Справочник.$(Справочник).Родитель) 											as [Номенклатура.Родитель]
					,#1$(Справочник.$(Справочник).ЭтоГруппа) 											as [Номенклатура.ЭтоГруппа]
					,#2$(Справочник.$(Справочник).Наименование)											as [Номенклатура.НаименованиеГруппы]
					,$(Вес)																				as [Номенклатура.Вес]
					,'$(Справочник)'																	as [Номенклатура.Тип]
		
				from
					 $(Справочник.$(Справочник))											            as #1$(Справочник)	(nolock)	
				  	left join $(Справочник.$(Справочник))									            as #2$(Справочник) 	(nolock) on #2$(Справочник.$(Справочник).Ссылка) = #1$(Справочник.$(Справочник).Родитель)
				  	$(ЕдиницыИзмерения)
				;
			
			ENDIF
			
		NEXT Справочник
	
		$(vConfigConnection); 
		Left Join([Таблица1])
		SELECT 
		     Код 																			as [Номенклатура.Код]
	//		,'Номенклатура'																	as [Номенклатура.Тип]
//		    ,if(Группа = 'Лабуда', Null(), Номенклатура) 									as [Номенклатура]
		    ,Номенклатура 																	as [Номенклатура]
		    ,[Номенклатура 2]																as [Номенклатура 2]
		    ,Жирность 																		as [Жирность]
		    ,Вес 																			as [Вес номенклатуры]
		    ,[Вес (4)]																		as [Вес номенклатуры (4)]
		    ,Упаковка 																		as [Упаковка]
		    ,[Упаковка (4)]																	as [Упаковка (4)]
		    ,Бренд 																			as [Бренды] 
		    ,Ассортимент 																	as [Ассортимент]
		    ,Производитель 																	as [Производитель]
		    ,Replace(Группа, 'Лабуда', 'Материалы')  										as [Номенклатурные группы (1)]
		    ,Replace([Группа (2)], 'Лабуда', 'Материалы')  									as [Номенклатурные группы (2)]
		    ,[Группа (3)]  																	as [Номенклатурные группы (3)]
		    ,[Группа (4)]  																	as [Номенклатурные группы (4)]
			,[Штук в коробке]																as [Штук в коробке]
			,[Коробок в палете]																as [Коробок в палете]
			,1																				as [Номенкатура.Агро]		
		FROM [Номенклатура] Where len([$(Номер базы)]) > 0;
		[Таблица2]: LOAD *, 1 as Temp Resident [Таблица1]; DROP Table [Таблица1];
	
$(vConsole.LoadEnd); 

SUB Conf.6; $(vConfigConnection);
			
	NoConcatenate
	[Таблица0]:
	LOAD 
		 [НомерБазы]																			as [НомерБазы]
		,If(IsNum(Trim([Номенклатура.Код])), Num([Номенклатура.Код],'000000000'), [Номенклатура.Код])	as [Код номенклатуры]
	    ,[Номенклатура.Ссылка]																	as [Номенклатура.Ссылка]
	    ,if(isnull(Номенклатура), [Номенклатура.Наименование], Номенклатура) 					as [Номенклатура] 
	    ,if(isnull([Номенклатура 2]), [Номенклатура.Наименование], [Номенклатура 2]) 			as [Номенклатура 2] 
	    ,[Номенклатура.Наименование]															as [Номенклатура.Наименование]
	    ,Жирность 																				as [Жирность]
	    ,if(not IsNum(Номенклатура.Вес) or [Номенклатура.Вес] = 0, 	[Вес номенклатуры], 
	    														  	[Номенклатура.Вес])			as [Номенклатура.Вес]
	    ,if(IsNull([Вес номенклатуры]) or [Вес номенклатуры] = 0, 	[Номенклатура.Вес], 
	    														  	[Вес номенклатуры])			as [Вес номенклатуры]
	    ,[Вес номенклатуры (4)] 																as [Вес номенклатуры (4)]								
	    ,Упаковка 																				as [Упаковка]
	    ,[Упаковка (4)] 																		as [Упаковка (4)]
	    ,Бренды 																				as [Бренды] 
	    ,Ассортимент																			as [Ассортимент]
	    ,[Производитель] 																		as [Производитель]
	    ,if(len([Номенклатура.Код])<1, 'Материалы', [Номенклатурные группы (1)])				as [Номенклатурные группы (1)]
	    ,[Номенклатурные группы (2)]															as [Номенклатурные группы (2)]
	    ,[Номенклатурные группы (3)]															as [Номенклатурные группы (3)]
	    ,[Номенклатурные группы (4)]															as [Номенклатурные группы (4)]
	    ,[Номенклатура.НаименованиеГруппы] 														as [Номенклатура.НаименованиеГруппы]
	    ,[Номенклатура.Тип]																		as [Номенклатура.Тип]

	    ,if([Номенклатура.Тип] 			= 'ФиксированныеАктивы', 'Фиксированные активы', 
	     if([Номенклатурные группы (1)] = 'Карточки сот. связи', 'Карточки сот. связи',
//	     if(Сырье] = 1, 'Сырье',
	     
	     if([Номенклатурные группы (1)] = 'Материалы', 'Материалы',
	     if([Номенклатурные группы (1)] = 'Услуги', 'Услуги',
	     if(Match([Номенклатурные группы (1)],'Сырье','Полуфабрикаты'),'Сырье и полуфабрикаты',
	     if(WildMatch([Номенклатурные группы (1)], 'Скидки', 'Ретро*'), 'Скидки',
	     if(WildMatch([Номенклатурные группы (1)], '*Паллеты*'), 'Паллеты', 
	     if( ( [Номенклатура.Тип] 		= 'Материалы' or len([Номенклатура.Код]) < 1) and not [Номенклатура.Код] like '*601419', 'Материалы',
	     if(len([Номенклатурные группы (1)] > 0), 'Товар','Не определен')))))))))				as [Номенклатура.Вид]
  
		,[Штук в коробке]																		as [Штук в коробке]
		,[Коробок в палете]																		as [Коробок в палете]
		,RecNo() 																				as [Номенклатура.НомерСтроки]
	Resident [Таблица2]; DROP Tables [Таблица2];
	
	CALL ЗаполнитьПараметры; DROP Field [Номенклатура.НомерСтроки];  NoConcatenate [Table.99]: SELECT * FROM [Номенклатура]; 
		
	Concatenate(Таблица0)
	LOAD 
//		 '3338'																					as [НомерБазы]
	     [Код] 																					as [Код номенклатуры]
	    ,'3338' & 'Temp' & RowNo()																as [Номенклатура.Ссылка]
	    ,[Номенклатура] 																		as [Номенклатура] 
	    ,[Номенклатура]																			as [Номенклатура.Наименование]
	    ,[Жирность] 																			as [Жирность]
	    ,[Вес]																					as [Номенклатура.Вес]
	    ,[Вес]																					as [Вес номенклатуры]
	    ,[Упаковка] 																			as [Упаковка]
	    ,[Бренд] 																				as [Бренды] 
	    ,[Ассортимент]																			as [Ассортимент]
	    ,[Группа]																				as [Номенклатурные группы (1)]
	    ,[Группа (2)]																			as [Номенклатурные группы (2)]
	    ,[Группа (3)]																			as [Номенклатурные группы (3)]
	    ,''																						as [Номенклатура.НаименованиеГруппы]
	    ,'Номенклатура'																			as [Номенклатура.Тип]
	    ,'Товар'																				as [Номенклатура.Вид]																
		,''																						as [Штук в коробке]
		,''																						as [Коробок в палете]
		
	Resident [Table.99] Where [Тип] = 'Temp'; DROP Table [Table.99];			
	Concatenate(Таблица0) LOAD '#' as [НомерБазы], '#' as [Номенклатура.Ссылка], 'Товар' as [Номенклатура.Вид] AutoGenerate 1; Left Join
	Concatenate(Таблица0) 
	LOAD  
		[НомерБазы]																				as [НомерБазы],
		[Статья затрат] 																		as [Номенклатура], 
		[Статья затрат] 																		as [Номенклатура.Наименование], 
	    'Ретро-бонусы'																			as [Номенклатурные группы (1)],
	    'Ретро-бонусы'																			as [Номенклатурные группы (2)],
	    'Ретро-бонусы'																			as [Номенклатурные группы (3)],
	    'Скидки'																				as [Номенклатура.Вид],
		СтатьиЗатрат.Ссылка																		as [Номенклатура.Ссылка]
	FROM [C:\QlikView\QVD\Справочники\СтатьиЗатрат.qvd] (qvd) Where WildMatch([Статья затрат], '*бонус*', 'Скидка*');
	
	
	(Таблица0)  SELECT [Код номенклатуры],	[Критично],	[Минимально], [Максимально] FROM [Период запаса] Where len([Код номенклатуры]) > 0; Left Join
//	(Таблица0)  SELECT [Код номенклатуры], [Order.M] FROM [Ассортимент] Where len([Код номенклатуры]) > 0 and len([Order.M]) > 0; 	  Left Join
//	(Таблица0)  SELECT [Код номенклатуры], [Order.A] FROM [Ассортимент] Where len([Код номенклатуры]) > 0 and len([Order.A]) > 0; 
//	[Таблица1]: LOAD *, if(IsNull([Order.M]), if(IsNull([Order.A]), 'N', 'A'), if(IsNull([Order.A]), 'M', 'AM')) as [AssortIndex] Resident [Таблица0];   DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0];
	(Таблица0)  SELECT [Код номенклатуры], [Order.M], 'M' as [M] FROM [Ассортимент] Where len([Код номенклатуры]) > 0 and len([Order.M]) > 0; 	  Left Join
	(Таблица0)  SELECT [Код номенклатуры], [Order.A], 'A' as [A] FROM [Ассортимент] Where len([Код номенклатуры]) > 0 and len([Order.A]) > 0;  	  Left Join
	(Таблица0)  SELECT [Код номенклатуры], [Order.C], 'C' as [C] FROM [Ассортимент] Where len([Код номенклатуры]) > 0 and len([Order.C]) > 0; 
	[Таблица1]: LOAD *, [A]&[M]&[C]  as [AssortIndex] Resident [Таблица0];   DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0]; Drop Fields [A], [M], [C]; Left Join
	(Таблица0)  SELECT [Код номенклатуры], [Себестоимость (дек 17)], Актобе, Тараз FROM [Себестоимость (дек 17)] Where len([Код номенклатуры]) > 0;
	
	[Таблица3]: LOAD Distinct [Затрата.Ссылка] as [Номенклатура.Ссылка], '1' as Сырье FROM [c:\qlikview\QVD\Себестоимость заводов\*.qvd] (qvd) Where [Затрата.Ссылка] like '*$*' and [ВидЗатрат] = 'Сырье';
	Left Join(Таблица0) LOAD * Resident [Таблица3]; DROP Table [Таблица3]; 
	
	

ENDSUB

SUB ЗаполнитьПараметры

	STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Table [Таблица0]; 
	[Таблица1]: LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd) Where [Номенклатура.Вид] = 'Не определен' and Len(Trim([Номенклатурные группы (1)])) = 0; 
	DROP Fields Жирность, Упаковка, [Вес номенклатуры], [Бренды], [Номенклатурные группы (1)], [Номенклатурные группы (2)], [Номенклатурные группы (4)] From [Таблица1];

	Бренды: LOAD 	'''*'&Concat(Distinct Бренд_1, '*'',''*', RecNo())&'*''' as Бренды_1, ''''&Concat(Distinct Бренд_2, ''',''', RecNo())&'''' as Бренды_2 FROM [C:\QlikView\Config\Settings.xls] (biff, embedded labels, table is [37$]);
		vБренды_1 = Peek('Бренды_1'); vБренды_2 = Peek('Бренды_2'); DROP Tables Бренды;
	Упаковка: LOAD 	'''*'&Concat(Distinct Упаковка_1, '*'',''*', RecNo())&'*''' as Упаковка_1, ''''&Concat(Distinct Упаковка_2, ''',''', RecNo())&'''' as Упаковка_2 FROM [C:\QlikView\Config\Settings.xls] (biff, embedded labels, table is [37$]);
		vУпаковка_1 = Peek('Упаковка_1'); vУпаковка_2 = Peek('Упаковка_2'); DROP Tables Упаковка;
	Группа: LOAD 	'''*'&Concat(Distinct Группа_1, '*'',''*', RecNo())&'*''' as Группа_1, ''''&Concat(Distinct Группа_2, ''',''', RecNo())&'''' as Группа_2 FROM [C:\QlikView\Config\Settings.xls] (biff, embedded labels, table is [37$]);
		vГруппа_1 = Peek('Группа_1'); vГруппа_2 = Peek('Группа_2'); DROP Tables Группа;
	Группа2: LOAD 	'''*'&Concat(Distinct Группа2_1, '*'',''*', RecNo())&'*''' as Группа2_1, ''''&Concat(Distinct Группа2_2, ''',''', RecNo())&'''' as Группа2_2 FROM [C:\QlikView\Config\Settings.xls] (biff, embedded labels, table is [37$]);
		vГруппа2_1 = Peek('Группа2_1'); vГруппа2_2 = Peek('Группа2_2'); DROP Tables Группа2;
	
	Temp_1: 
	LOAD *, '"'&SubField(Номенклатура, '"', 2)&'"' 																										as Бренд, 
		 Pick(WildMatch(Номенклатура, $(vБренды_1)), $(vБренды_2)) 																						as Бренд_2,
		 Pick(WildMatch(Номенклатура, $(vУпаковка_1)), $(vУпаковка_2)) 																					as Упаковка,
		 Pick(WildMatch(Номенклатура, $(vГруппа_1)), $(vГруппа_2)) 																						as Группа,
		 Pick(WildMatch(Номенклатура, $(vГруппа2_1)), $(vГруппа2_2)) 																					as Группа2,
		 KeepChar(Replace(Номенклатура, If(SubStringCount(Номенклатура, '%') > 0, Right(SubField(Номенклатура, '%', 1), 4), ''), ''), '1234567890,.') 	as Вес,
		 Replace(KeepChar(Right(SubField(Номенклатура, '%', 1), 4), '1234567890,.%'), '.', ',') 														as Жирность
	Resident [Таблица1]; DROP Table [Таблица1];
	
	Temp_2: LOAD *, 
		PurgeChar(Mid(Жирность, FindOneOf(Жирность, '1234567890')), '%') 	as жирность, 
		If(Бренд = '""', Бренд_2, Бренд) 									as бренд, 
		If(Группа = 'Акции', 'Акция', Группа) 								as Группа3, 
		Replace(Mid(Вес, FindOneOf(Вес, '1234567890')), '.', ',') 			as вес
	Resident Temp_1 Where Len(Trim(Номенклатура)) > 0; DROP Table Temp_1; CALL RenameField('жирность');  CALL RenameField('бренд');  CALL RenameField('вес'); 
	Temp_3: LOAD *, Num(If(SubStringCount(Вес, ',') <= 1 and IsNum(Right(Вес, 1)), Вес, If(SubStringCount(Вес, ',') = 1 or Index(Вес, ',', 1) + 1 = Index(Вес, ',', 2), SubField(Вес, ',', 1), Left(Вес, Index(Вес, ',', 2) - 1)))) as вес  Resident Temp_2; DROP Table Temp_2; CALL RenameField('вес'); 
	Temp_4: LOAD *, Вес / If(Вес > 1 and WildMatch(Номенклатура, '* гр.*', '* гр *', '*'& Вес & 'г *', '*'& Вес & 'г. *', '*'& Вес & 'гр.*', '*'& Вес & 'гр *'), 1000, 1) as вес  Resident Temp_3; DROP Table Temp_3; CALL RenameField('вес'); 
	Temp_5: LOAD *, If(Группа2 = 'Мороженое', If(Вес <= 0.4, 'Упаковка', If(Вес > 0.4, 'Вес')), Упаковка) as упаковка  Resident Temp_4; DROP Table Temp_4; CALL RenameField('упаковка'); 

	CALL FillEmptyValues('Temp_5', 'Номенклатурные группы (1)')
	RENAME Fields Бренд to Бренды, Группа to [Номенклатурные группы (1)], Группа2 to [Номенклатурные группы (2)], Группа3 to [Номенклатурные группы (4)], Вес to [Вес номенклатуры]; 

	Concatenate(Temp_5) LOAD * From [$(vQvPath)\QVD\Temp.qvd] (qvd) Where not Exists([Номенклатура.НомерСтроки]); RENAME Table Temp_5 to [Таблица0];
ENDSUB

SUB RenameField(vOldField, vNewField)
	vNewField = If(Match(0, Len(Trim(vNewField)), vNewField), Capitalize(Left(vOldField, 1)) & Mid(vOldField, 2), vNewField); 
	IF not IsNull(FieldValueCount('$(vNewField)')) > 0 THEN; DROP Field [$(vNewField)]; ENDIF; RENAME Field [$(vOldField)] to [$(vNewField)]; vNewField = Null();
ENDSUB
 
SUB FillEmptyValues(vTable, vFields, vValue)
	IF NoOfRows('$(vTable)') > 0 THEN;  
//		vTemp.14 = If(vTable like '# *',  SubField(vTable, ' ', 2), SubField(vTable, '.', 2)); 
//		IF FieldNumber('$(vTemp.14).Ссылка', '$(vTable)') > 0 THEN; 
//			Concatenate([$(vTable)]) LOAD '00000000000000000000000000000000' as [$(vTemp.14).Ссылка] AutoGenerate 1;
//			Concatenate([$(vTable)]) LOAD '' as [$(vTemp.14).Ссылка] AutoGenerate 1;
//		ENDIF
		vFields 	= If(Len(vFields) = 0, 0, vFields);
		vValue 		= If(Len(vValue) = 0, '', vValue); 
		vString.14 	= ''; 
		FOR vCounter.14 = 1 TO NoOfFields('$(vTable)')  
		    vCurField.14 = FieldName($(vCounter.14), '$(vTable)');
		    vString.14 = vString.14 &', '&chr(13)& If(WildMatch(vCurField.14, '$(vFields)') or vFields = 0, 'If(Len(Trim([$(vCurField.14)])) = 0, ''$(vValue)'', [$(vCurField.14)]) as [$(vCurField.14)]', '[$(vCurField.14)]');
		NEXT 
	    vString.14 = Right(vString.14, Len(vString.14) - 2);  
	    [$(vTable)_2]: NoConcatenate LOAD $(vString.14) Resident [$(vTable)]; DROP Table [$(vTable)]; RENAME Table [$(vTable)_2] to [$(vTable)];
	    vString.14 = Null(); vCounter.14 = Null(); vTemp.14 = Null();
    ENDIF
ENDSUB

///$tab 7


$(vConsole.LoadStart(7)); 										// ТипыСписания
	$(vConsole.MTLoadStart); 
	LET vScript = vScript & '
		[Таблица0]:
		SELECT 	$(НомерБазы)          															as [НомерБазы]
			   ,$(Перечисление.ТипыСписания.Порядок)											as [ТипыСписания.Порядок]
			   ,$(НомерБазы)+$(|)+$(Перечисление.ТипыСписания.Ссылка)+$(|)						as [ТипыСписания.Ссылка]

		FROM 	$(Перечисление.ТипыСписания)											        as ТипыСписания				(nolock);
	';
	$(vConsole.MTLoadRun);
$(vConsole.LoadEnd); 
	
SUB Conf.7; $(vConsole.MTLoadEnd); ENDSUB 
///$tab 8


$(vConsole.LoadStart(8)); 										// СтатьиЗатрат

	[Таблица0]:
		SELECT  $(НомерБазы)          															as [НомерБазы]
			   ,$(Справочник.СтатьиЗатрат.Наименование)											as [Статья затрат]
			   ,$(НомерБазы)+$(|)+$(Справочник.СтатьиЗатрат.Ссылка)+$(|)						as [СтатьиЗатрат.Ссылка]
			
		FROM    $(Справочник.СтатьиЗатрат)												        as СтатьиЗатрат				(nolock);

$(vConsole.LoadEnd); 

SUB Conf.8; ENDSUB 

///$tab 9


$(vConsole.LoadStart(9)); 										// ТорговыеТочки
	
	[Таблица0]:
		SELECT  $(НомерБазы)          															as [НомерБазы]
			   ,$(Справочник.ТорговыеТочки.Наименование)										as [ТорговыеТочки.Наименование]
			   ,$(НомерБазы)+$(|)+$(Справочник.ТорговыеТочки.Ссылка)+$(|)						as [ТорговыеТочки.Ссылка]
			
		FROM    $(Справочник.ТорговыеТочки)												        as ТорговыеТочки				(nolock);

$(vConsole.LoadEnd); 

SUB Conf.9; ENDSUB 
///$tab 20


$(vConsole.LoadStart(20)); 										// Остатки  Остатки(Обновление)
/*7.7*/
		IF '$(Версия 1С)' like '7.7*' then			//>>>>>>>>>>>>>>>>>>>>>>>>>		7.7		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
			LET ПериодSQL 										= 'cast(left($(РегистрБухгалтерии.Типовой.Период),8) as datetime)';
			LET ПериодQlik 										= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET $ 												= 'case when $(ПланСчетов.Типовой.Код) < ''1320'' then cast(''$'' as $(VarType)) else cast('''' as $(VarType)) end';
	
			FOR Each ВидДвижения in '+1', '-1'
			
				LET РегистрБухгалтерии.Типовой.Счет 			= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетДт)', '$(РегистрБухгалтерии.Типовой.СчетКт)');
				LET РегистрБухгалтерии.Типовой.Субконто1 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто1)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто1)');
				LET РегистрБухгалтерии.Типовой.Субконто2 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто2)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто2)');		
	
				[Таблица0]:
				select
				
				   $(НомерБазы)          															as [НомерБазы]
		 		  ,$(ПериодQlik)																	as [ДатаДвижения]	
		 		  	   
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+left($(РегистрБухгалтерии.Типовой.Субконто2), 9)+$(|)			as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$($)+left($(РегистрБухгалтерии.Типовой.Субконто1), 9)+$(|)		as [Номенклатура.Ссылка]
				  
			  	  ,$(РегистрБухгалтерии.Типовой.Количество) 										as [Количество]
			  	  ,$(РегистрБухгалтерии.Типовой.Сумма) 												as [Сумма]
			  	  ,$(ВидДвижения)																	as [ВидДвижения]
		
				from 
					$(РегистрБухгалтерии.Типовой) 										            as Типовой				(nolock)
					inner join $(ПланСчетов.Типовой) 									            as ПланСчетов			(nolock) on $(ПланСчетов.Типовой.Ссылка)  = $(РегистрБухгалтерии.Типовой.Счет)	  	
				Where  
				  	   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
//				  and  $(ПланСчетов.Типовой.Код) = '1320'
				  and  $(ПланСчетов.Типовой.Код) >= '1310' and $(ПланСчетов.Типовой.Код) <= '1330' 
//				  and  $(ПланСчетов.Типовой.Код) in ('1310', '1320') 
				  and  $(РегистрБухгалтерии.Типовой.Активность) = ''		  
			  	;
			  	
			NEXT ВидДвижения
	
			IF not Обновление then
			
				FOR Each МесяцКвартала in 1, 2, 3
		
					LET 'Оборот за 1 месяц'								= '$(РегистрБухгалтерии.Типовой.Итоги.ДебитовыйОборотЗаМесяц1) - $(РегистрБухгалтерии.Типовой.Итоги.КредитовыйОборотЗаМесяц1)';
					LET 'Оборот за 2 месяц'								= '$(РегистрБухгалтерии.Типовой.Итоги.ДебитовыйОборотЗаМесяц2) - $(РегистрБухгалтерии.Типовой.Итоги.КредитовыйОборотЗаМесяц2)';
					LET Сальдо 											= if($(МесяцКвартала) = 1, '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо)', if($(МесяцКвартала) = 2, '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо) + $(Оборот за 1 месяц)', '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо) + $(Оборот за 1 месяц) + $(Оборот за 2 месяц)'));
					LET РегистрБухгалтерии.Типовой.Итоги.Сумма 			= 'case when $(РегистрБухгалтерии.Типовой.Итоги.ТипИтогов) = 1 then $(Сальдо) end';
					LET РегистрБухгалтерии.Типовой.Итоги.Количество 	= 'case when $(РегистрБухгалтерии.Типовой.Итоги.ТипИтогов) = 3 then $(Сальдо) end';
					LET Организации.Ссылка								= if(WildMatch('$(База)',  '*Молпродукт*', '*Синегорье*'), 'cast(''     1   '' as varchar)', '$(РегистрБухгалтерии.Типовой.Итоги.Организация)');
		
					LET ПериодQlik 										= 'replace(convert(varchar, dateadd(month, $(МесяцКвартала) - 1, $(РегистрБухгалтерии.Типовой.Итоги.Период)), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
					LET ПериодSQL 										= 'dateadd(month, $(МесяцКвартала) - 1, $(РегистрБухгалтерии.Типовой.Итоги.Период))';
		
					Concatenate (Таблица0)
					select
		
					   $(НомерБазы)          																as [НомерБазы]
				 	  ,$(ПериодQlik)																		as [ДатаДвижения]	
				 	  	 
					  ,$(НомерБазы)+$(|)+$(Организации.Ссылка)+$(|)											as [Организации.Ссылка]		   
					  ,$(НомерБазы)+$(|)+left($(РегистрБухгалтерии.Типовой.Итоги.Субконто2), 9)+$(|)		as [Склады.Ссылка]
					  ,$(НомерБазы)+$(|)+$($)+left($(РегистрБухгалтерии.Типовой.Итоги.Субконто1), 9)+$(|)	as [Номенклатура.Ссылка]
					  
					  ,$(РегистрБухгалтерии.Типовой.Итоги.Количество) 										as [Количество]
				  	  ,$(РегистрБухгалтерии.Типовой.Итоги.Сумма) 											as [Сумма]
				  	  ,0 																					as [ВидДвижения]
				  	  
					from 
					  $(РегистрБухгалтерии.Типовой.Итоги)  									            	as ТиповойИтоги		(nolock)
					  inner join $(ПланСчетов.Типовой) 				 						            	as ПланСчетов		(nolock)	on $(ПланСчетов.Типовой.Ссылка)   		= $(РегистрБухгалтерии.Типовой.Итоги.Счет)
					where 
					  	  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
//					  and $(ПланСчетов.Типовой.Код) = '1320'
					  and  $(ПланСчетов.Типовой.Код) >= '1310' and $(ПланСчетов.Типовой.Код) <= '1330' 
//				  	  and  $(ПланСчетов.Типовой.Код) in ('1310', '1320') 
					;
		
				NEXT МесяцКвартала

			ENDIF
/*8.3 УТ*/			
		ELSEIF '$(Версия 1С)' like '8.3 УТ' then 	//>>>>>>>>>>>>>>>>>>>>>>>>>		Торговля		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
			LET ПериодSQL 										= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрНакопления.ТоварыНаСкладах.Период))', '$(РегистрНакопления.ТоварыНаСкладах.Период)');
			LET ПериодQlik 										= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
			LET Организации.Ссылка								= if('$(База)' like '*Милланд*', '0x88564487FC5E992B11E00344D9D98B28',  '0x88564487FC5E992B11E00344D9D98B28');
			LET ВидДвижения 									= 'case when $(РегистрНакопления.ТоварыНаСкладах.ВидДвижения) = 0 then +1 else -1 end';
	
			[Таблица0]:
			select
			
			   $(НомерБазы)          															as [НомерБазы]
			  ,$(ПериодQlik)																	as [ДатаДвижения]	
		 	  	   
			  ,$(НомерБазы)+$(|)+$(Организации.Ссылка)+$(|)										as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+$(РегистрНакопления.ТоварыНаСкладах.Склад)+$(|)				as [Склады.Ссылка]
			  ,$(НомерБазы)+$(|)+$(РегистрНакопления.ТоварыНаСкладах.Номенклатура)+$(|)			as [Номенклатура.Ссылка]
			  
			  ,$(РегистрНакопления.ТоварыНаСкладах.Количество) 									as [Количество]
			  ,0 																				as [Сумма]
			  ,$(ВидДвижения)																	as [ВидДвижения]
			  
			from 
			  	$(РегистрНакопления.ТоварыНаСкладах) 								            as ТоварыНаСкладах			(nolock)

			Where  
				   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
			  and  $(РегистрНакопления.ТоварыНаСкладах.Активность) = 1		  
			;
	
			IF not Обновление then
			
				IF '$(Версия 1С)' like '*8.1*' then; [ТаблицаИ]: SELECT * From $(РегистрыНакопления.Настройки);
				 	LET ДатаРассчитанныхИтогов = Date(lookup('_Period', '_RegID', '$(РегистрНакопления.ТоварыНаСкладах.Ссылка)', 'ТаблицаИ'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ];
				ELSE; 	[ТаблицаИ]: SELECT * From $(РегистрНакопления.ТоварыНаСкладах.Настройки);
				 	LET ДатаРассчитанныхИтогов = Date(Peek('_Period', 0, 'ТаблицаИ'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ]; ENDIF
		
				LET ПериодSQL 	= 'dateadd(year, $(Смещение дат), $(РегистрНакопления.ТоварыНаСкладах.Итоги.Период))';
				LET ПериодQlik 	= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
		
				Concatenate(Таблица0)
				select
				   
				   $(НомерБазы)          																as [НомерБазы]
				  ,$(ПериодQlik)																		as [ДатаДвижения]
				  
				  ,$(НомерБазы)+$(|)+$(Организации.Ссылка)+$(|)											as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрНакопления.ТоварыНаСкладах.Итоги.Склад)+$(|)				as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрНакопления.ТоварыНаСкладах.Итоги.Номенклатура)+$(|)		as [Номенклатура.Ссылка]
				  
				  ,$(РегистрНакопления.ТоварыНаСкладах.Итоги.Количество) 								as [Количество]
				  ,0 																					as [Сумма]
				  ,0																					as [ВидДвижения]
		
				from 
				  	$(РегистрНакопления.ТоварыНаСкладах.Итоги) 								            as ТоварыНаСкладахИтоги 	(nolock) 
		
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				   and $(ПериодSQL) <= '$(ДатаРассчитанныхИтогов)'   
				;

			CALL РасчетИтоговОстатков	

			ENDIF
/*8.3 Бух*/			
		ELSE										//>>>>>>>>>>>>>>>>>>>>>>>>>		Бухгалтерия		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>								
		
			LET ПериодSQL 										= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.Период))', '$(РегистрБухгалтерии.Типовой.Период)');
			LET ПериодQlik 										= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
			FOR Each ВидДвижения in '+1', '-1'

				LET ДвижениеСубконто							= if($(ВидДвижения) = '+1', 0, 1);
				LET РегистрБухгалтерии.Типовой.Счет 			= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетДт)', '$(РегистрБухгалтерии.Типовой.СчетКт)');
				LET РегистрБухгалтерии.Типовой.Количество 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.КоличествоДт)', '$(РегистрБухгалтерии.Типовой.КоличествоКт)');		
	
				[Таблица0]:
				select
				   
				   $(НомерБазы)          															as [НомерБазы]
				  ,$(ПериодQlik) 																	as [ДатаДвижения]
		 		  
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [Номенклатура.Ссылка]
				  
				  ,$(РегистрБухгалтерии.Типовой.Количество) 										as [Количество]
				  ,$(РегистрБухгалтерии.Типовой.Сумма) 												as [Сумма]
				  ,$(ВидДвижения)																	as [ВидДвижения]
	
				from 
					$(РегистрБухгалтерии.Типовой) 										            as Типовой       	(nolock)
					  inner join $(Справочник.Организации) 								            as Организации	 	(nolock) on $(Справочник.Организации.Ссылка) = $(РегистрБухгалтерии.Типовой.Организация)
					  inner join $(ПланСчетов.Типовой) 									            as ПланСчетов		(nolock) on $(ПланСчетов.Типовой.Ссылка) 	= $(РегистрБухгалтерии.Типовой.Счет)
		
					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто) 		            as #1Субконто		(nolock) 
	//				  		#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 		= $(РегистрБухгалтерии.Типовой.ТипРегистратора)and			  	
					  	on	#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 			= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 			= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= $(ДвижениеСубконто)
					  inner join $(Справочник.Склады) 									            as Склады	 		(nolock) on $(Справочник.Склады.Ссылка) 		= #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)
		
					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто) 		            as #2Субконто		(nolock)
	//				  		#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 		= $(РегистрБухгалтерии.Типовой.ТипРегистратора)	and		  	
					  	on 	#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 			= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 			= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= $(ДвижениеСубконто)
					  inner join $(Справочник.Номенклатура) 							            as Номенклатура 	(nolock) on $(Справочник.Номенклатура.Ссылка) = #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)
	
				Where 
					  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
				  and $(ПланСчетов.Типовой.Код) >= '1320' and $(ПланСчетов.Типовой.Код) < '1340' 
				  and $(РегистрБухгалтерии.Типовой.Активность) = 1
				  and ($(Справочник.Организации.РННОрганизации) not in ('600700506607', '600700568420') or ($(Справочник.Организации.РННОрганизации) in ('600700506607', '600700568420') and $(Справочник.Склады.Наименование) <> 'Основной склад'))
				  and len($(Справочник.Номенклатура.Код)) > 0
				;
			NEXT ВидДвижения
	
			IF not Обновление then
			
				[ТаблицаИ]: SELECT * From $(РегистрыБухгалтерии.Настройки);
		
				LET ДатаРассчитанныхИтогов 			= Date( AddYears(lookup('_Period', '_RegID', '$(РегистрБухгалтерии.Типовой.Ссылка)', 'ТаблицаИ'), '$(Смещение дат)'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ];
				LET ПериодSQL 						= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Период))', '$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Период)');
				LET ПериодQlik 						= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
		
				Concatenate(Таблица0)
				select
				   
				   $(НомерБазы)          																	as [НомерБазы]
				  ,$(ПериодQlik) 																			as [ДатаДвижения]
			 	  
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Организация)+$(|) as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Субконто2)+$(|)	as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Субконто1)+$(|)	as [Номенклатура.Ссылка]
				  
				  ,$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Количество) 						as [Количество]
				  ,$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Сумма) 								as [Сумма]
				  ,0																						as [ВидДвижения]
		
				from 
				  $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2) 						            as ТиповойИтогиПоСчетамССубконто2  	(nolock)
				  inner join $(Справочник.Организации) 											            as Организации 						(nolock) on $(Справочник.Организации.Ссылка) 	= $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Организация)	
				  inner join $(ПланСчетов.Типовой) 												            as ПланСчетов						(nolock) on $(ПланСчетов.Типовой.Ссылка)   		= $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Счет)
				  inner join $(Справочник.Склады) 												            as Склады							(nolock) on $(Справочник.Склады.Ссылка)   		= $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Субконто2)
				  inner join $(Справочник.Номенклатура) 										            as Номенклатура						(nolock) on $(Справочник.Номенклатура.Ссылка)   	= $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Субконто1)
				Where 
					  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'  and $(ПериодSQL) <= '$(ДатаРассчитанныхИтогов)'
				  and $(ПланСчетов.Типовой.Код) >= '1320' and $(ПланСчетов.Типовой.Код) < '1340' 
				  and ($(Справочник.Организации.РННОрганизации) not in ('600700506607', '600700568420') or ($(Справочник.Организации.РННОрганизации) in ('600700506607', '600700568420') and $(Справочник.Склады.Наименование) <> 'Основной склад'))
				  and len($(Справочник.Номенклатура.Код)) > 0
				;
				
				LET ПериодSQL 	= Null; LET ПериодQlik 	= Null;

				CALL РасчетИтоговОстатков				

			ENDIF
			
		ENDIF	
		
$(vConsole.LoadEnd); 

SUB Conf.20; ENDSUB

SUB Conf.21; 										// Добавление итогов в обновление	

	IF Обновление then	
		
		LET СтрокаСохранения = '$(vQvPath)\QVD\ОбновлениеОстатков.qvd (qvd)';
		IF ErrorConnection then
			[Таблица1]: LOAD if([Версия 1С] like '*7.7*', [Номер базы], '3' & mid([Номер базы], 1, 1) & '3' & mid([Номер базы], 2, 1)) as [НомерБазы] Resident [Базы SQL]
						Where not Exists([НомерБазы], if([Версия 1С] like '*7.7*', [Номер базы], '3' & mid([Номер базы], 1, 1) & '3' & mid([Номер базы], 2, 1))); 
						STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
			[Таблица2]: LOAD * FROM [$(vQvPath)\QVD\Остатки\База*.qvd] (qvd) Where Exists(НомерБазы); DROP Table [Таблица1]; NoConcatenate
			[Таблица0]: LOAD * Resident [Таблица2] Where [ДатаДвижения] >= Date($(vDocuments.RenewDate)) and [ВидДвижения] <> 0; DROP Table [Таблица2];
			[Таблица0]: LOAD * FROM $(СтрокаСохранения); STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
		ELSE; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0]; ENDIF 
	
		[Таблица1]: LOAD [Дата] as [ДатаДвижения] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where [Дата] >= MonthStart($(vDocuments.RenewDate)) and [Дата] < Date($(vDocuments.RenewDate));
		[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Остатки\База*.qvd] (qvd) Where Exists(ДатаДвижения); DROP Table [Таблица1];
		[Таблица0]: LOAD * FROM $(СтрокаСохранения);
		
		LET ДатаРассчитанныхИтогов = MonthStart($(vDocuments.RenewDate)); CALL РасчетИтоговОстатков
					
		STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
//		CALL ДобавлениеОстатковНаСкладВПути
	
	ENDIF
	
ENDSUB

SUB РасчетИтоговОстатков; $(vConsol.Trace(Итоги рассчитаны по $(ДатаРассчитанныхИтогов)));

	IF '$(ДатаРассчитанныхИтогов)' < AddMonths('$(Окончание базы)', -1) or Обновление Then

		DO
//			[ТаблицаК]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where [Дата] >= '$(ДатаРассчитанныхИтогов)' and [Дата] < AddMonths('$(ДатаРассчитанныхИтогов)', 1); NoConcatenate
//			[Таблица1]: LOAD * Resident [Таблица0] Where Exists(Дата, ДатаДвижения); DROP Table [ТаблицаК];
			Concatenate (Таблица0)
			LOAD
				 [НомерБазы]         														as [НомерБазы]
				,Date(AddMonths('$(ДатаРассчитанныхИтогов)', 1)) 							as [ДатаДвижения]
				
				,[Организации.Ссылка]														as [Организации.Ссылка]
				,[Склады.Ссылка]															as [Склады.Ссылка]
				,[Номенклатура.Ссылка]														as [Номенклатура.Ссылка]
				
				,Sum(if([ВидДвижения] = 0, 1, [ВидДвижения])* [Количество]) 				as [Количество]
				,Sum(if([ВидДвижения] = 0, 1, [ВидДвижения])* [Сумма]) 						as [Сумма]
				,0 																			as [ВидДвижения]
			Resident [Таблица0]
			Where [ДатаДвижения] >= '$(ДатаРассчитанныхИтогов)' and [ДатаДвижения] < AddMonths('$(ДатаРассчитанныхИтогов)', 1)
			Group By [НомерБазы], [Организации.Ссылка], [Склады.Ссылка], [Номенклатура.Ссылка]; // DROP Table [Таблица1];
		
			LET ДатаРассчитанныхИтогов = AddMonths('$(ДатаРассчитанныхИтогов)', 1); $(vConsol.Trace(Итоги рассчитаны по $(ДатаРассчитанныхИтогов)));
			
		LOOP while '$(ДатаРассчитанныхИтогов)' <= Today() and '$(ДатаРассчитанныхИтогов)' < AddMonths('$(Окончание базы)', -1);
	ENDIF
	
ENDSUB

SUB Load.21; LET Обновление = True(); CALL Load.20; ENDSUB


SUB ДобавлениеОстатковНаСкладВПути

	LET vLoadName = 'ДобавлениеОстатковНаСкладВПути'; LET vStoreList = ''; LET vScript = '';
	LET НомерЗагрузки  = '22';  CALL Базы; 
	FOR СчетчикБаз = 0 TO NoOfRows('Базы SQL') - 1; CALL Подключение; IF Connection then; $(Trace($(vLoadName) - $(База)));
//	exit script;	
		FOR Each Документ in 'Счетфактура'
			LET Вес 						= 'isnull(#1$(Константы.Значение), #2$(Константы.Значение))';
			LET ПериодSQL 					= 'cast(left(#2$(Журналы.Период), 8) as datetime)';
			LET ПериодQlik 					= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET Номенклатура				= 'substring($(Документ.$(Документ).Товары.Номенклатура), 7, 9)';
			LET Документ  					= 'СчетФактура';
			
			 	[Таблица0]:
				SELECT
				 	
				   '3338'          																	as [НомерБазы]
				  ,$(ПериодQlik)																	as [ДатаДвижения]	
	
				  ,'3338A4FA00E081B7A7A211DF415415EABD40'	  										as [Склады.Ссылка]
				  ,$(Справочник.Контрагенты.РНН)													as [РНН организации]	 //[Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Номенклатура)+$(|)	  										as [Номенклатура.Ссылка]
				  
				  ,$(Документ.Счетфактура.Товары.Количество)										as [Количество]
				  ,$(Документ.Счетфактура.Товары.Сумма)*$(Документ.Счетфактура.Курс)	   			as [Сумма]		 
		  		  ,'+1'																				as [ВидДвижения]
		  	  				  
			  	From
			  	  $(Журналы) 															            as Журналы 					(nolock)
			  	  inner join $(Документ.Счетфактура) 									            as Счетфактура				(nolock)	on $(Документ.Счетфактура.Ссылка) 			 = $(Журналы.Регистратор)
				  inner join $(Справочник.Контрагенты)												as Контрагенты				(nolock)	on $(Документ.Счетфактура.Грузополучатель)	 = $(Справочник.Контрагенты.Ссылка)
			  	  inner join $(Документ.Счетфактура.Товары) 							            as СчетфактураТовары		(nolock)	on $(Документ.Счетфактура.Товары.Ссылка) 	 = $(Документ.Счетфактура.Ссылка)
				  inner join $(Документ.РеализацияТоваровУслуг)										as РеализацияТоваровУслуг	(nolock)	on $(Документ.РеализацияТоваровУслуг.Ссылка) = substring($(Документ.Счетфактура.ДокументОснование), 5, 9)	
				  inner join $(Журналы) 															as #2Журналы 				(nolock)	on $(Документ.РеализацияТоваровУслуг.Ссылка) = #2$(Журналы.Регистратор)
				  
					     and $(ПериодSQL) >= '20180101'   
					     and $(Журналы.ТипРегистратора) = $(Документ.Счетфактура.Тип) 
					     and $(Журналы.ПометкаУдаления) = 0				  	  
						 and $(Справочник.Контрагенты.РНН) in (
							'032600222029',
							'061800263125',
							'092200214090',
							'211500221726',
							'302000245751',
							'391700242941',
							'480100220813',
							'582100236860',
							'620300235292' )
			  	  

//				  inner join $(Справочник.Номенклатура) 								            as Номенклатура  		(nolock)	on $(Справочник.Номенклатура.Ссылка) 		= $(Номенклатура) 
//	
//	
//					     left join $(Константы)  										            as  #1Константы  		(nolock)	on #1$(Константы.Регистратор) 				= $(Справочник.Номенклатура.Ссылка)
//																																	   and #1$(Константы.Ссылка)  					= $(Справочник.Номенклатура.Тип)
//																																	   and #1$(Константы.Период) 				 	= (select top 1 cast($(Константы.Период) as DateTime)  
//																																							  						 	from  $(Константы)  as Константы 
//																																								  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
//																																								  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
//																																								  						  and cast($(Константы.Период) as DateTime) <= $(ПериодSQL) 
//																																								  						  order by cast($(Константы.Период) as DateTime) desc )
//			
//					     left join $(Константы)  										            as  #2Константы  		(nolock)	on #2$(Константы.Регистратор) 				= $(Справочник.Номенклатура.Ссылка)
//																																	   and #2$(Константы.Ссылка)  					= $(Справочник.Номенклатура.Тип)
//																																	   and #2$(Константы.Период)  					= (select top 1 cast($(Константы.Период) as DateTime)  
			;
			Left Join
			LOAD
			     [РНН организации], 
			     [Организации.Ссылка]
			FROM [C:\QlikView\QVD\Справочники\Организации.qvd] (qvd)
			Where [НомерБазы] = '3338';
			DROP Field [РНН организации];
		NEXT
		ENDIF
	NEXT

 	[Таблица0]:
	LOAD
	 	
	   [НомерБазы]          															as [НомерБазы]
	  ,[Дата]																			as [ДатаДвижения]	
	  ,[Склады.Ссылка]	  																as [Склады.Ссылка]
	  ,[Организации.Ссылка]																as [Организации.Ссылка]
	  ,[Номенклатура.Ссылка]	  														as [Номенклатура.Ссылка]
	  
	  ,[Количество]																		as [Количество]
	  ,[Сумма]	   																		as [Сумма]		 
 	  ,'-1'																				as [ВидДвижения]
 	   
 	From [C:\QlikView\QVD\Поступление\База 38 #16.qvd] (qvd)
 	Where Exists([Организации.Ссылка]) and [Дата] >= '01.01.2018' and Match([Контрагенты.Ссылка], '333897F490609BEFCA9D4B0F5823729E50DD', '333985704487FC5E992B11E03F33441A8EFA');
  	  				  																												//		3339AEA8F661DCDA6F3411E8184FFF51C32B
	ДатаРассчитанныхИтогов = '01.01.2018'; 'Окончание базы' = YearEnd(Today()); CALL РасчетИтоговОстатков;	
	СтрокаСохранения = '$(vQvPath)\QVD\ТоварыВПути.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
	
ENDSUB


///$tab 30


$(vConsole.LoadStart(30)); 										// Реализация
	$(vConsole.MTLoadStart); 
		IF '$(Версия 1С)' like '7.7*' 				then; CALL РеализацияЗаводов; ELSE; 
		IF vConsole.RealizationType =  'Documents' 	then; CALL РеализацияПоДокументам; ELSE; CALL РеализацияПоРегистру; ENDIF; ENDIF; 		
	$(vConsole.MTLoadRun); 
$(vConsole.LoadEnd);
	
SUB Conf.30; ENDSUB;

SUB РеализацияЗаводов 
			LET Вес 						= 'isnull(#1$(Константы.Значение), #2$(Константы.Значение))';
			LET ПериодSQL 					= 'cast(left($(Журналы.Период), 8) as datetime)';
			LET ПериодQlik 					= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
			FOR Each Документ in 'РеализацияТоваровУслуг', 'ВозвратТоваровОтПокупателя' //, 'ВозвратОтПокупателя'
//				IF '$(База)' = 'Завод "КМЗ ДЛПП №1"' and Документ = 'ВозвратОтПокупателя' or ('$(База)' <> 'Завод "КМЗ ДЛПП №1"' and Документ <> 'ВозвратОтПокупателя') then; //Документ = 'ВозвратОтПокупателя'; ENDIF
//				IF '$(База)' = 'Завод "Молпродукт"' and Документ = 'ВозвратОтПокупателя' then; ELSE //Документ = 'ВозвратОтПокупателя'; ENDIF
			
				LET  ДокументСокращенно 	= chr(39)& if('$(Документ)' like '*Реализация*', 'Реализация', if('$(Документ)' like '*Возврат*', 'Возврат')) &chr(39);
//				LET  ДокументСокращенно 	= chr(39)& if('$(Документ)' like '*Реализация*', 'Реализация', if('$(База)' = 'Завод "КМЗ ДЛПП №1"' and Документ = 'ВозвратОтПокупателя' or ('$(База)' <> 'Завод "КМЗ ДЛПП №1"' and Документ <> 'ВозвратОтПокупателя'), 'Возврат', '$(Документ)')) &chr(39);
				LET  Знак 					= chr(39)& if('$(Документ)' like '*Реализация*', +1, if('$(Документ)' like '*Возврат*', -1)) &chr(39); 
			 	LET  Курс 					= '$(Документ.$(Документ).Курс)';
				LET  Номенклатура			= if('$(Документ)' like '*ВозвратТоваров*', 'substring($(Документ.$(Документ).Товары.Номенклатура), 5, 9)', '$(Документ.$(Документ).Товары.Номенклатура)');
				LET  F1						= if('$(Документ)' like '*Реализация*' and Match('$(База)','Завод "Солнечный"'), 'case when $(Документ.$(Документ).Скидка) = 1 then 0 else 1 end', 1);                                                                               // В А-Трейде не списывали количество если скидка.
	LET vScript = vScript & '
			 	[Таблица0]:
				SELECT
				 	
				   $(НомерБазы)          															as [НомерБазы]
				  ,$(ПериодQlik)																	as [Дата]
				  ,$(ДокументСокращенно) 															as [Документ]
				  ,$(Журналы.НомерДокумента)  														as [НомерДокумента]
	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)  						as [Контрагенты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Номенклатура)+$(|)	  										as [Номенклатура.Ссылка]
				  ,Null																				as [ФизическиеЛица.Ссылка]
				  ,Null																				as [ТипыСписания.Ссылка]
				  ,Null																				as [ТорговыеТочки.Ссылка]
				  
				  ,$(Знак)*$(Документ.$(Документ).Товары.Количество)*$(F1)							as [Количество]
				  ,$(Знак)*$(Документ.$(Документ).Товары.Сумма)*$(Курс)	   							as [Сумма]		 
				  ,$(Знак)*$(Документ.$(Документ).Товары.СуммаНДС)*$(Курс)   						as [СуммаНДС]
				  ,$(Курс)  																		as [Курс]
				  ,$(Знак)*cast($(Документ.$(Документ).Товары.Количество) as float)*$(Вес)*$(F1)  	as [Вес]
				  ,Null																				as [Себестоимость]
				  
				  
			  	From
			  	  $(Журналы) 															            as Журналы 				(nolock)
			  	  inner join $(Документ.$(Документ)) 									            as $(Документ)			(nolock)	on $(Документ.$(Документ).Ссылка) 			= $(Журналы.Регистратор)

					     and $(ПериодSQL) >= ''$(Начало базы)'' and $(ПериодSQL) <  ''$(Окончание базы)''  
					     and $(Журналы.ТипРегистратора) = $(Документ.$(Документ).Тип) 
					     and $(Журналы.ПометкаУдаления) = 0
					     and $(Журналы.Проведен) <> 4				  	  
			  	  
			  	  inner join $(Документ.$(Документ).Товары) 							            as $(Документ)Товары	(nolock)	on $(Документ.$(Документ).Товары.Ссылка) 	= $(Документ.$(Документ).Ссылка)
				  inner join $(Справочник.Номенклатура) 								            as Номенклатура  		(nolock)	on $(Справочник.Номенклатура.Ссылка) 		= $(Номенклатура) 
	
	
					     left join $(Константы)  										            as  #1Константы  		(nolock)	on #1$(Константы.Регистратор) 				= $(Справочник.Номенклатура.Ссылка)
																																	   and #1$(Константы.Ссылка)  					= $(Справочник.Номенклатура.Тип)
																																	   and #1$(Константы.Период) 				 	= (select top 1 cast($(Константы.Период) as DateTime)  
																																							  						 	from  $(Константы)  as Константы 
																																								  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																								  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																								  						  and cast($(Константы.Период) as DateTime) <= $(ПериодSQL) 
																																								  						  order by cast($(Константы.Период) as DateTime) desc )
			
					     left join $(Константы)  										            as  #2Константы  		(nolock)	on #2$(Константы.Регистратор) 				= $(Справочник.Номенклатура.Ссылка)
																																	   and #2$(Константы.Ссылка)  					= $(Справочник.Номенклатура.Тип)
																																	   and #2$(Константы.Период)  					= (select top 1 cast($(Константы.Период) as DateTime)  
																																						  						 		from  $(Константы)  as Константы
																																								  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																								  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																				  						  				  order by cast($(Константы.Период) as DateTime) asc )
				;
	'; //ENDIF
			NEXT Документ
ENDSUB
			
			
			
SUB РеализацияПоДокументам 

		FOR Each Документ in 'РеализацияТоваровУслуг', 'ВозвратТоваровОтПокупателя'; FOR Each ТабЧасть in 'Товары', 'Услуги'; IF Документ = 'ВозвратТоваровОтПокупателя' and ТабЧасть = 'Услуги' then; ; ELSE
			
			LET ПериодSQL 				= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
			LET ПериодQlik 				= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';

			LET ДокументСокращенно 		= chr(39)& if(Документ like '*Реализация*', 'Реализация', if(Документ like '*Возврат*', 'Возврат')) &chr(39);
			LET Знак 					= chr(39)& if(Документ like '*Реализация*', +1, if(Документ like '*Возврат*', -1)) &chr(39); 
		 	LET Сумма 					= 'case when $(Документ.$(Документ).СуммаВключаетНДС) = 1 then $(Знак) * $(Документ.$(Документ).$(ТабЧасть).Сумма) else $(Знак) * ($(Документ.$(Документ).$(ТабЧасть).Сумма) + $(Документ.$(Документ).$(ТабЧасть).СуммаНДС)) end';			// 
			LET ОтражатьВУчете			= if(not WildMatch('$(Версия 1С)', '*Бух', '*УТ')  or ('$(Версия 1С)' like '*УТ' and '$(Начало базы)' >= '01.01.2015'), 'and $(Документ.$(Документ).ОтражатьВБухгалтерскомУчете) = 1', '');													// В торговых базах этот документ не переносится в бухгалтерию.
			LET F1						= if(База like 'ТОО "Компания A-TRADE" - Бухгалтерия*' and Документ like 'Реализация*', 'case when $(Документ.$(Документ).Скидка) = 1 then 0 else 1 end', if(База like '*Милланд*' and Документ like 'Реализация*', 'case when $(Перечисление.ВидыОперацийРеализацияТоваров.Порядок) > 1 then 0 else 1 end', 1));                                                                               // В А-Трейде не списывали количество если скидка.
	LET vScript = vScript & '		 	
		 	[Таблица0]:
			SELECT 	

			   $(НомерБазы)          															as [НомерБазы]
			  ,$(ПериодQlik)																	as [Дата]
			  ,$(ДокументСокращенно) 															as [Документ]
			  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]

			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  					as [Контрагенты.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).$(ТабЧасть).Номенклатура)+$(|)	  		as [Номенклатура.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТорговыйПредставитель)+$(|)	  			as [ФизическиеЛица.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТипСписания)+$(|)						as [ТипыСписания.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТорговаяТочка)+$(|)						as [ТорговыеТочки.Ссылка]
			  
			  ,$(Знак)*$(Документ.$(Документ).$(ТабЧасть).Количество)*$(F1)						as [Количество] 
			  ,$(Сумма)*$(Документ.$(Документ).Курс) 	   										as [Сумма]		 
			  ,$(Знак)*$(Документ.$(Документ).$(ТабЧасть).СуммаНДС) 							as [СуммаНДС]
			  ,$(Документ.$(Документ).Курс)  													as [Курс]
			  ,Null																				as [Вес]
			  ,Null																				as [Себестоимость]
			
//			  ,$(Документ.$(Документ).Ссылка)													as [Документ.Ссылка]

		  	From  		 (SELECT Distinct 
		  				 $(РегистрНакопления.Продажи.Регистратор) 								as Регистратор 						From 		$(РегистрНакопления.Продажи)  							as Продажи (nolock)) ВремТаб  
		  	  inner join $(Документ.$(Документ)) 									            as $(Документ) 						(nolock) on $(Документ.$(Документ).Ссылка) 							= ВремТаб.Регистратор 
		  	  inner join $(Документ.$(Документ).$(ТабЧасть)) 						            as $(Документ)$(ТабЧасть)			(nolock) on $(Документ.$(Документ).$(ТабЧасть).Ссылка) 				= $(Документ.$(Документ).Ссылка)
		  	  left  join $(Перечисление.ТипыСписания) 								            as ТипыСписания						(nolock) on $(Перечисление.ТипыСписания.Ссылка) 					= $(Документ.$(Документ).ТипСписания)
		  	  left  join $(Перечисление.ВидыОперацийРеализацияТоваров) 							as ВидыОперацийРеализацияТоваров	(nolock) on $(Перечисление.ВидыОперацийРеализацияТоваров.Ссылка) 	= $(Документ.$(Документ).ВидОперации)

			Where  
				   $(ПериодSQL) >= ''$(Начало базы)'' and $(ПериодSQL) <  ''$(Окончание базы)''
			  and  $(Документ.$(Документ).Номер) not like ''%УТ%'' 
			  and  $(Документ.$(Документ).Номер) not like ''%КН%'' 
			  and  $(Документ.$(Документ).Проведен) 		= 1
			  and  $(Документ.$(Документ).ПометкаУдаления) 	= 0	
//			  and 	$(Перечисление.ТипыСписания.Порядок) 	= 0
			  $(ОтражатьВУчете)
			;
	';
		ENDIF; NEXT ТабЧасть; NEXT Документ; 
ENDSUB

SUB РеализацияПоРегистру 

			LET ПериодSQL 		= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрНакопления.Продажи.Период))', '$(РегистрНакопления.Продажи.Период)');
			LET ПериодQlik 		= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
			FOR Each Документ in 'РеализацияТоваровУслуг', 'ВозвратТоваровОтПокупателя'
	
				LET  ДокументСокращенно 			= chr(39)& if('$(Документ)' like '*Реализация*', 'Реализация', if('$(Документ)' like '*Возврат*', 'Возврат')) &chr(39);
			 	LET  Себестоимость 					= if('$(База)' like '*Бухгалтерия*', '$(РегистрНакопления.Продажи.Стоимость)', chr(39)&''&chr(39));
			 	LET  ВидУчета 						= if('$(База)' like 'ТОО*' and '$(База)' like '*Торговля*', chr(39)&'Торговля'&chr(39), 'case when $(Документ.$(Документ).Номер) like '&chr(39)&'%УТ%'&chr(39)&' or $(Документ.$(Документ).Номер) like '&chr(39)&'%КН%'&chr(39)&' then '&chr(39)&'Перенос'&chr(39)&' else '&chr(39)&'Бухгалтерия'&chr(39)&' end');
				LET  СуммаНДС						= if('$(База)' like '*ООО*', '$(РегистрНакопления.Продажи.Сумма) - $(РегистрНакопления.Продажи.СуммаБезНДС)', '$(РегистрНакопления.Продажи.СуммаНДС)');
				LET  ОтражатьВБухгалтерскомУчете	= if('$(База)' like '*Торговля*' and Документ = 'РеализацияТоваровУслуг', 'and $(Документ.$(Документ).ОтражатьВБухгалтерскомУчете) = 1', '');
		LET vScript = vScript & '
				[Таблица0]: 
				SELECT 	
	
				   $(НомерБазы)          															as [НомерБазы]
				  ,$(ПериодQlik)																	as [Дата]
				  ,$(ДокументСокращенно) 															as [Документ]
				  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  					as [Контрагенты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрНакопления.Продажи.Номенклатура)+$(|)	  				as [Номенклатура.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТорговыйПредставитель)+$(|)	  			as [ФизическиеЛица.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТипСписания)+$(|)						as [ТипыСписания.Ссылка]
			 	  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТорговаяТочка)+$(|)						as [ТорговыеТочки.Ссылка]
				  
				  ,$(РегистрНакопления.Продажи.Количество)											as [Количество]
				  ,$(РегистрНакопления.Продажи.Сумма) 	   											as [Сумма]		 
				  ,$(СуммаНДС)   																	as [СуммаНДС]
				  ,$(Документ.$(Документ).Курс)  													as [Курс]
				  ,''''																				as [Вес]
				  ,$(Себестоимость)																	as [Себестоимость]
				  
			  	From
			  	  $(РегистрНакопления.Продажи) 											            as Продажи 					(nolock)
			  	  inner join $(Документ.$(Документ)) 									            as $(Документ)				(nolock) on $(Документ.$(Документ).Ссылка) 		= $(РегистрНакопления.Продажи.Регистратор)
	
				Where  
					   $(ПериодSQL) >= ''$(Начало базы)'' and $(ПериодSQL) <  ''$(Окончание базы)''
				  and  $(Документ.$(Документ).Номер) not like ''%УТ%'' 
				  and  $(Документ.$(Документ).Номер) not like ''%КН%''
				  $(ОтражатьВБухгалтерскомУчете)				   
				  and  $(РегистрНакопления.Продажи.Активность) = 1	
				;
		';
			NEXT Документ; 

ENDSUB
///$tab 40


$(vConsole.LoadStart(40)); 										// Поступление

		IF '$(Версия 1С)' like '7.7*' then // and '$(База)' like 'Завод*'
		
			FOR Each Документ in 'ПоступлениеМатериалов', 'ПоступлениеТМЦИмпорт', 'ЗаготовкаМолока', 'ПоступлениеТоваров'; LET ИндексДокумента = Lookup('ИндексДокумента', 'НаименованиеДокумента', '$(Документ)', 'ДокументыКлик'); 
			
				IF '$(База)' = 'Завод "Coppa Italia"' and  '$(Документ)' = 'ЗаготовкаМолока' then; ELSE
	
					LET ПериодSQL 		 	= 'cast(left($(Журналы.Период), 8) as DateTime)';
					LET ПериодQlik 			= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
					LET Курс 				= '$(Документ.$(Документ).Курс)';
					LET Номенклатура		= if('$(Документ)' = 'ПоступлениеТМЦИмпорт', 'substring($(Документ.$(Документ).ТабЧасть.Номенклатура), 7, 9)', '$(Документ.$(Документ).ТабЧасть.Номенклатура)');
					LET $ 					= 'case when ''$(Документ)'' = ''ПоступлениеТоваров'' then '''' when left($(Документ.$(Документ).ТабЧасть.Номенклатура), 6) = ''B1  M1'' then ''$$'' else ''$'' end';
					LET ТМЦИмпорт			= if('$(Документ)' = 'ПоступлениеТМЦИмпорт', '
					  	,$(Документ.$(Документ).ТабЧасть.СуммаОформления)								as [СуммаОформления]
					  	,$(Документ.$(Документ).ТабЧасть.СуммаПошлины)									as [СуммаПошлины]
					  	,$(Документ.$(Документ).ТабЧасть.ТаможеннаяСтоимость)							as [ТаможеннаяСтоимость]
//					  	,$(Документ.$(Документ).СуммаП)													as [СуммаП]					
						', '
						,''''																			as [СуммаОформления]
						,''''																			as [СуммаПошлины]
						,''''																			as [ТаможеннаяСтоимость]						
						');
									
					[Таблица0]:
					Select 
		
					   	 $(НомерБазы)          															as [НомерБазы]	
				 		,$(ПериодQlik)																	as [Дата]	
	//			 		,'$(Документ)'	   																as [НаименованиеДокумента]
				 		,$(ИндексДокумента)	   															as [ИндексДокумента]
					    ,$(Журналы.НомерДокумента)  													as [НомерДокумента]
					    		 		
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  					as [Контрагенты.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  						as [Склады.Ссылка]			  	
						,$(НомерБазы)+$(|)+$(Документ.$(Документ).Ссылка)+$(|)							as [Документ.Ссылка]
						,$(НомерБазы)+$(|)+$($)+$(Номенклатура)+$(|)									as [Номенклатура.Ссылка]
	
						,$(Документ.$(Документ).ТабЧасть.Количество)									as [Количество]
					  	,$(Документ.$(Документ).ТабЧасть.Сумма)*$(Курс)									as [Сумма]
					  	,$(Документ.$(Документ).ТабЧасть.СуммаНДС)*$(Курс)								as [СуммаНДС]
				  		,$(Документ.$(Документ).Курс)  													as [Курс]

						$(ТМЦИмпорт)
					From
						$(Журналы) 															            as Журналы				(nolock)
						inner join $(Документ.$(Документ)) 									            as $(Документ) 			(nolock) on $(Документ.$(Документ).Ссылка)				= $(Журналы.Регистратор)
						inner join $(Документ.$(Документ).ТабЧасть) 						            as $(Документ)ТабЧасть 	(nolock) on $(Документ.$(Документ).ТабЧасть.Ссылка) 		= $(Журналы.Регистратор)
		
					Where 
							$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
						and $(Журналы.ПометкаУдаления) = 0
						and $(Журналы.Проведен) <> 4
					;

										
				ENDIF
			
			NEXT Документ
					
			LET Курс 								= '$(Документ.УслугиСтороннихОрганизаций.Курс)';
			LET  УслугиСтороннихОрганизаций			= 'substring($(Документ.УслугиСтороннихОрганизаций.ДокументПоступления), 5, 9)';
			[Таблица27]:
			Select 

			   	 $(НомерБазы)          															as [НомерБазы]	
		 		,$(ПериодQlik)																	as [Дата]	
//			 	,'$(Документ)'	   																as [НаименованиеДокумента]
		 		,8	   																			as [ИндексДокумента]
			    ,$(Журналы.НомерДокумента)  													as [НомерДокумента]
			    		 		
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Организация)+$(|)		as [Организации.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Контрагент)+$(|)	  	as [Контрагенты.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Валюта)+$(|)	  		as [Валюты.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Склад)+$(|)	  		as [Склады.Ссылка]			  	

				,1																				as [Количество]
				,$(Документ.УслугиСтороннихОрганизаций.Сумма)*$(Курс)							as [Сумма]
			  	,$(Документ.УслугиСтороннихОрганизаций.СуммаНДС)*$(Курс)						as [СуммаБезНалогов]
		  		,$(Документ.УслугиСтороннихОрганизаций.Курс)  									as [Курс]
				,$(НомерБазы)+$(|)+$(УслугиСтороннихОрганизаций)+$(|)							as [ДокументПоступления]
			From
				$(Журналы) 															            as Журналы				(nolock)
				inner join $(Документ.УслугиСтороннихОрганизаций) 								as УслугиСтороннихОрганизаций 			(nolock) on $(Документ.УслугиСтороннихОрганизаций.Ссылка)				= $(Журналы.Регистратор)

			Where 
					$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				and $(Журналы.ПометкаУдаления) = 0
				and $(Журналы.Проведен) <> 4
			;

		ELSEIF '$(Версия 1С)' like '8*' then 	

			FOR Each Документ in 'ПоступлениеТоваровУслуг'; LET ИндексДокумента = Lookup('ИндексДокумента', 'НаименованиеДокумента', '$(Документ)', 'ДокументыКлик'); 
				
				LET ПериодSQL 			= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
				LET ПериодQlik 			= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
				LET СуммаНДС			= if('$(База)' like '*ООО*', '$(РегистрНакопления.Продажи.Сумма) - $(РегистрНакопления.Продажи.СуммаБезНДС)', '$(РегистрНакопления.Продажи.СуммаНДС)');
			 	LET Сумма 				= 'case when $(Документ.$(Документ).СуммаВключаетНДС) = 1 then $(Документ.$(Документ).Товары.Сумма) else ($(Документ.$(Документ).Товары.Сумма) + $(Документ.$(Документ).Товары.СуммаНДС)) end';
			 	LET Курс 				= '$(Документ.$(Документ).Курс)';
			 	
			 	[Таблица0]:
				SELECT
					
				   	 $(НомерБазы)          																as [НомерБазы]
				  	,$(ПериодQlik)																		as [Дата]
	//			  	,'$(Документ)' 																		as [НаименованиеДокумента]
				  	,$(ИндексДокумента)	   																as [ИндексДокумента]
				  	,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
	
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)							as [Организации.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  						as [Контрагенты.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  							as [Валюты.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]	
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Ссылка)+$(|)								as [Документ.Ссылка]		  
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Товары.Номенклатура)+$(|)	  				as [Номенклатура.Ссылка]
				  
				  	,$(Документ.$(Документ).Товары.Количество)											as [Количество]
				  	,$(Сумма)*$(Курс)	   																as [Сумма]		 
				  	,$(Документ.$(Документ).Товары.СуммаНДС)*$(Курс)   									as [СуммаНДС]
				  	,$(Документ.$(Документ).Курс)  														as [Курс]

					,''																					as [СуммаОформления]
					,''																					as [СуммаПошлины]
					,''																					as [ТаможеннаяСтоимость]
//					,''																					as [СуммаП]
	
				  			
			  	From
			  				 $(Документ.$(Документ)) 										            as $(Документ) 				(nolock)
			  	  inner join $(Документ.$(Документ).Товары) 								            as $(Документ)Товары		(nolock) on $(Документ.$(Документ).Товары.Ссылка) 	= $(Документ.$(Документ).Ссылка)
	
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				  and  $(Документ.$(Документ).Номер) not like '%УТ%' 
				  and  $(Документ.$(Документ).Номер) not like '%КН%' 
				  and  $(Документ.$(Документ).Проведен) = 1
				  and  $(Документ.$(Документ).ПометкаУдаления) = 0	
				;
				
			NEXT Документ
				
		ENDIF
		
$(vConsole.LoadEnd); 

SUB РасчетСебестоимостиПоступления1; $(vConsol.Trace(Расчет себестоимости поступления));
	
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd);
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [Организации.Ссылка], [Номенклатура.Ссылка] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     if([Организации.Ссылка]  like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Организации.Ссылка],  Index([Организации.Ссылка],  '06') +2), [Организации.Ссылка])  as [Организации.Ссылка], 
	     if([Номенклатура.Ссылка] like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +2), [Номенклатура.Ссылка]) as [Номенклатура.Ссылка], 
		 if(isnull(СебестоимостьПоступления) and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления],
		 if([Организации.Ссылка] like '06*' and [Дата] >= '01.01.2015', 2, 1) as [Маркер]
	Resident [Таблица0] Order By [Организации.Ссылка], [Номенклатура.Ссылка], [Дата]; DROP Table [Таблица0]; 

	[Таблица0]: LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], min([Маркер]) as [Маркер] 
				Resident [Таблица1] Where (len([СебестоимостьПоступления]) > 0 and [СебестоимостьПоступления] <> 0) Group By [Дата], [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join 
	(Таблица0)  LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], [СебестоимостьПоступления], [Маркер] Resident [Таблица1]; DROP Table [Таблица1]; DROP Field [Маркер]; Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB

SUB РасчетСебестоимостиПоступления2; $(vConsol.Trace(Расчет себестоимости поступления));
	$(vConfigConnection); NoConcatenate [Table.99]: SELECT * FROM [Базы SQL];
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd); Left Join
	(Таблица0)  LOAD if([Версия 1С] like '7.7*', right(0 & №, 2), '3'& left(№, 1) & '3' & right(№, 1)) as [НомерБазы], [Версия 1С], SubField([База], '" -', 1) as [База] Resident [Table.99]; Left Join
	(Таблица0)  LOAD [Номенклатура.Ссылка], [Код номенклатуры] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); Left Join
	(Таблица0)  LOAD [Организации.Ссылка], [РНН организации] From [$(vQvPath)\QVD\Справочники\Организации*] (qvd); 
 	DROP Table [Table.99];
 	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [База], [Версия 1С], [Код номенклатуры], [РНН организации], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [База], [Версия 1С], [Код номенклатуры], [РНН организации]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [База], [Версия 1С], [Код номенклатуры], [РНН организации] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [База], [Версия 1С], [Код номенклатуры], [РНН организации], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата] as [Дата.1], [База], [Версия 1С], [Код номенклатуры],[РНН организации],
		 if(isnull(СебестоимостьПоступления) and [Код номенклатуры] = peek([Код номенклатуры]) and [База] = peek([База]) and [Версия 1С] = peek([Версия 1С])
		 and [РНН организации] = peek([РНН организации]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления]
	Resident [Таблица0] Order By [База], [Версия 1С], [РНН организации], [Код номенклатуры], [Дата]; DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0]; CALL СоответствиеДатБазам2; Left Join
	(Таблица0)  LOAD [Номенклатура.Ссылка], [Код номенклатуры], [НомерБазы] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [Код номенклатуры]; Left Join
	(Таблица0)  LOAD [Организации.Ссылка], [РНН организации], [НомерБазы] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [РНН организации]; Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB

SUB РасчетСебестоимостиПоступления3; $(vConsol.Trace(Расчет себестоимости поступления));
	
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd); Left Join 
	(Таблица0)	LOAD [Организации.Ссылка], SubField([Организации.Ссылка], [НомерБазы], 2) as [Организации] From [$(vQvPath)\QVD\Справочники\Организации*] (qvd); DROP Field [Организации.Ссылка]; Left Join 
	(Таблица0)	LOAD [Номенклатура.Ссылка], SubField([Номенклатура.Ссылка], [НомерБазы], 2) as [Номенклатура] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [Номенклатура.Ссылка];
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации], [Номенклатура], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [Организации], [Номенклатура]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [Организации], [Номенклатура] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [Организации], [Номенклатура], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата], [Организации], [Номенклатура],
		 if(isnull(СебестоимостьПоступления) and [Номенклатура] = peek([Номенклатура]) and [Организации] = peek([Организации]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления]
	Resident [Таблица0] Order By [Организации], [Номенклатура], [Дата]; DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0]; CALL СоответствиеДатБазам(Организации); CALL СоответствиеДатБазам(Номенклатура); Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB
				
SUB Conf.40; $(vConsol.Trace(Расчет себестоимости поступления));
STORE [Таблица27] into [$(vQvPath)\QVD\# УслугиСтороннихОрганизаций.qvd] (qvd); DROP Table [Таблица27];
CALL РасчетСебестоимостиПоступления1
 /*
		[Таблица1]:
		LOAD 
			 MonthStart(Дата) 									as [Дата]
			,[НомерБазы]										as [НомерБазы]
			,[Организации.Ссылка] 								as [Организации.Ссылка]
			,[Номенклатура.Ссылка]								as [Номенклатура.Ссылка]
			,Sum(Количество) 									as [Количество] 
			,Sum(Сумма - СуммаНДС) 								as [Сумма]
		From [$(vQvPath)\QVD\Поступление\*.qvd] (qvd)
		Group by MonthStart(Дата), [НомерБазы], [Организации.Ссылка], [Номенклатура.Ссылка]; 
		
		[Таблица2]: LOAD * From	[$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd);
		[Таблица3]: Inner Join(Таблица1) LOAD [НомерБазы], [Номенклатура.Ссылка], [Код номенклатуры] as [Номенклатура.Код] Resident [Таблица2] Where [Номенклатура.Тип] = 'Номенклатура' and [Номенклатурные группы (1)] <> 'Материалы'; DROP Table [Таблица2];

	LET Дата = '01.01.2010';
	DO	
		[Таблица0]:
		LOAD 
		   '$(Дата)'																		as [Дата]
		  ,'СебестоимостьПоступления'														as [Документ]
		  ,[Организации.Ссылка]																as [Организации.Ссылка]
		  ,[Номенклатура.Ссылка]	  														as [Номенклатура.Ссылка]
		  ,[Номенклатура.Код]	  															as [Номенклатура.Код]
		  
		  ,FirstSortedValue([Количество], -Дата)											as [Количество]
		  ,FirstSortedValue([Сумма], -Дата) 	   											as [Сумма]		 
		  
		  ,if('$(Дата)' >= '01.01.2015' and [Организации.Ссылка] like '06*', 0, 1)			as [Отбор]
			    			  			
		Resident [Таблица1] 
		where (Дата <= date('$(Дата)') And Дата > AddYears('$(Дата)', -3)) or InMonth(date('$(Дата)'), Дата, 0)
		Group by [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код];
		
		LET Дата = AddMonths(Дата, 1);
		
			IF Дата = '01.12.2014' then 
			
				[ТаблицаП]: LOAD [Номенклатура.Код] as [Проверка] Resident [Таблица1] where Дата = '01.01.2015' and [Организации.Ссылка] like '07*';
				
				Concatenate(Таблица1)
				LOAD 
	
				   '01.01.2015'																		as [Дата]

				  ,'07' & Mid([Организации.Ссылка], Index([Организации.Ссылка], '06') +1)			as [Организации.Ссылка]
				  ,'07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +1)			as [Номенклатура.Ссылка]
				  ,[Номенклатура.Код]  																as [Номенклатура.Код]
				  
				  ,[Количество]																		as [Количество]
				  ,[Сумма] 	   																		as [Сумма]		 
					    			  			
				Resident [Таблица0] 
				where Дата = '01.12.2014' and [Организации.Ссылка] like '06*'
				and not Exists(Проверка, Номенклатура.Код)
				;
				DROP Tables [ТаблицаП];
				
			ENDIF
	
		LOOP while Дата <= AddMonths(Today(), 1); DROP Table [Таблица1];
		
		Inner Join(Таблица0) LOAD 1 as [Отбор] AUTOGENERATE 1; DROP Field [Отбор];


		[ТаблицаК]: LOAD [Date] as [Дата]; LOAD Date('2000-01-01' + IterNo() - 1)  as [Date]  AutoGenerate 1 While Date('2000-01-01' + IterNo() - 1) <= Date('2020-01-01');	Left Join 
		(ТаблицаК) LOAD Дата as [Дата] , MonthStart(Дата) as [Дата2] Resident [ТаблицаК];
	
		[Таблица1]:
		LOAD 
			 [Дата] 																	as [Дата2] 
		    ,[Номенклатура.Ссылка]                                                    	as [Номенклатура.Ссылка]
		    ,[Организации.Ссылка] 														as [Организации.Ссылка]
		    ,sum(Сумма) / sum(Количество) 												as [СебестоимостьПоступления]
		Resident [Таблица0]
		Group By [Дата], [Номенклатура.Ссылка], [Организации.Ссылка];
		
			Left Join (Таблица1) LOAD * Resident [ТаблицаК]; 
	
			
		DROP Tables [ТаблицаК], [Таблица0];  DROP Field [Дата2];	
	
	STORE [Таблица1] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd);  DROP Tables [Таблица1];
	*/
ENDSUB	

	
///$tab 50


$(vConsole.LoadStart(50)); 										// Дебиторка

		IF '$(Версия 1С)' like '8.3 УТ' then			//>>>>>>>>>>>>>>>>>>>>>>>>>		Торговля		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
				
			LET ПериодSQL   	= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрНакопления.РасчетыСКонтрагентами.Период))', '$(РегистрНакопления.РасчетыСКонтрагентами.Период)');
			LET ПериодQlik   	= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET ВидДвижения 	= 'case when $(РегистрНакопления.РасчетыСКонтрагентами.ВидДвижения) = 1 then -1  when $(РегистрНакопления.РасчетыСКонтрагентами.ВидДвижения) = 0 then +1 end';
			LET ВидУчета		= chr(39) & 'Торговля' & chr(39);
			LET Валюты.Ссылка	= chr(39) & '333988564487FC5E992B11E00344D9D98B29' & chr(39);
			LET ОтражатьВУчете	= if('$(Начало базы)' >= '01.01.2015', 'case when $(Документ.РеализацияТоваровУслуг.Ссылка) is not null then $(Документ.РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете) end', chr(39)&''&chr(39));													// В торговых базах этот документ не переносится в бухгалтерию.
			
			[Таблица0]:
			select	
	
			   $(НомерБазы)          																as [НомерБазы]
			  ,$(ПериодQlik) 																		as [ДатаДвижения]
			  ,$(ВидУчета) 																			as [ВидУчета]
			  
			  ,$(НомерБазы)+$(|)+$(РегистрНакопления.РасчетыСКонтрагентами.Организация)+$(|)		as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+$(РегистрНакопления.РасчетыСКонтрагентами.Контрагент)+$(|) 		as [Контрагенты.Ссылка]
			  ,$(Валюты.Ссылка) 																	as [Валюты.Ссылка]
			  
			  ,$(РегистрНакопления.РасчетыСКонтрагентами.Сумма) 									as [Сумма]
			  ,$(ВидДвижения)  																		as [ВидДвижения]			
			  ,'' 																					as [Счет]
			  ,'' 																					as [КорСчет]
				  	
			  ,case  
			   	when $(Документ.РеализацияТоваровУслуг.Ссылка) is not null then  
				(select sum($(Документ.РеализацияТоваровУслуг.Товары.Количество) * $(Справочник.ЕдиницыИзмерения.Вес)) 
				  	 from $(Документ.РеализацияТоваровУслуг.Товары)   	as РеализацияТоваровУслугТовары
					  	inner join $(Справочник.Номенклатура)  			as [Номенклатура] 		on $(Справочник.Номенклатура.Ссылка) 	 = $(Документ.РеализацияТоваровУслуг.Товары.Номенклатура)
						inner join $(Справочник.ЕдиницыИзмерения)  		as ЕдиницыИзмерения 	on $(Справочник.ЕдиницыИзмерения.Ссылка) = $(Справочник.Номенклатура.ЕдиницаДляОтчетов)			  		 
				  	 where $(Документ.РеализацияТоваровУслуг.Товары.Ссылка) = $(Документ.РеализацияТоваровУслуг.Ссылка) )
			  	when $(Документ.ВозвратТоваровОтПокупателя.Ссылка) is not null then 
				(select sum($(Документ.ВозвратТоваровОтПокупателя.Товары.Количество) * $(Справочник.ЕдиницыИзмерения.Вес))
				  	 from $(Документ.ВозвратТоваровОтПокупателя.Товары) as ВозвратТоваровОтПокупателяТовары  
				  		inner join $(Справочник.Номенклатура)  			as Номенклатура 		on $(Справочник.Номенклатура.Ссылка) 	 = $(Документ.ВозвратТоваровОтПокупателя.Товары.Номенклатура)
						inner join $(Справочник.ЕдиницыИзмерения)  		as ЕдиницыИзмерения  	on $(Справочник.ЕдиницыИзмерения.Ссылка) = $(Справочник.Номенклатура.ЕдиницаДляОтчетов)
				  	 where $(Документ.ВозвратТоваровОтПокупателя.Товары.Ссылка) = $(Документ.ВозвратТоваровОтПокупателя.Ссылка) )	  						   
	
			   end 																					as [Вес]
			  ,cast($(РегистрНакопления.РасчетыСКонтрагентами.ТипРегистратора) as int)				as [НомерРегистратора]
			  ,$(ОтражатьВУчете)																	as [ОтражатьВУчете]
			  
			from 
			  	$(РегистрНакопления.РасчетыСКонтрагентами)  							            as РасчетыСКонтрагентами			(nolock)
				  left  join $(Документ.ВозвратТоваровОтПокупателя)   					            as ВозвратТоваровОтПокупателя 		(nolock) on $(Документ.ВозвратТоваровОтПокупателя.Ссылка) 	= $(РегистрНакопления.РасчетыСКонтрагентами.Регистратор) //and  $(Документ.ВозвратТоваровОтПокупателя.ОтражатьВБухгалтерскомУчете) = 1 
				  left  join $(Документ.РеализацияТоваровУслуг)  						            as РеализацияТоваровУслуг 			(nolock) on $(Документ.РеализацияТоваровУслуг.Ссылка) 		= $(РегистрНакопления.РасчетыСКонтрагентами.Регистратор) //and  $(Документ.РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете) = 1
		
			Where 
				$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
//				and $(Документ.РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете) = 1
			;
			
			IF not Обновление then
			
				IF '$(Версия 1С)' like '*8.1*' then; [ТаблицаИ]: SELECT * From $(РегистрыНакопления.Настройки);
				 	LET ДатаРассчитанныхИтогов = Date(lookup('_Period', '_RegID', '$(РегистрНакопления.РасчетыСКонтрагентами.Ссылка)', 'ТаблицаИ'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ];
				ELSE; 	[ТаблицаИ]: SELECT * From $(РегистрНакопления.РасчетыСКонтрагентами.Настройки);
				 	LET ДатаРассчитанныхИтогов = Date(Peek('_Period', 0, 'ТаблицаИ'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ]; ENDIF
				LET ПериодSQL 				  	= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрНакопления.РасчетыСКонтрагентами.Итоги.Период))', '$(РегистрНакопления.РасчетыСКонтрагентами.Итоги.Период)');
				LET ПериодQlik 					= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
				
				Concatenate (Таблица0)
				select
		
				   $(НомерБазы)          																as [НомерБазы]
			 	  ,$(ПериодQlik) 																		as [ДатаДвижения]
			 	  ,$(ВидУчета) 																			as [ВидУчета]
			 	  
				  ,$(НомерБазы)+$(|)+$(РегистрНакопления.РасчетыСКонтрагентами.Итоги.Организация)+$(|)	as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(РегистрНакопления.РасчетыСКонтрагентами.Итоги.Контрагент)+$(|) 	as [Контрагенты.Ссылка]
				  ,$(Валюты.Ссылка) 																	as [Валюты.Ссылка]
				  
				  ,$(РегистрНакопления.РасчетыСКонтрагентами.Итоги.Сумма) 	 							as [Сумма]
				  ,0 																					as [ВидДвижения]
				  ,0  																					as [Вес]
		
				from  
					$(РегистрНакопления.РасчетыСКонтрагентами.Итоги)  					                as РасчетыСКонтрагентамиИтоги 		(nolock)
		
				where 
					$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'  and $(ПериодSQL) <= '$(ДатаРассчитанныхИтогов)'
					
				;
		
				CALL РасчетИтоговДебиторки; CALL ТипРегистратора; 
	
			ENDIF
		
		ELSE //IF '$(База)' like '*Бухгалтерия*' then	//>>>>>>>>>>>>>>>>>>>>>>>>>		Бухгалтерия		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
			LET ПериодSQL 									= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.Период))', '$(РегистрБухгалтерии.Типовой.Период)');
			LET ПериодQlik 									= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';

			FOR Each ВидДвижения in '+1', '-1'

				LET ДвижениеСубконто								= if($(ВидДвижения) = '+1', 0, 1);
				LET РегистрБухгалтерии.Типовой.Счет 				= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетДт)',   '$(РегистрБухгалтерии.Типовой.СчетКт)');
				LET РегистрБухгалтерии.Типовой.КорСчет 				= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетКт)',   '$(РегистрБухгалтерии.Типовой.СчетДт)');
				LET РегистрБухгалтерии.Типовой.Валюта 				= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ВалютаДт)', '$(РегистрБухгалтерии.Типовой.ВалютаКт)');
				LET ВидУчета										= chr(39) & 'Бухгалтерия' & chr(39);
				
				[Таблица0]:
				select
	
				   $(НомерБазы)          															as [НомерБазы]			   
		 		  ,$(ПериодQlik)  																	as [ДатаДвижения]
		 		  ,$(ВидУчета) 																		as [ВидУчета]
		 		  
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
			  	  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [Контрагенты.Ссылка]
			  	  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Валюта)+$(|)						as [Валюты.Ссылка]
			  	  
			  	  ,$(РегистрБухгалтерии.Типовой.Сумма) 												as [Сумма]
				  ,#1$(ПланСчетов.Типовой.Код) 														as [Счет]
				  ,#2$(ПланСчетов.Типовой.Код) 														as [КорСчет]
				  ,$(ВидДвижения) 																	as [ВидДвижения]
	
				  ,cast($(РегистрБухгалтерии.Типовой.ТипРегистратора) as int)						as [НомерРегистратора]
				  ,0																				as [Вес]
				  ,1																				as [ОтражатьВУчете]
				  
				from 
								 $(РегистрБухгалтерии.Типовой) 							            as Типовой					(nolock)
					  inner join $(ПланСчетов.Типовой) 									            as #1ПланСчетов				(nolock) on #1$(ПланСчетов.Типовой.Ссылка) 	= $(РегистрБухгалтерии.Типовой.Счет)
					  inner join $(ПланСчетов.Типовой) 									            as #2ПланСчетов	    		(nolock) on #2$(ПланСчетов.Типовой.Ссылка) 	= $(РегистрБухгалтерии.Типовой.КорСчет)
					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто) 		            as Субконто					(nolock)
	
	//				  		$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 			= $(РегистрБухгалтерии.Типовой.ТипРегистратора)and			  	
					  	on	$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 				= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and $(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 				= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and $(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= $(ДвижениеСубконто)
					  	and $(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипСубконто) 				= $(Справочник.Контрагенты.Тип)
					
				Where 
					  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
				  and (#1$(ПланСчетов.Типовой.Код) in ('1610', '2910') or #1$(ПланСчетов.Типовой.Код) like '12%' or #1$(ПланСчетов.Типовой.Код) like '21%')
				  and $(РегистрБухгалтерии.Типовой.Активность) = 1
				;
			NEXT ВидДвижения
	
			IF not Обновление then
				
				[ТаблицаИ]: SELECT * From $(РегистрыБухгалтерии.Настройки);
				LET ДатаРассчитанныхИтогов		= Date( AddYears(lookup('_Period', '_RegID', '$(РегистрБухгалтерии.Типовой.Ссылка)', 'ТаблицаИ'), '$(Смещение дат)'), 'YYYY-MM-DD'); DROP Table [ТаблицаИ];
				LET ПериодSQL 				  	= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Период))', '$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Период)');
				LET ПериодQlik 					= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
		
				Concatenate(Таблица0)
				select
		
				   $(НомерБазы)          																	as [НомерБазы]	
			 	  ,$(ПериодQlik) 																			as [ДатаДвижения]
			 	  ,$(ВидУчета) 																				as [ВидУчета]
			 	  
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Организация)+$(|) as [Организации.Ссылка]	   
			  	  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Субконто1)+$(|)	as [Контрагенты.Ссылка]
			  	  
			  	  ,$(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Сумма) 								as [Сумма]
				  ,$(ПланСчетов.Типовой.Код) 																as [Счет]
				  ,'' 																						as [КорСчет]
			  	  ,0 																						as [ВидДвижения]
		
				from 
				  			 $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2) 				            as ТиповойИтогиПоСчетамССубконто2  		(nolock)
				  inner join $(ПланСчетов.Типовой) 												            as ПланСчетов	 						(nolock) on $(ПланСчетов.Типовой.Ссылка)   	 	= $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.Счет)
		
				where 
					  $(РегистрБухгалтерии.Типовой.ИтогиПоСчетамССубконто2.ТипСубконто1) = $(Справочник.Контрагенты.Тип)
				  and $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'  and $(ПериодSQL) <= '$(ДатаРассчитанныхИтогов)'
				  and ($(ПланСчетов.Типовой.Код) in ('1610', '2910') or $(ПланСчетов.Типовой.Код) like '12%' or $(ПланСчетов.Типовой.Код) like '21%')
				;

				CALL РасчетИтоговДебиторки; CALL ТипРегистратора; 
			
			ENDIF
			
		ENDIF
		
		IF Обновление then; CALL ТипРегистратора; ENDIF
		
$(vConsole.LoadEnd); 

SUB Conf.50; ENDSUB

SUB Conf.51; 										// КорректировкаОбновленияДебиторки		

	IF Обновление then	
		
		Left Join (Таблица0) LOAD * Resident [ТаблицаТ]; DROP Table [ТаблицаТ];
		LET СтрокаСохранения = '$(vQvPath)\QVD\ОбновлениеДебиторки.qvd (qvd)'; 
		IF ErrorConnection then
			[Таблица1]: LOAD if([Версия 1С] like '*7.7*', [Номер базы], '3' & mid([Номер базы], 1, 1) & '3' & mid([Номер базы], 2, 1)) as [НомерБазы] Resident [Базы SQL]
						Where not Exists([НомерБазы], if([Версия 1С] like '*7.7*', [Номер базы], '3' & mid([Номер базы], 1, 1) & '3' & mid([Номер базы], 2, 1))); 
						STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
			[Таблица2]: LOAD * FROM [$(vQvPath)\QVD\Дебиторка\*.qvd] (qvd) Where Exists(НомерБазы); DROP Table [Таблица1]; NoConcatenate
			[Таблица0]: LOAD * Resident [Таблица2] Where [ДатаДвижения] >= Date($(vDocuments.RenewDate)) and [ВидДвижения] <> 0; DROP Table [Таблица2];
			[Таблица0]: LOAD * FROM $(СтрокаСохранения); STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
		ELSE; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0]; ENDIF
	
		[Таблица1]: LOAD [Дата] as [ДатаДвижения] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where [Дата] >= MonthStart($(vDocuments.RenewDate)) and [Дата] < Date($(vDocuments.RenewDate));
		[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Дебиторка\*.qvd] (qvd) Where Exists(ДатаДвижения); DROP Table [Таблица1];
		[Таблица0]: LOAD * FROM $(СтрокаСохранения);
		
		LET ДатаРассчитанныхИтогов = MonthStart($(vDocuments.RenewDate)); CALL РасчетИтоговДебиторки
					
		STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
	
	ENDIF
	
ENDSUB

SUB ТипРегистратора

	LET Поле 		= 'База ' & $(Номер базы);
	LET Number 		= if($(Номер базы) > 10, '3'& left($(Номер базы), 1) & '3' & right($(Номер базы), 1), $(Номер базы));
	$(vConfigConnection); NoConcatenate [Table.99]: SELECT * FROM [Метаданные];
	[ТаблицаТ]: //Left Join (Таблица0)
	LOAD Distinct
		 $(Number)          																	as [НомерБазы]
		,Keepchar("$(Поле)", '0123456789') 														as [НомерРегистратора]
		,SubField([Мета переменная], '.', 2) 													as [ТипРегистратора]
	Resident [Table.99] Where "$(Поле)" like '_document*' and not "$(Поле)" like '_*_*';
	
	IF not Обновление then; Left Join (Таблица0) LOAD * Resident [ТаблицаТ]; DROP Table [ТаблицаТ]; ENDIF; DROP Table [Table.99];
	
ENDSUB

SUB РасчетИтоговДебиторки; $(vConsol.Trace(Итоги рассчитаны по $(ДатаРассчитанныхИтогов)));

	IF '$(ДатаРассчитанныхИтогов)' < AddMonths('$(Окончание базы)', -1) or Обновление Then

		DO 
			Concatenate (Таблица0)
			LOAD
				 [НомерБазы]         														as [НомерБазы]
				,Date(AddMonths('$(ДатаРассчитанныхИтогов)', 1)) 							as [ДатаДвижения]
				,[ВидУчета]																	as [ВидУчета]
				
				,[Организации.Ссылка]														as [Организации.Ссылка]
				,[Контрагенты.Ссылка]														as [Контрагенты.Ссылка]
				,[Валюты.Ссылка]															as [Валюты.Ссылка]
				
				,Sum(if([ВидДвижения] = 0, 1, [ВидДвижения])* [Сумма]) 						as [Сумма]
				,[Счет] 																	as [Счет]
				,'' 																		as [КорСчет]
				,0 																			as [ВидДвижения]
				
			Resident [Таблица0]
			Where [ДатаДвижения] >= '$(ДатаРассчитанныхИтогов)' and [ДатаДвижения] < AddMonths('$(ДатаРассчитанныхИтогов)', 1)
			Group By [НомерБазы], [ВидУчета], [Организации.Ссылка], [Контрагенты.Ссылка], [Валюты.Ссылка], [Счет]; 
			
			LET ДатаРассчитанныхИтогов = AddMonths('$(ДатаРассчитанныхИтогов)', 1); $(vConsol.Trace(Итоги рассчитаны по $(ДатаРассчитанныхИтогов)));

		LOOP while '$(ДатаРассчитанныхИтогов)' <= Today() and '$(ДатаРассчитанныхИтогов)' < AddMonths('$(Окончание базы)', -1);
		
	ENDIF
	
ENDSUB

SUB Load.51; LET Обновление = True(); CALL Load.50; ENDSUB
///$tab 60


$(vConsole.LoadStart(60)); 										// Начисления

		IF '$(Версия 1С)' like '8*' then		//>>>>>>>>>>>>>>>>>>>>>>>>>		8       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

			FOR Each Документ in 'НачислениеЗарплатыРаботникамОрганизаций'
	
				LET ПериодSQL 				= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Период))', '$(РегистрНакопления.ВзаиморасчетыСРаботникамиОрганизаций.Период)');
				LET ПериодQlik 				= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
				LET Взаиморасчеты			= 'ВзаиморасчетыСРаботникамиОрганизаций';
				LET ВидРасчета				= 'case when isnull($(Документ.$(Документ).Организация), 0) = 0 then ''Удержания'' else $(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Наименование) end';
				LET Начисление				= 'НачислениеЗарплатыРаботникамОрганизаций';
				LET Удержание				= 'РасчетУдержанийРаботниковОрганизаций';
				
				 [Таблица0]:
				 Select 
	
					  $(НомерБазы)          													as [НомерБазы]
					 ,$(ПериодQlik)																as [Дата]
			 	 	 ,$(Документ.$(Документ).Номер) 											as [НомерДокумента]
			 	 	 
			 	 	 ,$(НомерБазы)+$(|)+$(РегистрНакопления.$(Взаиморасчеты).Организация)+$(|)	as [Организации.Ссылка]
			 	 	 ,$(НомерБазы)+$(|)+$(РегистрНакопления.$(Взаиморасчеты).Физлицо)+$(|) 		as [ФизическиеЛица.Ссылка] 
			 	 	 
					 ,$(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Наименование)			as [ВидРасчета]
//					 ,$(ВидРасчета)																as [ВидРасчета]
					 ,$(Справочник.ПодразделенияОрганизаций.Наименование)						as [ПодразделениеОрганизации]
					 ,$(Справочник.ДолжностиОрганизаций.Наименование)							as [Должность]

			 	 	 ,$(Документ.$(Документ).Начисления.Размер)  								as [Размер]   
			 	 	 ,$(РегистрНакопления.$(Взаиморасчеты).СуммаВзаиморасчетов)  				as [Результат]  
			 	 	 ,$(Документ.$(Начисление).Начисления.ОтработаноДней)  						as [ОтработаноДней] 
			 	 	 ,$(Документ.$(Начисление).Начисления.ОтработаноЧасов)  					as [ОтработаноЧасов]  
					 
					 ,cast($(РегистрНакопления.$(Взаиморасчеты).ТипРегистратора) as int)		as [ТипРегистратора]
					 
			 	 From 
			 	 	  			$(РегистрНакопления.$(Взаиморасчеты))  			 	            As $(Взаиморасчеты)					(nolock)
			 	 	 inner Join $(Перечисление.РасчетыСБюджетомФондамиВидСтроки) 	            As РасчетыСБюджетомФондамиВидСтроки (nolock) On $(РегистрНакопления.$(Взаиморасчеты).ВидСтроки)				= $(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Ссылка)		and $(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Порядок) 	< 2
			 	 	 left  Join $(Документ.$(Начисление).Начисления) 				            As $(Начисление)Начисления 			(nolock) On $(РегистрНакопления.$(Взаиморасчеты).Регистратор)  			= $(Документ.$(Начисление).Начисления.Ссылка)  					and $(РегистрНакопления.$(Взаиморасчеты).НомерСтроки)  			= $(Документ.$(Начисление).Начисления.НомерСтроки)
			 	 	 left  Join $(ПланВидовРасчета.ОсновныеНачисленияОрганизаций) 	            As ОсновныеНачисленияОрганизаций 	(nolock) On $(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Ссылка) 	= $(Документ.$(Начисление).Начисления.ВидРасчета) 
					 left  Join $(Документ.$(Начисление)) 							            As $(Начисление) 			 		(nolock) On $(РегистрНакопления.$(Взаиморасчеты).Регистратор)  			= $(Документ.$(Начисление).Ссылка)
					 left  Join	$(Документ.$(Удержание)) 							            As $(Удержание)						(nolock) On $(РегистрНакопления.$(Взаиморасчеты).Регистратор)  			= $(Документ.$(Удержание).Ссылка)

				 	 left  Join $(РегистрСведений.РаботникиОрганизаций) 		 	            As РаботникиОрганизаций				(nolock) On $(РегистрСведений.РаботникиОрганизаций.Физлицо) 			= $(РегистрНакопления.$(Взаиморасчеты).Физлицо)
				 	 																										  //   and $(РегистрСведений.РаботникиОрганизаций.ЗанимаемыхСтавок)	   <> 0
						 	 																											    and $(РегистрСведений.РаботникиОрганизаций.Период)				= (Select Max($(РегистрСведений.РаботникиОрганизаций.Период)) 
																																																				 From $(РегистрСведений.РаботникиОрганизаций) 				As РаботникиОрганизаций	
																																																				Where $(РегистрСведений.РаботникиОрганизаций.Физлицо) 		 = $(РегистрНакопления.$(Взаиморасчеты).Физлицо)
																																																			  	  And $(РегистрСведений.РаботникиОрганизаций.Период) 		<= $(РегистрНакопления.$(Взаиморасчеты).Период))
																																			and $(РегистрСведений.РаботникиОрганизаций.ЗанимаемыхСтавок) 	= 1
				 	 left  Join $(Справочник.ДолжностиОрганизаций) 					            As ДолжностиОрганизаций 			(nolock) On $(Справочник.ДолжностиОрганизаций.Ссылка) 					= $(РегистрСведений.РаботникиОрганизаций.Должность)
			 	 	 left  Join $(Справочник.ПодразделенияОрганизаций) 				            As ПодразделенияОрганизаций 		(nolock) On $(Справочник.ПодразделенияОрганизаций.Ссылка) 				= $(РегистрСведений.РаботникиОрганизаций.ПодразделениеОрганизации) 

			 	 Where 
			 	 		$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
			 	 	and $(РегистрНакопления.$(Взаиморасчеты).Активность) = 1 
			 	 ;	 
			NEXT Документ
			
			CALL КорректировкаРегистраторов
			[Таблица1]: LOAD *, if(IsNull(ВидРасчета), [Документ], [ВидРасчета]) as [temp] Resident [Таблица0]; Drop Table [Таблица0];
			RENAME Table [Таблица1] to [Таблица0]; DROP Field [ВидРасчета]; RENAME Field [temp] to [ВидРасчета];
					
		ELSEIF '$(Версия 1С)' like '7*' then		//>>>>>>>>>>>>>>>>>>>>>>>>>		7       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//			Let 'Начало базы' = date('$(Начало базы)', 'YYYY-MM-DD'); Let 'Окончание базы' = date('$(Окончание базы)', 'YYYY-MM-DD');
			FOR Each Документ in 'НачислениеЗарплатыРаботникамОрганизаций'
	
				LET ПериодSQL 					= 'cast(left($(Журналы.Период), 8) as datetime)';
				LET ПериодQlik 					= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
				LET ОтработаноДней				= 'case when isnull($(Документ.$(Документ).Начисления.ОтработаноДней), 0) = 0 and isnull($(Документ.$(Документ).ЧислоРабочихЧасов), 0) <> 0 then $(Документ.$(Документ).Начисления.ОтработаноЧасов) * $(Документ.$(Документ).ЧислоРабочихДней) / $(Документ.$(Документ).ЧислоРабочихЧасов) else $(Документ.$(Документ).Начисления.ОтработаноДней) end';
				LET ОтработаноЧасов				= 'case when isnull($(Документ.$(Документ).Начисления.ОтработаноЧасов), 0) = 0 and isnull($(Документ.$(Документ).ЧислоРабочихДней), 0) <> 0 then $(Документ.$(Документ).Начисления.ОтработаноДней) * $(Документ.$(Документ).ЧислоРабочихЧасов) / $(Документ.$(Документ).ЧислоРабочихДней) else $(Документ.$(Документ).Начисления.ОтработаноЧасов) end';
	
				 [Таблица1]:	 
			 	 Select 
	
					  $(НомерБазы)          													as [НомерБазы]
					 ,$(ПериодQlik)																as [Дата]
			 	 	 ,$(Журналы.НомерДокумента)  												as [НомерДокумента]
			 	 	 
			 	 	 ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)				as [Организации.Ссылка]
			 	 	 ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Начисления.Физлицо)+$(|) 		as [ФизическиеЛица.Ссылка]
			 	 	  
					 ,$(Справочник.ПодразделенияОрганизаций.Наименование)						as [ПодразделениеОрганизации]
					 ,$(Справочник.ФизическиеЛица.Должность)									as [Должность]
	
			 	 	 ,case when isnull($(Документ.$(Документ).Начисления.ОтработаноДней), 0) 	<> 0
			 	 	 		or isnull($(Документ.$(Документ).Начисления.ОтработаноЧасов), 0) 	<> 0 then
			 	 	      case when isnull($(Документ.$(Документ).Начисления.Результат), 0) 	<> 0 then 'Результат'
				 	 	       when isnull($(Документ.$(Документ).Начисления.Дополнительные),0) <> 0 then 'Дополнительные'
					 	 	   when isnull($(Документ.$(Документ).Начисления.Премия), 0) 		<> 0 then 'Премия'
					 	 	   when isnull($(Документ.$(Документ).Начисления.Экологические), 0) <> 0 then 'Экологические'
					 	  end
				 	  end 																		as [Маркер]
				
			 	 	 ,$(Документ.$(Документ).Начисления.Экологические)  						as [Экологические]
			 	 	 ,$(Документ.$(Документ).Начисления.Дополнительные)  						as [Дополнительные]   
			 	 	 ,$(Документ.$(Документ).Начисления.Премия)  								as [Премия]  
			 	 	  
			 	 	 ,$(Документ.$(Документ).Начисления.Размер)  								as [Размер]      
			 	 	 ,$(Документ.$(Документ).Начисления.Результат)  							as [Результат]  
			 	 	 ,$(ОтработаноДней)  														as [ОтработаноДней] 
			 	 	 ,$(ОтработаноЧасов)  														as [ОтработаноЧасов]  				 	  
			 	 	 
//			 	 	 ,$(Константы.Значение)														as [Оклад]
			 	 From 
				  	  			$(Журналы) 											            As Журналы 							(nolock)
				  	 inner Join $(Документ.$(Документ)) 							            As $(Документ)						(nolock) On $(Документ.$(Документ).Ссылка) 					= $(Журналы.Регистратор)		 	 
			 	 	 inner Join $(Документ.$(Документ).Начисления) 					            As $(Документ)Начисления 			(nolock) On $(Документ.$(Документ).Ссылка) 					= $(Документ.$(Документ).Начисления.Ссылка) 
			 	 	 left  Join $(Справочник.ПодразделенияОрганизаций) 				            As ПодразделенияОрганизаций 		(nolock) On $(Справочник.ПодразделенияОрганизаций.Ссылка) 	= $(Документ.$(Документ).ПодразделениеОрганизации) 
			 	 	 left  Join $(Справочник.ФизическиеЛица) 						            As ФизическиеЛица 					(nolock) On $(Справочник.ФизическиеЛица.Ссылка) 			= $(Документ.$(Документ).Начисления.Физлицо)
	
			   	 Where $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)' 
			   	   and $(Журналы.ПометкаУдаления) = 0	
				   
//					 left  Join $(Константы)  													As Константы  						On $(Константы.Регистратор) 									= $(Справочник.ФизическиеЛица.Ссылка)
//						   																										   and $(Константы.Ссылка)  										= $(Справочник.ФизическиеЛица.Тип)
//																								  								   and $(Константы.Период) 				 							= (select max($(Константы.Период)) 
//																														  						 														 from $(Константы)  		   as Константы 
//																																  																		where $(Константы.Регистратор) 	= $(Справочник.ФизическиеЛица.Ссылка)  
//																																  						  												  and $(Константы.Ссылка)  		= $(Справочник.ФизическиеЛица.Тип)
//																																  						  												  and cast($(Константы.Период) as DateTime) <= $(ПериодSQL) 
//																																  						  												  and isnull($(Константы.Значение), 0) > 0 )		
				;
				
				FOR Each ВидРасчета in 'Результат', 'Экологические', 'Дополнительные', 'Премия'	
				
					 [Таблица0]:
					 LOAD 
					  	 [НомерБазы]          													as [НомерБазы]
					 	,[Дата]																	as [Дата]
					 	,'Начисление зарплаты' 													as [Документ]
			 	 	  	,[НомерДокумента] 														as [НомерДокумента]
			 	 	 
			 	 	 	,[Организации.Ссылка]													as [Организации.Ссылка]
			 	 	 	,[ФизическиеЛица.Ссылка] 												as [ФизическиеЛица.Ссылка]
			 	 	  
					 	,[ПодразделениеОрганизации]												as [ПодразделениеОрганизации]
					 	,[Должность]															as [Должность]
					 	,'$(ВидРасчета)'														as [ВидРасчета] 

					 	,[Размер]  																as [Размер] 
					 	,$(ВидРасчета)  														as [Результат] 
					 	,if([Маркер] = '$(ВидРасчета)', [ОтработаноДней], 0) 					as [ОтработаноДней] 
					 	,if([Маркер] = '$(ВидРасчета)', [ОтработаноЧасов], 0) 					as [ОтработаноЧасов] 
					
					 Resident [Таблица1]  Where if(isnull($(ВидРасчета)), 0, $(ВидРасчета)) <> 0; 					
				
				NEXT ВидРасчета; DROP Table [Таблица1];
				
			NEXT Документ
		
		ENDIF		
		
$(vConsole.LoadEnd); 

SUB Conf.60

	[Таблица0]: LOAD [НомерБазы], [Дата], [Организации.Ссылка], [ФизическиеЛица.Ссылка], 'Начисление' as [Документ], [Результат] as [Сумма] 
				From [$(vQvPath)\QVD\Начисления\*.qvd] (qvd);  STORE [Таблица0] into [$(vQvPath)\QVD\# Начисления.qvd] (qvd); DROP Tables [Таблица0];
	
ENDSUB

SUB КорректировкаРегистраторов; $(vConfigConnection); 
	LET Поле = 'База ' & $(Номер базы); NoConcatenate [Table.99]: SELECT * FROM [Метаданные];
	Left Join (Таблица0) LOAD 
		 Keepchar("$(Поле)", '0123456789') 		as [ТипРегистратора]
		,[Документ] 							as [Документ]
	Resident [Table.99] Where "$(Поле)" like '_document*' and not "$(Поле)" like '_*_*'; DROP Field [ТипРегистратора]; DROP Table [Table.99];
ENDSUB
///$tab 34


$(vConsole.LoadStart(34)); 										// Обмен

		FOR Each Документ in 'РеализацияТоваровУслуг'

			FOR Each Документ2 in 'Обмен', 'Удаленный'

				LET  ПериодSQL 					= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
				LET  ПериодQlik 				= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';

				LET  ДокументСокращенно         = chr(39)& '$(Документ2)' &chr(39);
				LET  Учет 						= if('$(База)' like 'ТОО*' and '$(База)' like '*Торговля*', chr(39)&'Торговля'&chr(39), 'case when $(Документ.$(Документ).Номер) like '&chr(39)&'%УТ%'&chr(39)&' or $(Документ.$(Документ).Номер) like '&chr(39)&'%КН%'&chr(39)&' then '&chr(39)&'Перенос'&chr(39)&' else '&chr(39)&'Бухгалтерия'&chr(39)&' end');
		 		LET  Сумма 						= 'case when $(Документ.$(Документ).СуммаВключаетНДС) = 1 then $(Документ.$(Документ).Товары.Сумма) else $(Документ.$(Документ).Товары.Сумма) + $(Документ.$(Документ).Товары.СуммаНДС) end';
				LET  Сумма 						= if('$(Документ2)' = 'Обмен', '$(Документ.$(Документ).Товары.КоличествоЗаказа)*$(Документ.$(Документ).Товары.Цена)', '$(Сумма)');
				LET  Индекс1           			= if('$(Документ2)' = 'Обмен', 0, 1);
				LET  Индекс2           			= if('$(Документ2)' = 'Обмен', 1, 0);
				LET  СуммаДокумента           	= if('$(Документ2)' = 'Обмен', 'and   $(Документ.$(Документ).СуммаДокумента) = 0', '');

			 	[Таблица0]:
				SELECT 	
					
				   $(НомерБазы)          														as [НомерБазы]
				  ,$(ПериодQlik)																as [Дата]
				  ,$(ДокументСокращенно) 														as [Документ]
				  ,$(Документ.$(Документ).Номер)  												as [НомерДокумента]

				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  					as [Валюты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  						as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)					as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  				as [Контрагенты.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Товары.Номенклатура)+$(|)	  		as [Номенклатура.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТорговыйПредставитель)+$(|)	  		as [ФизическиеЛица.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТипСписания)+$(|)					as [ТипыСписания.Ссылка]
		  
				  ,$(Документ.$(Документ).Товары.КоличествоЗаказа)								as [Количество]
				  ,$(Сумма) 	   																as [Сумма]		 
				  ,$(Документ.$(Документ).Товары.СуммаНДС)   									as [СуммаНДС]
				  ,$(Документ.$(Документ).Курс)  												as [Курс]
				  ,Null																			as [Вес]
				  ,Null																			as [Себестоимость]

				  ,'' 																			as [СебестоимостьЗаводская]
				  ,'' 																			as [СебестоимостьСырьевая]
				    
			  	From
			  	   	  			 $(Документ.$(Документ)) 								        as $(Документ)				(nolock)
			  	  inner join $(Документ.$(Документ).Товары) 						            as $(Документ)Товары 		(nolock) on $(Документ.$(Документ).Ссылка) 		= $(Документ.$(Документ).Товары.Ссылка)   	
			  	  inner join $(Перечисление.ТипыСписания) 							            as ТипыСписания 			(nolock) on $(Перечисление.ТипыСписания.Ссылка) 	= $(Документ.$(Документ).ТипСписания)   	

				Where  
				  		$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
			  	  and  	$(Документ.$(Документ).ПометкаУдаления) = $(Индекс1) 
			  	  and   $(Документ.$(Документ).Проведен) 		= $(Индекс2)	
			  	  and 	$(Перечисление.ТипыСписания.Порядок) 	= $(Индекс2)
			  	  and  	$(Документ.$(Документ).Номер) not like '%УТ%' 
			 	  and  	$(Документ.$(Документ).Номер) not like '%КН%' 
			 	  		$(СуммаДокумента) 
				;
				
			NEXT Документ2

		NEXT Документ
		
$(vConsole.LoadEnd);
	
SUB Conf.34; ENDSUB
///$tab 35


$(vConsole.LoadStart(35)); 										// Ретро Бонусы

		FOR Each Документ in 'ПоступлениеТоваровУслуг'

			LET  ПериодSQL 										= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
			LET  ПериодQlik 									= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET  ДокументСокращенно           					= chr(39)& if('$(Документ)' like '*Реализация*', 'Реализация', if('$(Документ)' like '*Возврат*', 'Возврат', if('$(Документ)' like '*Списание*', 'Списание', if('$(Документ)' like '*Поступление*', 'Ретро-бонусы')))) &chr(39);
			LET  Hex  											= num(PurgeChar($(Документ.$(Документ)),'_Document'), '(HEX)');

		 	[Таблица0]:
			SELECT 	

			   $(НомерБазы)          															as [НомерБазы]
			  ,$(ПериодQlik)																	as [Дата]
			  ,'Реализация' 																	as [Документ]
			  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
			  
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  					as [Контрагенты.Ссылка]
//			  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Услуги.Номенклатура)+$(|)	  			as [Номенклатура.Ссылка]
			  ,$(НомерБазы)+$(|)+$(Справочник.СтатьиЗатрат.Ссылка)+$(|)	  						as [Номенклатура.Ссылка]
			  ,Null	  																			as [ФизическиеЛица.Ссылка]
			  ,Null																				as [ТипыСписания.Ссылка]
	  
			  ,$(Документ.$(Документ).Услуги.Количество)										as [Количество]
			  ,-1*$(Документ.$(Документ).Услуги.Сумма) 											as [Сумма]
			  ,-1*$(Документ.$(Документ).Услуги.СуммаНДС) 										as [СуммаНДС]
			  ,$(Документ.$(Документ).Курс) 													as [Курс]
			  ,Null																				as [Вес]
			  ,Null																				as [Себестоимость]

			  ,'' 																				as [СебестоимостьЗаводская]
			  ,'' 																				as [СебестоимостьСырьевая]
//			  ,$(Справочник.СтатьиЗатрат.Наименование)											as [СтатьиЗатрат]	  			  			  
		  	From
	  	   	  			 $(Документ.$(Документ)) 									            as $(Документ)					(nolock)
			  inner join $(Документ.$(Документ).Услуги) 						            	as $(Документ)Услуги 			(nolock) on $(Документ.$(Документ).Ссылка) 		= $(Документ.$(Документ).Услуги.Ссылка)   
//		  	  inner join $(Справочник.Номенклатура) 								            as Номенклатура  				(nolock) on $(Справочник.Номенклатура.Ссылка) 	= $(Документ.$(Документ).Услуги.Номенклатура) 
		  	  left join $(Справочник.СтатьиЗатрат) 							    	        	as СтатьиЗатрат  				(nolock) on $(Справочник.СтатьиЗатрат.Ссылка) 	= $(Документ.$(Документ).Услуги.СубконтоЗатратБУ1) 
			Where  
			  	   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
		  	  and  $(Документ.$(Документ).ПометкаУдаления) = 0 
		  	  and  $(Документ.$(Документ).Проведен) = 1	
//		  	  and  $(Справочник.Номенклатура.Наименование) like '%бонус%'
		  	  and  ($(Справочник.СтатьиЗатрат.Наименование) like '%бонус%' or $(Справочник.СтатьиЗатрат.Наименование) like 'Скидка%')
			;
			
		NEXT Документ
		
$(vConsole.LoadEnd);

SUB Conf.35; ENDSUB
///$tab 36


$(vConsole.LoadStart(36)); 										// Списание

		FOR Each Документ in 'СписаниеТоваров', 'КомплектацияНоменклатуры'; $(vConsol.Trace($(Документ) $(Номер базы)));

			LET  ДокументСокращенно 						= chr(39)& if('$(Документ)' like '*Списание*', 'Списание', if('$(Документ)' like '*Комплектация*', 'Переработка')) &chr(39);
			LET  ТабЧасть									= if('$(Документ)' like '*Списание*', 'Товары', 'Комплектующие');
			LET  ПериодSQL 									= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
			LET  ПериодQlik 								= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
		
			IF '$(Документ)' <> 'СписаниеТоваров' or not '$(База)' like '*Бухгалтерия*' then

				LET  ОграничениеПоНоменклатуре					= if('$(Документ)' like '*Списание*', '', 'left  join $(Справочник.Номенклатура) as Номенклатура (nolock) on $(Справочник.Номенклатура.Ссылка)= $(Документ.$(Документ).Номенклатура) and  $(Справочник.Номенклатура.Код) like ''%601408''');
	//			LET  Сумма										= if('$(Версия 1С)' like '*УТ', Chr(39) & 'УТ' & Chr(39), if(Date('$(Начало базы)') < '01.01.2012' or Документ = 'КомплектацияНоменклатуры', 0,'$(Документ.$(Документ).$(ТабЧасть).Количество) * $(Документ.$(Документ).$(ТабЧасть).Сумма)'));
				LET  Сумма										= if('$(Версия 1С)' like '*УТ', Chr(39) & 'УТ' & Chr(39), 0);
				
			 	[Таблица0]:
				SELECT 	
				   $(ПериодQlik)																	as [Дата]
				  ,$(ДокументСокращенно)															as [Документ]
				  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
				  
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).$(ТабЧасть).Номенклатура)+$(|)	  		as [Номенклатура.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).$(ТабЧасть).СтатьиЗатрат)+$(|)			as [СтатьиЗатрат.Ссылка]
				  
				  ,$(Документ.$(Документ).$(ТабЧасть).Количество)									as [Количество]
				  ,$(Сумма)	   																		as [Сумма]		 
				  
			  	From
			  	   	 			 $(Документ.$(Документ)) 									        as $(Документ) 				(nolock)
			  	   	  inner join $(Документ.$(Документ).$(ТабЧасть)) 							    as $(Документ)$(ТабЧасть)	(nolock) on $(Документ.$(Документ).$(ТабЧасть).Ссылка)	= $(Документ.$(Документ).Ссылка) 
					  $(ОграничениеПоНоменклатуре)
		
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
				  and  $(Документ.$(Документ).ПометкаУдаления) = 0	
				  and  $(Документ.$(Документ).Проведен) = 1
	//			  and  $(Документ.$(Документ).Номер) not like '%УТ%' 
	//			  and  $(Документ.$(Документ).Номер) not like '%КН%'
				;

			ELSEIF '$(Документ)' = 'СписаниеТоваров' and '$(База)' like '*Бухгалтерия*' then 

				LET ПериодSQL 		= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.Период))', '$(РегистрБухгалтерии.Типовой.Период)');
				LET ПериодQlik 		= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			
				[Таблица0]:
				select

			   		 $(ПериодQlik)																	as [Дата]
				  	,$(ДокументСокращенно)															as [Документ]
			  		,$(Документ.$(Документ).Номер)  												as [НомерДокумента]
			  
			  		,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  						as [Склады.Ссылка]
			  		,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
			  		,$(НомерБазы)+$(|)+$(Документ.$(Документ).$(ТабЧасть).Номенклатура)+$(|)	  	as [Номенклатура.Ссылка]
			  		,$(НомерБазы)+$(|)+$(Документ.$(Документ).$(ТабЧасть).СтатьиЗатрат)+$(|)		as [СтатьиЗатрат.Ссылка]
			  
			  		,$(Документ.$(Документ).$(ТабЧасть).Количество)									as [Количество]
			  		,$(РегистрБухгалтерии.Типовой.Сумма) 	   										as [Сумма]	
			  				  			  
				from 
							   $(РегистрБухгалтерии.Типовой) 					   					as Типовой					(nolock)
		  	   	  	inner join $(Документ.$(Документ)) 									        	as $(Документ) 				(nolock) on $(Документ.$(Документ).Ссылка) 				= $(РегистрБухгалтерии.Типовой.Регистратор)
		  	   	  	inner join $(Документ.$(Документ).$(ТабЧасть)) 							    	as $(Документ)$(ТабЧасть)	(nolock) on $(Документ.$(Документ).$(ТабЧасть).Ссылка)	= $(РегистрБухгалтерии.Типовой.Регистратор) and $(Документ.$(Документ).$(ТабЧасть).НомерСтроки)	= $(РегистрБухгалтерии.Типовой.НомерСтроки)
				Where 	
						$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)' 
				  	and $(РегистрБухгалтерии.Типовой.Активность) = 1;
			
			ENDIF
					
		NEXT
	
$(vConsole.LoadEnd);
	
SUB Conf.36; ENDSUB


///$tab 41


$(vConsole.LoadStart(41));										// Себестоимость Заводов
		
		IF '$(База)' = 'Завод "Молпродукт"' then

			LET ПериодSQL 				= 'dateadd(day, -day(dateadd(MONTH, 1, cast(left($(РегистрБухгалтерии.Типовой.Период),8) as datetime))), dateadd(MONTH, 1, cast(left($(РегистрБухгалтерии.Типовой.Период),8) as datetime)))';
			LET ПериодQlik 				= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET Затрата 				= 'isnull($(Справочник.Материалы.Наименование), $(Справочник.Номенклатура.Наименование))';
			LET ЗатратаСсылка 			= '$'&'(НомерБазы)+$'&'(|)+case when $(Справочник.Материалы.Ссылка) is not null then cast(''$'' as $(VarType)) else cast('''' as $(VarType)) end+ isnull($(Справочник.Материалы.Ссылка), $(Справочник.Номенклатура.Ссылка))+$'&'(|)';

			NoConcatenate
			[Таблица1]:
			SELECT

		 	   $(ПериодQlik)																	as [Дата]
			  ,'ЗатратыПроизводства' 															as [Документ]

			  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+Isnull(#2$(Справочник.Номенклатура.Ссылка), 
			  					#3$(Справочник.Номенклатура.Ссылка))+$(|)	  					as [Номенклатура.Ссылка]
			  
			  ,Isnull(#2$(Справочник.Номенклатура.Код), #3$(Справочник.Номенклатура.Код))		as [Номенклатура.Код]

			  ,Null																				as [Количество]
			  ,Null 	   																		as [Вес]
			  		  		 	  
			  ,sum($(РегистрБухгалтерии.Типовой.Количество))									as [КоличествоЗатрат]
			  ,sum($(РегистрБухгалтерии.Типовой.Сумма)) 	   									as [СуммаЗатрат]		 

			  ,'Сырье' 																			as [ВидЗатрат]
			  ,$(Затрата)																		as [Затрата]
			  ,$(ЗатратаСсылка)																	as [Затрата.Ссылка]
			  
			from 
				$(РегистрБухгалтерии.Типовой) 										            as   Типовой			(nolock)
				inner join $(Справочник.ВидыЗатрат)									            as   ВидыЗатрат			(nolock) on   $(Справочник.ВидыЗатрат.Ссылка) 			= $(РегистрБухгалтерии.Типовой.ДебитовоеСубконто3)
				left  join $(Справочник.Номенклатура) 								            as #2Номенклатура  		(nolock) on #2$(Справочник.Номенклатура.Код) 			= $(Справочник.ВидыЗатрат.КодГП)
				left  join $(Справочник.Номенклатура) 								            as #3Номенклатура  		(nolock) on #3$(Справочник.Номенклатура.Наименование) 	= $(Справочник.ВидыЗатрат.Наименование)
				
				inner join $(ПланСчетов.Типовой) 									            as #1ПланСчетов			(nolock) on #1$(ПланСчетов.Типовой.Ссылка) 				= $(РегистрБухгалтерии.Типовой.СчетКт)
				inner join $(ПланСчетов.Типовой) 									            as #2ПланСчетов			(nolock) on #2$(ПланСчетов.Типовой.Ссылка) 				= $(РегистрБухгалтерии.Типовой.СчетДт)
				 left join $(Справочник.Номенклатура) 								            as   Номенклатура  		(nolock) on   $(Справочник.Номенклатура.Ссылка)		 	= $(РегистрБухгалтерии.Типовой.КредитовоеСубконто1)
				 left join $(Справочник.Материалы) 									            as   Материалы 			(nolock) on   $(Справочник.Материалы.Ссылка) 			= $(РегистрБухгалтерии.Типовой.КредитовоеСубконто1)

			where
				 	$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)' 
				and #1$(ПланСчетов.Типовой.Код) >  '1300' and #1$(ПланСчетов.Типовой.Код) < '1340'
				and #2$(ПланСчетов.Типовой.Код) >= '8110' and #2$(ПланСчетов.Типовой.Код) < '8220'
				and   $(РегистрБухгалтерии.Типовой.Активность) = ''
//				and   len($(Справочник.ВидыЗатрат.КодГП)) > 0
				
			group by $(ПериодQlik), $(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|), $(НомерБазы)+$(|)+Isnull(#2$(Справочник.Номенклатура.Ссылка), #3$(Справочник.Номенклатура.Ссылка))+$(|), $(Затрата), Isnull(#2$(Справочник.Номенклатура.Код), #3$(Справочник.Номенклатура.Код)) ,$(ЗатратаСсылка)
			;
		

			LET ПериодSQL 													= 'cast(left($(Журналы.Период), 8) as DateTime)';
			LET ПериодQlik 													= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET ВесНоменклатуры 											= 'isnull(#1$(Константы.Значение), #2$(Константы.Значение))';
		
			FOR Each Документ in 'Себестоимость', 'СебестоимостьГП'
				LET  Номенклатура			= if('$(Документ)' = 'Себестоимость', 'substring($(Документ.$(Документ).Табчасть.Продукт), 7, 9)', '$(Документ.$(Документ).Табчасть.Продукт)');
				[Таблица2]:
				SELECT
	
			 	   $(ПериодQlik)																	as [Дата]
				  ,'Выработка' 															 			as [Документ]
	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Справочник.Номенклатура.Ссылка)+$(|)	  						as [Номенклатура.Ссылка]
				  
				  ,$(Справочник.Номенклатура.Код)													as [Номенклатура.Код]
				  		 	  
				  ,sum($(Документ.$(Документ).Табчасть.КоличествоПродукта))							as [Количество]
				  ,sum($(Документ.$(Документ).Табчасть.СуммаЗатрат))								as [Сумма]		 
				  ,sum($(Документ.$(Документ).Табчасть.КоличествоПродукта)* $(ВесНоменклатуры)) 	as [Вес]			  
	
				  ,Null																				as [КоличествоЗатрат]
				  ,Null 	   																		as [СуммаЗатрат]		 
	
				  ,Null 																			as [ВидЗатрат]
				  ,Null																				as [Затрата]
				  			  	
				from 
					$(Журналы) 															            as   Журналы				(nolock)
					inner join $(Документ.$(Документ)) 									            as   $(Документ) 			(nolock) on   $(Документ.$(Документ).Ссылка) 			 	= $(Журналы.Регистратор)
					inner join $(Документ.$(Документ).Табчасть) 						            as   $(Документ)Табчасть 	(nolock) on   $(Документ.$(Документ).Табчасть.Ссылка) 		= $(Журналы.Регистратор)
					inner join $(Справочник.Номенклатура) 								            as   Номенклатура  			(nolock) on   $(Справочник.Номенклатура.Ссылка) 			= $(Номенклатура) 
	
						
						
				     left join $(Константы)  											            as  #1Константы  			(nolock) on #1$(Константы.Регистратор) 					= $(Справочник.Номенклатура.Ссылка)
																																	   	and #1$(Константы.Ссылка)  						= $(Справочник.Номенклатура.Тип)
																																	   	and #1$(Константы.Период) 				 		= (select top 1 cast($(Константы.Период) as DateTime)  
																																							  						 		from  $(Константы)  as Константы 
																																									  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																									  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																									  						  and cast($(Константы.Период) as DateTime) <= cast($(ПериодSQL) as DateTime)
																																									  						  order by cast($(Константы.Период) as DateTime) desc )
		
				     left join $(Константы)  											            as  #2Константы  			(nolock) on #2$(Константы.Регистратор) 					= $(Справочник.Номенклатура.Ссылка)
																																	    and #2$(Константы.Ссылка)  						= $(Справочник.Номенклатура.Тип)
																																	    and #2$(Константы.Период)  						= (select top 1 cast($(Константы.Период) as DateTime)  
																																							  						 		from  $(Константы)  as Константы
																																									  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																									  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																									  						  order by cast($(Константы.Период) as DateTime) asc )
		
			  						   		  
				Where 
						$(Журналы.ПометкаУдаления) = 0 
					and $(Журналы.Проведен) <> 4	
					and $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				group by 
					$(ПериодQlik), $(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|), $(НомерБазы)+$(|)+$(Справочник.Номенклатура.Ссылка)+$(|) , $(Справочник.Номенклатура.Код) 
				;
			NEXT Документ
			
			Left Join (Таблица2)
			LOAD 	
		 	   [Дата]
			  ,[Организации.Ссылка]
			  ,[Номенклатура.Ссылка]
			  ,Sum([СуммаЗатрат]) as [Сумма2]	
			Resident [Таблица1]
			Group By [Дата], [Организации.Ссылка], [Номенклатура.Ссылка];	
			// По всей видимости, до 01.06.2017 в документе себестоимость были только административные расходы.
			Concatenate (Таблица1)
			LOAD
		 	   [Дата]																			as [Дата]
		 	  ,'ЗатратыПроизводства' 															as [Документ]
		 	  
			  ,[Организации.Ссылка]																as [Организации.Ссылка]
			  ,[Номенклатура.Ссылка]															as [Номенклатура.Ссылка]
			  ,[Номенклатура.Код]																as [Номенклатура.Код]

			  ,Null()																			as [Количество]
			  ,Null() 	   																		as [Вес]
			  			  
			  ,Null() 																			as [КоличествоЗатрат]
			  ,If([Дата] > '01.06.2017', [Сумма], [Сумма] - [Сумма2])							as [СуммаЗатрат]
			  
			  ,'Произв. затраты' 																	as [ВидЗатрат]		  
			  ,'Произв. затраты' 																	as [Затрата]
			Resident [Таблица2]; 
					
			DROP Fields [Сумма], [Сумма2];
			Concatenate (Таблица1) LOAD * Resident [Таблица2]; DROP Table [Таблица2];
			
			IF NoOfRows('Таблица0') > 0 then; Concatenate 	([Таблица0]) LOAD * Resident [Таблица1]; 
											ELSE; NoConcatenate  [Таблица0]: LOAD * Resident [Таблица1]; ENDIF; DROP Table [Таблица1];
						 
		ELSE
	
			LET ПериодSQL 							= 'cast(left($(Журналы.Период), 8) as DateTime)';
			LET ПериодQlik 							= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET Затрата 							= 'case when substring($(Документ.Себестоимость.Табчасть.Затрата), 3, 2) = '&chr(39)&'4D'&chr(39)&' then 		$(Справочник.Материалы.Наименование)
															when substring($(Документ.Себестоимость.Табчасть.Затрата), 3, 2) = '&chr(39)&'89'&chr(39)&' then 	  #2$(Справочник.Номенклатура.Наименование) 
															when substring($(Документ.Себестоимость.Табчасть.Затрата), 3, 2) = '&chr(39)&'97'&chr(39)&' then isnull($(Справочник.ВидыЗатрат.Наименование), '&chr(39)&'Материальные затраты'&chr(39)&') end';
			LET ВидЗатрат 							= 'case when substring($(Документ.Себестоимость.Табчасть.Затрата), 3, 2) = '&chr(39)&'97'&chr(39)&' then '&chr(39)&'Произв. затраты'&chr(39)&' else '&chr(39)&'Сырье'&chr(39)&' end';
			LET ВесНоменклатуры 					= 'isnull(#1$(Константы.Значение), #2$(Константы.Значение))';
			LET ЗатратаСсылка 						= '$'&'(НомерБазы)+$'&'(|)+case when $(Справочник.Материалы.Ссылка) is not null then cast(''$'' as $(VarType)) else cast('''' as $(VarType)) end+ isnull($(Справочник.Материалы.Ссылка), #2$(Справочник.Номенклатура.Ссылка))+$'&'(|)';

			[Таблица0]:
			Select 
				
		 		 $(ПериодQlik)																		as [Дата]	
		 		,'ЗатратыПроизводства' 																as [Документ]	
		 		   
				,$(НомерБазы)+$(|)+$(Документ.Себестоимость.Организация)+$(|)						as [Организации.Ссылка]
				,$(НомерБазы)+$(|)+#1$(Справочник.Номенклатура.Ссылка)+$(|)							as [Номенклатура.Ссылка]
				
				,#1$(Справочник.Номенклатура.Код)													as [Номенклатура.Код]

			  	,Null																				as [Количество]
			  	,Null 	   																			as [Вес]
			  				
			  	,sum($(Документ.Себестоимость.Табчасть.КоличествоЗатрат))							as [КоличествоЗатрат]
			  	,sum($(Документ.Себестоимость.Табчасть.СуммаЗатрат)) 								as [СуммаЗатрат]
			  		
			  	,$(ВидЗатрат)																		as [ВидЗатрат]
			  	,$(Затрата)																			as [Затрата]
			  	,$(ЗатратаСсылка)																	as [Затрата.Ссылка]

			From
				$(Журналы) 															 	            as   Журналы				(nolock)
				inner join $(Документ.Себестоимость) 								 	            as   Себестоимость 			(nolock) on   $(Документ.Себестоимость.Ссылка) 			= $(Журналы.Регистратор)
				inner join $(Документ.Себестоимость.Табчасть) 						 	            as   СебестоимостьТабчасть 	(nolock) on   $(Документ.Себестоимость.Табчасть.Ссылка) 	= $(Журналы.Регистратор)
//				inner join $(Справочник.Организации) 								 	            as   Организации  			(nolock) on   $(Справочник.Организации.Ссылка) 			= $(Документ.Себестоимость.Организация)
				inner join $(Справочник.Номенклатура) 								 	            as #1Номенклатура  			(nolock) on #1$(Справочник.Номенклатура.Ссылка) 			= $(Документ.Себестоимость.Табчасть.Продукт)
				 left join $(Справочник.Номенклатура) 								 	            as #2Номенклатура  			(nolock) on #2$(Справочник.Номенклатура.Ссылка) 			= right($(Документ.Себестоимость.Табчасть.Затрата), 9)
				 left join $(Справочник.Материалы) 									 	            as   Материалы 				(nolock) on   $(Справочник.Материалы.Ссылка) 			= right($(Документ.Себестоимость.Табчасть.Затрата), 9)
				 left join $(Справочник.ВидыЗатрат)									 	            as   ВидыЗатрат				(nolock) on   $(Справочник.ВидыЗатрат.Ссылка) 			= right($(Документ.Себестоимость.Табчасть.Затрата), 9)

			Where 
					$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				and $(Журналы.ПометкаУдаления) = 0 and len($(Затрата)) > 0
				and $(Журналы.Проведен) <> 4	

			Group by 
				$(ПериодQlik), $(НомерБазы)+$(|)+$(Документ.Себестоимость.Организация)+$(|), $(НомерБазы)+$(|)+#1$(Справочник.Номенклатура.Ссылка)+$(|), $(ВидЗатрат), $(Затрата), #1$(Справочник.Номенклатура.Код), $(ЗатратаСсылка)
			;

			[Таблица0]:
			Select 

		 		 $(ПериодQlik)																		as [Дата]
		 		,'Выработка' 															 			as [Документ]
		 					   
				,$(НомерБазы)+$(|)+$(Документ.Себестоимость.Организация)+$(|)						as [Организации.Ссылка]
				,$(НомерБазы)+$(|)+#1$(Справочник.Номенклатура.Ссылка)+$(|)							as [Номенклатура.Ссылка]
				
				,#1$(Справочник.Номенклатура.Код)													as [Номенклатура.Код]

			  	,sum($(Документ.Себестоимость.Табчасть.КоличествоПродукта))							as [Количество]
			  	,sum($(Документ.Себестоимость.Табчасть.КоличествоПродукта) * $(ВесНоменклатуры)) 	as [Вес]

			  	,Null																				as [КоличествоЗатрат]
			  	,Null 																				as [СуммаЗатрат]
			  	
			  	,Null																				as [ВидЗатрат]
			  	,Null																				as [Затрата]
			  	,Null																				as [Затрата.Ссылка]
			  	
			From
				$(Журналы) 															 	            as   Журналы				(nolock)
				inner join $(Документ.Себестоимость) 								 	            as   Себестоимость 			(nolock) on   $(Документ.Себестоимость.Ссылка) 			= $(Журналы.Регистратор)
				inner join $(Документ.Себестоимость.Табчасть) 						 	            as   СебестоимостьТабчасть 	(nolock) on   $(Документ.Себестоимость.Табчасть.Ссылка) 	= $(Журналы.Регистратор)
				inner join $(Справочник.Номенклатура) 								 	            as #1Номенклатура  			(nolock) on #1$(Справочник.Номенклатура.Ссылка) 			= $(Документ.Себестоимость.Табчасть.Продукт)
		
			     left join $(Константы)  											 	            as #1Константы  			(nolock) on #1$(Константы.Регистратор) 					= #1$(Справочник.Номенклатура.Ссылка)
																																	  	and #1$(Константы.Ссылка)  						=   $(Справочник.Номенклатура.Тип)
																																	   	and #1$(Константы.Период) 				 		= (select top 1 cast($(Константы.Период) as DateTime)  
																																							  						 		from  $(Константы)  as Константы 
																																									  						where $(Константы.Регистратор) 	= #1$(Справочник.Номенклатура.Ссылка)  
																																									  						  and $(Константы.Ссылка)  		=   $(Справочник.Номенклатура.Тип)
																																									  						  and cast($(Константы.Период) as DateTime) <= cast($(ПериодSQL) as DateTime)
																																									  						  order by cast($(Константы.Период) as DateTime) desc )
	
			     left join $(Константы)  											 	            as #2Константы  			(nolock) on #2$(Константы.Регистратор) 					= #1$(Справочник.Номенклатура.Ссылка)
																																	    and #2$(Константы.Ссылка)  						=   $(Справочник.Номенклатура.Тип)
																																	    and #2$(Константы.Период)  						= (select top 1 cast($(Константы.Период) as DateTime)  
																																							  						 		from  $(Константы)  as Константы
																																									  						where $(Константы.Регистратор) 	= #1$(Справочник.Номенклатура.Ссылка)  
																																									  						  and $(Константы.Ссылка)  		=   $(Справочник.Номенклатура.Тип)
																																									  						  order by cast($(Константы.Период) as DateTime) asc )
			Where 
					$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				and $(Журналы.ПометкаУдаления) = 0
				and $(Журналы.Проведен) <> 4	

			Group by 
				$(ПериодQlik), $(НомерБазы)+$(|)+$(Документ.Себестоимость.Организация)+$(|), $(НомерБазы)+$(|)+#1$(Справочник.Номенклатура.Ссылка)+$(|), #1$(Справочник.Номенклатура.Код)
			;
									
		ENDIF


/*														Операционные затраты

			LET ПериодSQL 										= 'cast(left($(РегистрБухгалтерии.Типовой.Период),8) as datetime)';
			LET ПериодQlik 										= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';

			FOR Each ВидДвижения in '+1', '-1'
			
				LET РегистрБухгалтерии.Типовой.Счет 			= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетДт)', '$(РегистрБухгалтерии.Типовой.СчетКт)');
				LET РегистрБухгалтерии.Типовой.Субконто1 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто1)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто1)');
				LET РегистрБухгалтерии.Типовой.Субконто2 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто2)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто2)');		
				LET РегистрБухгалтерии.Типовой.Субконто3 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто3)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто3)');		
	
				[Таблица7]:
				select
				
				   $(ПериодQlik)																	as [Дата]
		 		  ,'Операционные затраты' 															as [Документ]	

				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]

				  ,'Операционные затраты'															as [ВидЗатрат]
				  ,$(Справочник.ВидыЗатрат.Наименование)											as [Затрата]
				  
				  ,Null																				as [КоличествоЗатрат]
			  	  ,$(РегистрБухгалтерии.Типовой.Сумма) 												as [СуммаЗатрат]

//			  	  ,$(ВидДвижения)																	as [ВидДвижения]
		
				from 
					$(РегистрБухгалтерии.Типовой) 										            as Типовой				(nolock)
					inner join $(ПланСчетов.Типовой) 									            as ПланСчетов			(nolock) on $(ПланСчетов.Типовой.Ссылка)  		= $(РегистрБухгалтерии.Типовой.Счет)	  	
					inner join $(Справочник.ВидыЗатрат)									            as ВидыЗатрат			(nolock) on $(Справочник.ВидыЗатрат.Ссылка) 	= $(РегистрБухгалтерии.Типовой.Субконто3)
				Where  
				  	   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				  and  $(ПланСчетов.Типовой.Код) between '7000' and '7300'
				  and  $(ВидДвижения) = '-1'
//				  and  $(РегистрБухгалтерии.Типовой.Активность) = ''		  
			  	;
			  	
			NEXT ВидДвижения
//*/

		
$(vConsole.LoadEnd);

SUB Conf.41; $(Trace(Расчет себестоимости заводов));
	If Lower(ComputerName()) = 'qlikview_' then; CALL СОперационнымиЗатратами; ELSE; CALL БезОперационныхЗатрат; ENDIF
ENDSUB

SUB БезОперационныхЗатрат; 

// Для заводов	

 	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd) Where [Дата] < MonthStart(Today());	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum(Количество) as [Количество], sum(Вес) as [Вес], [Номенклатура.Код]	
				Resident [Таблица0] Where [Документ] = 'Выработка' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum([СуммаЗатрат]) as [Сумма], 'Выработка' as [Документ]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum([СуммаЗатрат]) as [СуммаНДС]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства'  and ВидЗатрат = 'Сырье' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка];	
 	DROP Table [Таблица0]; NoConcatenate [Таблица0]: LOAD * Resident [Таблица1] Where [Количество] > 0 and [Сумма] > 0; DROP Table [Таблица1];
 	LET СтрокаСохранения = '$(vQvPath)\QVD\# Выработка.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];

	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	LOAD Distinct [Организации.Ссылка], [Номенклатура.Ссылка] FROM [$(vQvPath)\QVD\# Выработка.qvd] (qvd); Left Join
	LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество], If(Isnull([Сумма]), 0, [Сумма]) as [Сумма], If(Isnull([СуммаНДС]), 0, [СуммаНДС]) as [СуммаНДС] FROM [$(vQvPath)\QVD\# Выработка.qvd] (qvd) Where not IsNull([Количество]) and [Количество] <> 0;
	 
	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     if([Организации.Ссылка]  like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Организации.Ссылка],  Index([Организации.Ссылка],  '06') +2), [Организации.Ссылка])  as [Организации.Ссылка], 
	     if([Номенклатура.Ссылка] like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +2), [Номенклатура.Ссылка]) as [Номенклатура.Ссылка], 
		 if(isnull(Количество) 	and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(Количество), [Количество]) 	as [Количество],
		 if(isnull(Сумма) 		and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(Сумма), 	 [Сумма]) 		as [Сумма],
		 if(isnull(СуммаНДС) 	and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(СуммаНДС), 	 [СуммаНДС]) 	as [СуммаНДС],
		 if([Организации.Ссылка] like '06*' and [Дата] >= '01.01.2015', 2, 1) as [Маркер], 
		 if(isnull(Количество), 0, 1) as [Курс]
	Resident [Таблица0] Order By [Организации.Ссылка], [Номенклатура.Ссылка], Дата; DROP Table [Таблица0]; 
	
	[Таблица2]: LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], min([Маркер]) as [Маркер] 
				Resident [Таблица1] Where (len([Количество]) > 0 and [Количество] <> 0) Group By [Дата], [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join 
	(Таблица2)  LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество], [Сумма], [СуммаНДС], [Маркер], [Курс] Resident [Таблица1]; DROP Table [Таблица1]; DROP Field [Маркер];
	
	[Таблица3]: LOAD [Номенклатура.Ссылка], [Код номенклатуры] as [Номенклатура.Код] From [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd); Left Join
	(Таблица2)  LOAD *  Resident [Таблица3]; DROP Table [Таблица3]; DROP Field [Номенклатура.Ссылка];

	[Таблица0]: LOAD [Дата.1] as [Дата.2], [Организации.Ссылка], [Номенклатура.Код], sum(Сумма)/sum(Количество) as [СебестоимостьЗаводская], sum(СуммаНДС)/sum(Количество) as [СебестоимостьСырьевая]
				Resident [Таблица2] Group By [Дата.1], [Организации.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.2] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.2]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] (qvd); DROP Tables [Таблица0], [Таблица2];

	[Таблица0]: LOAD * INLINE [
				Код,			Номенклатура.Код
				KOV00014,		000000237
				KOV00016,		000000238
				KOV00017,		000000238
				KOV00018,		000000208
				KOV00019,		000000209
				KOV00022,		000000239
				
				KOV00021,		000010168
				KOV00020,		000010167 ];	Left Join
	(Таблица0)	LOAD * From	[$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] (qvd) Where [Организации.Ссылка] like '01|*'; DROP Field [Номенклатура.Код]; RENAME Field [Код] to [Номенклатура.Код];	
	[Таблица0]: LOAD * From	[$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] (qvd); STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] (qvd); DROP Tables [Таблица0];			

// Для торговых (весь расчет с нуля во избежание наложений выработки одинаковых номенклатур разными заводами)
	
	[Таблица0]: LOAD [Дата], [Номенклатура.Код], sum(Количество) as [Количество], sum(Вес) as [Вес], sum([Сумма]) as [Сумма], sum([СуммаНДС]) as [СуммаНДС] From $(СтрокаСохранения) Group by [Дата], [Номенклатура.Код];
	LET СтрокаСохранения = '$(vQvPath)\QVD\Temp.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];
	
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	LOAD Distinct [Номенклатура.Код] FROM $(СтрокаСохранения); Left Join 
	LOAD [Дата],  [Номенклатура.Код], [Количество], If(Isnull([Сумма]), 0, [Сумма]) as [Сумма], If(Isnull([СуммаНДС]), 0, [СуммаНДС]) as [СуммаНДС] FROM [$(vQvPath)\QVD\Temp.qvd] (qvd) Where not IsNull([Количество]) and [Количество] <> 0;
	 
	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     [Номенклатура.Код], 
		 if(isnull(Количество) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Количество), [Количество]) 	as [Количество],
		 if(isnull(Сумма) 		and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Сумма), 	 [Сумма]) 		as [Сумма],
		 if(isnull(СуммаНДС) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(СуммаНДС), 	 [СуммаНДС]) 	as [СуммаНДС]
	Resident [Таблица0] Order By [Номенклатура.Код], [Дата]; DROP Table [Таблица0]; 
	
	[Таблица2]: NoConcatenate
	LOAD [Дата],
	     [Номенклатура.Код], 
		 if(isnull(Количество) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Количество), [Количество]) 	as [Количество],
		 if(isnull(Сумма) 		and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Сумма), 	 [Сумма]) 		as [Сумма],
		 if(isnull(СуммаНДС) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(СуммаНДС), 	 [СуммаНДС]) 	as [СуммаНДС]
	Resident [Таблица1] Order By [Номенклатура.Код], [Дата] desc; DROP Table [Таблица1]; 
	RENAME Table [Таблица2] to [Таблица1];
	
	[Таблица0]: LOAD [Дата] as [Дата.2], [Номенклатура.Код], sum(Сумма)/sum(Количество) as [СебестоимостьЗаводская], sum(СуммаНДС)/sum(Количество) as [СебестоимостьСырьевая]
				Resident [Таблица1] Group By [Дата], [Номенклатура.Код]; 
				Concatenate(Таблица0) LOAD [Дата.2], '10688' as [Номенклатура.Код], [СебестоимостьЗаводская], [СебестоимостьСырьевая] Resident [Таблица0] Where [Номенклатура.Код] like '*10614'; Left Join 
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.2] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.2]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd); DROP Tables [Таблица0], [Таблица1];

ENDSUB


SUB СОперационнымиЗатратами 
/*	
	STORE [Таблица7] into [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Tables [Таблица7]; [Таблица7]: LOAD *, MonthStart(Дата) as [Дата2], '' as [Количество], '' as [Вес] From [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Field [Дата]; RENAME Field [Дата2] to [Дата]; [Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd);	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], sum([СуммаЗатрат]) as [Сумма1] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], 						  					  sum([СуммаЗатрат]) as [Сумма2] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка];	DROP Table [Таблица0]; Left Join 		
	(Таблица7)  LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], [Сумма1] / [Сумма2] as [Коэфицент] Resident [Таблица1]; DROP Table [Таблица1]; [Таблица0]: LOAD *, [Коэфицент] * [СуммаЗатрат] as [СуммаЗатрат2] Resident [Таблица7]; DROP Fields [Коэфицент], [СуммаЗатрат]; RENAME Field [СуммаЗатрат2] to [СуммаЗатрат];
	DROP Table [Таблица7]; STORE [Таблица0] into [$(vQvPath)\QVD\Себестоимость заводов\Операционные затраты.qvd] (qvd); DROP Tables [Таблица0];
*/

//*																// Операционные затраты из бюджета
	[Таблица7]: LOAD * From [$(vQvPath)\QVD\# ОперационныеЗатраты.qvd] (qvd); [Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd);	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], sum([СуммаЗатрат]) as [Сумма1] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], 						  					  sum([СуммаЗатрат]) as [Сумма2] Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка];	DROP Table [Таблица0]; Left Join 		
	(Таблица7)  LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код], [Сумма1] / [Сумма2] as [Коэфицент] Resident [Таблица1]; DROP Table [Таблица1]; [Таблица0]: LOAD *, [Коэфицент] * [СуммаЗатрат] as [СуммаЗатрат2] Resident [Таблица7]; DROP Fields [Коэфицент], [СуммаЗатрат]; RENAME Field [СуммаЗатрат2] to [СуммаЗатрат];
	DROP Table [Таблица7]; STORE [Таблица0] into [$(vQvPath)\QVD\Temp1.qvd] (qvd); DROP Tables [Таблица0];
//*/

// Для заводов	

 	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd);	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum(Количество) as [Количество], sum(Вес) as [Вес]	
				Resident [Таблица0] Where [Документ] = 'Выработка' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum([СуммаЗатрат]) as [Сумма], 'Выработка' as [Документ]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], sum([СуммаЗатрат]) as [СуммаНДС]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства'  and ВидЗатрат = 'Сырье' Group by  MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка];	
 	DROP Table [Таблица0]; NoConcatenate [Таблица0]: LOAD * Resident [Таблица1] Where [Количество] > 0 and [Сумма] > 0; DROP Table [Таблица1];
 	LET СтрокаСохранения = '$(vQvPath)\QVD\# Выработка.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];

	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	LOAD Distinct [Организации.Ссылка], [Номенклатура.Ссылка] FROM [$(vQvPath)\QVD\# Выработка.qvd] (qvd); Left Join
	LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество], [Сумма], [СуммаНДС] FROM [$(vQvPath)\QVD\# Выработка.qvd] (qvd); Left Join
	LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [СуммаЗатрат] as [ОперЗатраты] FROM [$(vQvPath)\QVD\Temp1.qvd] (qvd);
	 
	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     if([Организации.Ссылка]  like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Организации.Ссылка],  Index([Организации.Ссылка],  '06') +2), [Организации.Ссылка])  as [Организации.Ссылка], 
	     if([Номенклатура.Ссылка] like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +2), [Номенклатура.Ссылка]) as [Номенклатура.Ссылка], 
		 if(isnull(Количество) 	and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(Количество), [Количество]) 	as [Количество],
		 if(isnull(Сумма) 		and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(Сумма), 	 [Сумма]) 		as [Сумма],
		 if(isnull(СуммаНДС) 	and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(СуммаНДС), 	 [СуммаНДС]) 	as [СуммаНДС],
		 if(isnull(ОперЗатраты) and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(ОперЗатраты),[ОперЗатраты]) as [ОперЗатраты],
		 if([Организации.Ссылка] like '06*' and [Дата] >= '01.01.2015', 2, 1) as [Маркер], 
		 if(isnull(Количество), 0, 1) as [Курс]
	Resident [Таблица0] Order By [Организации.Ссылка], [Номенклатура.Ссылка], Дата; DROP Table [Таблица0]; 
	
	[Таблица2]: LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], min([Маркер]) as [Маркер] 
				Resident [Таблица1] Where (len([Количество]) > 0 and [Количество] <> 0) Group By [Дата], [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join 
	(Таблица2)  LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество], [Сумма], [СуммаНДС], [ОперЗатраты], [Маркер], [Курс] Resident [Таблица1]; DROP Table [Таблица1]; DROP Field [Маркер];
	
	[Таблица3]: LOAD [Номенклатура.Ссылка], [Код номенклатуры] as [Номенклатура.Код] From [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd); Left Join
	(Таблица2)  LOAD *  Resident [Таблица3]; DROP Table [Таблица3]; DROP Field [Номенклатура.Ссылка];

	[Таблица0]: LOAD [Дата.1] as [Дата.2], [Организации.Ссылка], [Номенклатура.Код], sum(Сумма)/sum(Количество) as [СебестоимостьЗаводская], sum(СуммаНДС)/sum(Количество) as [СебестоимостьСырьевая], sum(ОперЗатраты)/sum(Количество) as [ОперационныеЗатраты]
				Resident [Таблица2] Group By [Дата.1], [Организации.Ссылка], [Номенклатура.Код]; Left Join 
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.2] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.2]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляЗаводов.qvd] (qvd); DROP Tables [Таблица0], [Таблица2];

// Для торговых (весь расчет с нуля во избежание наложений выработки одинаковых номенклатур разными заводами)
	
 	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Себестоимость заводов\*.qvd] (qvd);	 
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Номенклатура.Код], sum(Количество) as [Количество], sum(Вес) as [Вес]	
				Resident [Таблица0] Where [Документ] = 'Выработка' Group by  MonthStart(Дата), [Номенклатура.Код]; Left Join 
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Номенклатура.Код], sum([СуммаЗатрат]) as [Сумма], 'Выработка' as [Документ]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства' Group by  MonthStart(Дата), [Номенклатура.Код]; Left Join
	(Таблица1)  LOAD MonthStart(Дата) as [Дата], [Номенклатура.Код], sum([СуммаЗатрат]) as [СуммаНДС]
				Resident [Таблица0] Where [Документ] = 'ЗатратыПроизводства'  and ВидЗатрат = 'Сырье' Group by  MonthStart(Дата), [Номенклатура.Код];	
 	DROP Table [Таблица0]; NoConcatenate [Таблица0]: LOAD * Resident [Таблица1] Where [Количество] > 0 and [Сумма] > 0; DROP Table [Таблица1];
 	LET СтрокаСохранения = '$(vQvPath)\QVD\# Выработка.qvd (qvd)'; STORE [Таблица0] into $(СтрокаСохранения); DROP Table [Таблица0];

	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	LOAD Distinct [Номенклатура.Код] FROM [$(vQvPath)\QVD\Temp.qvd] (qvd); Left Join
	LOAD [Дата],  [Номенклатура.Код], [Количество], [Сумма], [СуммаНДС] FROM [$(vQvPath)\QVD\Temp.qvd] (qvd); Left Join
	LOAD [Дата],  [Номенклатура.Код], sum([СуммаЗатрат]) as [ОперЗатраты] FROM [$(vQvPath)\QVD\Temp1.qvd] (qvd) Group By [Дата],  [Номенклатура.Код];
	 
	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     [Номенклатура.Код], 
		 if(isnull(Количество) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Количество), [Количество]) 	as [Количество],
		 if(isnull(Сумма) 		and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(Сумма), 	 [Сумма]) 		as [Сумма],
		 if(isnull(СуммаНДС) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(СуммаНДС), 	 [СуммаНДС]) 	as [СуммаНДС],
		 if(isnull(ОперЗатраты) and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(ОперЗатраты),[ОперЗатраты]) as [ОперЗатраты]
	Resident [Таблица0] Order By [Номенклатура.Код], [Дата]; DROP Table [Таблица0]; 

	[Таблица0]: LOAD [Дата] as [Дата.2], [Номенклатура.Код], sum(Сумма)/sum(Количество) as [СебестоимостьЗаводская], sum(СуммаНДС)/sum(Количество) as [СебестоимостьСырьевая], sum(ОперЗатраты)/sum(Количество) as [ОперационныеЗатраты]
				Resident [Таблица1] Group By [Дата], [Номенклатура.Код]; Left Join 
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.2] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.2]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd); DROP Tables [Таблица0], [Таблица1];
	
ENDSUB
///$tab 42


$(vConsole.LoadStart(42)); 										// Комплектация

		FOR Each Документ in 'КомплектацияНоменклатуры', 'ОперацияБух', 'Пересортица'
			
			LET ПериодSQL 				= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
			LET ПериодQlik 				= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	 	
	 		IF '$(Документ)' = 'КомплектацияНоменклатуры' then 
	 		
		 	[Таблица0]:
			SELECT 	

				   $(НомерБазы)          															as [НомерБазы]
				  ,$(ПериодQlik)																	as [Дата]
				  ,'$(Документ)' 																	as [Документ]
				  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]			  
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Номенклатура)+$(|)	  					as [Номенклатура.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Комплектующие.Номенклатура)+$(|)	  	as [НоменклатураКомплектации.Ссылка]
				  
				  ,$(Документ.$(Документ).Количество)												as [Количество]
				  ,$(Документ.$(Документ).Комплектующие.Количество) 	   							as [КоличествоКомплектации]		 
	
			  	From
			  				 $(Документ.$(Документ)) 									            as $(Документ) 					(nolock)
			  	  inner join $(Документ.$(Документ).Комплектующие) 						            as $(Документ)Комплектующие		(nolock) on $(Документ.$(Документ).Комплектующие.Ссылка) 	= $(Документ.$(Документ).Ссылка)
//				  inner join $(Справочник.Номенклатура)									            as Номенклатура					(nolock) on $(Справочник.Номенклатура.Ссылка)				= $(Документ.$(Документ).Номенклатура)
//				  																			   	   								   			and $(Справочник.Номенклатура.Наименование)			like '%акц%'
			
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				  and  $(Документ.$(Документ).Номер) not like '%УТ%' 
				  and  $(Документ.$(Документ).Номер) not like '%КН%' 
				  and  $(Документ.$(Документ).Проведен) = 1
				  and  $(Документ.$(Документ).ПометкаУдаления) = 0	
				;
				
			ENDIF
			
			IF '$(Документ)' = 'ОперацияБух' and '$(База)' like '*Бухгалтерия*' then 

				LET ПериодSQL 		= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(РегистрБухгалтерии.Типовой.Период))', '$(РегистрБухгалтерии.Типовой.Период)');
				LET ПериодQlik 		= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			
				[Таблица0]:
				select

				   $(НомерБазы)          															as [НомерБазы]			   
		 		  ,$(ПериодQlik)  																	as [Дата]
				  ,'$(Документ)' 																	as [Документ]
				  ,$(Документ.ОперацияБух.Номер)  													as [НомерДокумента]
			  		 		  
				  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+#3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [Склады.Ссылка]
//				  ,''																				as [Склады.Ссылка]
				  ,$(НомерБазы)+$(|)+#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [Номенклатура.Ссылка]	
				  ,$(НомерБазы)+$(|)+#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)+$(|)	as [НоменклатураКомплектации.Ссылка]

				  ,$(РегистрБухгалтерии.Типовой.КоличествоДт)										as [Количество]
				  ,$(РегистрБухгалтерии.Типовой.КоличествоКт)	   									as [КоличествоКомплектации]	
			  				  			  
				from 
					$(РегистрБухгалтерии.Типовой) 					   					            as Типовой			(nolock)
					  inner join $(ПланСчетов.Типовой) 				   					            as #1ПланСчетов		(nolock) on #1$(ПланСчетов.Типовой.Ссылка) 		= $(РегистрБухгалтерии.Типовой.СчетДт)
					  inner join $(ПланСчетов.Типовой) 									            as #2ПланСчетов		(nolock) on #2$(ПланСчетов.Типовой.Ссылка) 		= $(РегистрБухгалтерии.Типовой.СчетКт)
					  inner join $(Документ.ОперацияБух)   								            as ОперацияБух 		(nolock) on $(Документ.ОперацияБух.Ссылка) 		= $(РегистрБухгалтерии.Типовой.Регистратор)

					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто) 		            as #3Субконто		(nolock)
	//				  		#3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 		= $(РегистрБухгалтерии.Типовой.ТипРегистратора)and			  	
					  	on	#3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 			= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and #3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 			= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and #3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= $(ДвижениеСубконто)
					  inner join $(Справочник.Склады) 												as Склады	 		(nolock) on $(Справочник.Склады.Ссылка) 			= #3$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)

					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто)        	            as #1Субконто		(nolock)
						on	#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 		= $(РегистрБухгалтерии.Типовой.ТипРегистратора)			  	
					  	and	#1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 			= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 			= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= 0
//					  	and #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипСубконто) 			= $(Справочник.Номенклатура.Тип)
					  inner join $(Справочник.Номенклатура) 		   					            as #1Номенклатура	(nolock) on #1$(Справочник.Номенклатура.Ссылка) 	= #1$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)
																													   			and #1$(Справочник.Номенклатура.Наименование) like '%акц%'
					  inner join $(РегистрБухгалтерии.Типовой.ЗначенияСубконто)    		             as #2Субконто	
						on	#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.ТипРегистратора) 		= $(РегистрБухгалтерии.Типовой.ТипРегистратора)			  	
					  	and	#2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Регистратор) 			= $(РегистрБухгалтерии.Типовой.Регистратор)
					  	and #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.НомерСтроки) 			= $(РегистрБухгалтерии.Типовой.НомерСтроки)
					  	and #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Движение) 				= 1
					  inner join $(Справочник.Номенклатура) 		   					             as #2Номенклатура	(nolock) on #2$(Справочник.Номенклатура.Ссылка) 	= #2$(РегистрБухгалтерии.Типовой.ЗначенияСубконто.Субконто)
																														
				Where 
					  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)'
				  and #1$(ПланСчетов.Типовой.Код) in ('1330')
				  and #2$(ПланСчетов.Типовой.Код) in ('1330')
//				  and #1$(Справочник.Номенклатура.Ссылка) <> #2$(Справочник.Номенклатура.Ссылка)
				  and $(РегистрБухгалтерии.Типовой.Активность) = 1;
			
			ENDIF

			IF '$(Документ)' = 'Пересортица' and '$(База)' like '*Торговля*' then 

				[Таблица0]:
				SELECT 	

				   $(НомерБазы)          															as [НомерБазы]
				  ,$(ПериодQlik)																	as [Дата]
				  ,'$(Документ)' 																	as [Документ]
				  ,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]	
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).ТоварыП.Номенклатура)+$(|)	  			as [Номенклатура.Ссылка]
				  ,$(НомерБазы)+$(|)+$(Документ.$(Документ).Товары.Номенклатура)+$(|)	  			as [НоменклатураКомплектации.Ссылка]
				  
				  ,$(Документ.$(Документ).ТоварыП.Количество)										as [Количество]
				  ,$(Документ.$(Документ).Товары.Количество) 	   									as [КоличествоКомплектации]		 


				From
			  				 $(Документ.$(Документ)) 									            as $(Документ) 				(nolock)
			  	  inner join $(Документ.$(Документ).Товары) 							            as $(Документ)Товары		(nolock) on $(Документ.$(Документ).Товары.Ссылка) 		= $(Документ.$(Документ).Ссылка)
			  	  inner join $(Документ.$(Документ).ТоварыП) 							            as $(Документ)ТоварыП		(nolock) on $(Документ.$(Документ).ТоварыП.Ссылка) 		= $(Документ.$(Документ).Ссылка)
																							   								  			and $(Документ.$(Документ).ТоварыП.НомерСтроки)  = $(Документ.$(Документ).Товары.НомерСтроки)
				  inner join $(Справочник.Номенклатура)									            as Номенклатура				(nolock) on $(Справочник.Номенклатура.Ссылка)			= $(Документ.$(Документ).ТоварыП.Номенклатура)
				  																			   								   			and $(Справочник.Номенклатура.Наименование)		like '%акц%'
					
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				  and  $(Документ.$(Документ).Проведен) = 1
				  and  $(Документ.$(Документ).ПометкаУдаления) = 0	
				;
			
			ENDIF
						
		NEXT Документ
		
$(vConsole.LoadEnd);


SUB Conf.42; 

	[Таблица0]: LOAD Distinct [Дата], [НомерДокумента], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество] FROM [$(vQvPath)\QVD\Комплектация\*.qvd] (qvd) Where not IsNull(Количество) and [Количество] <> 0; Concatenate
	(Таблица0)  LOAD [Дата], [НомерДокумента], [Организации.Ссылка], [Номенклатура.Ссылка], [НоменклатураКомплектации.Ссылка], [КоличествоКомплектации] FROM [$(vQvPath)\QVD\Комплектация\*.qvd] (qvd); Left Join
	(Таблица0) 	LOAD [Код номенклатуры] as [НоменклатураКомплектации.Код], [Номенклатура.Ссылка] as [НоменклатураКомплектации.Ссылка] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd](qvd); Left Join
	(Таблица0) 	LOAD [Код номенклатуры] as [Номенклатура.Код], [Номенклатура.Ссылка] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd](qvd);
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Код], [НоменклатураКомплектации.Код], [НоменклатураКомплектации.Ссылка], [Количество], [КоличествоКомплектации] Resident [Таблица0]; DROP Table [Таблица0]; Left Join
	(Таблица1) 	LOAD [Дата], [Номенклатура.Код] as [НоменклатураКомплектации.Код], [СебестоимостьЗаводская], [СебестоимостьСырьевая] From [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd); Left Join
	(Таблица1) 	LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка] as [НоменклатураКомплектации.Ссылка], [СебестоимостьПоступления] From [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd);
	[Таблица0]: LOAD [Дата], [Номенклатура.Код], sum(If(IsNull([СебестоимостьЗаводская]), [СебестоимостьПоступления], [СебестоимостьЗаводская]) * КоличествоКомплектации) / sum(Количество) as [СебестоимостьЗаводская], sum(СебестоимостьСырьевая * КоличествоКомплектации) / sum(Количество) as [СебестоимостьСырьевая] Resident [Таблица1] Group by  [Дата], [Номенклатура.Код]; DROP Table [Таблица1];
		STORE [Таблица0] into [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Tables [Таблица0];

	
	[Таблица0]: LOAD Distinct [Номенклатура.Код], '' as [Temp] From [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd);
	[Таблица1]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица1)  LOAD Distinct [Номенклатура.Код] FROM [$(vQvPath)\QVD\Temp.qvd] (qvd) Where not Exists([Номенклатура.Код]) and Len([СебестоимостьЗаводская]) > 1; Left Join LOAD * FROM [$(vQvPath)\QVD\Temp.qvd] (qvd); DROP Tables [Таблица0];
	
	[Таблица2]: NoConcatenate
	LOAD [Дата] as [Дата.2],
	     [Номенклатура.Код], 
		 if(isnull(СебестоимостьЗаводская) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(СебестоимостьЗаводская), [СебестоимостьЗаводская]) 	as [СебестоимостьЗаводская],
		 if(isnull(СебестоимостьСырьевая) 	and [Номенклатура.Код] = peek([Номенклатура.Код]), peek(СебестоимостьСырьевая),  [СебестоимостьСырьевая]) 	as [СебестоимостьСырьевая]
	Resident [Таблица1] Order By [Номенклатура.Код], [Дата]; DROP Table [Таблица1]; [Таблица0]: NoConcatenate LOAD * Resident [Таблица2] Where Len([СебестоимостьЗаводская]) > 1; DROP Tables [Таблица2]; Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.2] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.2]; [Таблица0]: LOAD * From [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd);
	STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьДляТорговых.qvd] (qvd); DROP Tables [Таблица0]; // [$(vQvPath)\QVD\# СебестоимостьКомплектации.qvd]
					
ENDSUB
///$tab 63


$(vConsole.LoadStart(63)); 										// Выработка

		LET Вес 									= 'isnull(#1$(Константы.Значение), #2$(Константы.Значение))';
		LET ПериодSQL 								= If('$(База)' = 'Завод "Молпродукт!!!"', 'cast(left($(Журналы.Период), 8) as DateTime)', 'case when $(Документ.ПеремещениеТоваров.ДатаКлик) like '&chr(39)&'%1753%'&chr(39)&' then cast(left($(Журналы.Период), 8) as datetime) else $(Документ.ПеремещениеТоваров.ДатаКлик) end');
		LET ПериодQlik 								= If('$(База)' = 'Завод "Молпродукт!!!"', 'replace(convert(varchar, cast(left($(Журналы.Период), 8) as DateTime), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')', 'case when $(Документ.ПеремещениеТоваров.ДатаКлик) like '&chr(39)&'%1753%'&chr(39)&' then replace(convert(varchar, cast(left($(Журналы.Период), 8) as DateTime), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&') else replace(convert(varchar, $(Документ.ПеремещениеТоваров.ДатаКлик), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&') end');
		LET Склады									= If('$(База)' = 'Завод "Солнечный"', ' and $(Документ.ПеремещениеТоваров.Склад) = ''    50   '' ', '');
		
		[Таблица0]:
		Select
		 
		   	 $(НомерБазы)          															as [НомерБазы]				 
			,$(ПериодQlik)																	as [Дата]
			,'Выработка' 																	as [Документ]
			,$(Журналы.НомерДокумента) 	 													as [НомерДокумента]
			 		   
			,$(НомерБазы)+$(|)+$(Документ.ПеремещениеТоваров.Ссылка)+$(|)					as [Документ.Ссылка]
			,$(НомерБазы)+$(|)+$(Документ.ПеремещениеТоваров.Организация)+$(|)				as [Организации.Ссылка]
			,$(НомерБазы)+$(|)+$(Документ.ПеремещениеТоваров.Склад)+$(|)					as [Склады.Ссылка]
			,$(НомерБазы)+$(|)+$(Документ.ПеремещениеТоваров.Товары.Номенклатура)+$(|)		as [Номенклатура.Ссылка]
			
			,$(Документ.ПеремещениеТоваров.НеСписыватьТМЦ)									as [ОтсутствиеПроводок]
			,$(Документ.ПеремещениеТоваров.Товары.Количество)								as [Количество]
		  	,$(Документ.ПеремещениеТоваров.Товары.Сумма)									as [Сумма]
		  	,cast($(Документ.ПеремещениеТоваров.Товары.Количество) as float)*$(Вес) 	 	as [Вес]
		  	 
		From
			$(Журналы) 															            as Журналы						(nolock)
			inner join $(Документ.ПеремещениеТоваров) 							            as ПеремещениеТоваров 			(nolock) on $(Документ.ПеремещениеТоваров.Ссылка) 		= $(Журналы.Регистратор)
			inner join $(Документ.ПеремещениеТоваров.Товары) 					            as ПеремещениеТоваровТовары 	(nolock) on $(Документ.ПеремещениеТоваров.Товары.Ссылка) = $(Журналы.Регистратор)
			inner join $(Справочник.Номенклатура) 								            as Номенклатура  				(nolock) on $(Справочник.Номенклатура.Ссылка) 			= $(Документ.ПеремещениеТоваров.Товары.Номенклатура)

			   	and $(Справочник.Номенклатура.Код) <> '700207'
				$(Склады)

			    left join $(Константы)  											        	as  #1Константы  				(nolock) on #1$(Константы.Регистратор) 					= $(Справочник.Номенклатура.Ссылка)
																																    and #1$(Константы.Ссылка)  						= $(Справочник.Номенклатура.Тип)
																																    and #1$(Константы.Период) 				 		= (select top 1 cast($(Константы.Период) as DateTime)  
																																						  						 		from  $(Константы)  as Константы 
																																								  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																								  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																								  						  and cast($(Константы.Период) as DateTime) <= cast($(ПериодSQL) as DateTime) 
																																								  						  order by cast($(Константы.Период) as DateTime) desc )
			
		     	left join $(Константы)  											            as  #2Константы  				(nolock) on #2$(Константы.Регистратор) 					= $(Справочник.Номенклатура.Ссылка)
																																    and #2$(Константы.Ссылка)  						= $(Справочник.Номенклатура.Тип)
																																    and #2$(Константы.Период)  						= (select top 1 cast($(Константы.Период) as DateTime)  
																																						  						 		from  $(Константы)  as Константы
																																								  						where $(Константы.Регистратор) 	= $(Справочник.Номенклатура.Ссылка)  
																																								  						  and $(Константы.Ссылка)  		= $(Справочник.Номенклатура.Тип)
																																								  						  order by cast($(Константы.Период) as DateTime) asc )
			   	 Where  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) < '$(Окончание базы)' 
			   	   	and $(Журналы.ПометкаУдаления) = 0
			   	   	and $(Журналы.Проведен) <> 4	
		;
		
$(vConsole.LoadEnd);
	
SUB Conf.63; 										// ТворогСПереработки	

	[Таблица1]: 	LOAD * FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] 	(qvd) Where [Код номенклатуры] like '*601408' and Match(НомерБазы, '3232', '3233', '3339'); //  
	[Таблица2]: 	LOAD * FROM [$(vQvPath)\QVD\Реализация\*.qvd] 					(qvd) Where Exists(Номенклатура.Ссылка); DROP Table Таблица1;
	[Таблица3]: 	LOAD Distinct  Контрагенты, Контрагенты.Ссылка 					FROM  [$(vQvPath)\QVD\Справочники\Контрагенты*.qvd] (qvd); Left Join
	(Таблица2)		LOAD * Resident [Таблица3]; DROP Table [Таблица3];
	
	[Таблица0]: 	
	LOAD
	 	 if(Дата < '01.01.2015', '06', '07')													as [НомерБазы]
		,Дата																					as [Дата]
		,'Выработка' 																			as [Документ]

		,if(Дата < '01.01.2015', '06|     1   |', '07|     1   |')								as [Организации.Ссылка]
 		,if(Дата < '01.01.2015', '06|    BS   |', '07|    BS   |')							 	as [Номенклатура.Ссылка]    //  |    BX   |
		
     	,Количество 																			as [Количество]
     	,Сумма																					as [Сумма]
     	,Количество 																			as [Вес]
     	
	Resident [Таблица2] Where Контрагенты like 'Солнечный Молзавод ТОО'; DROP Table [Таблица2];
	
	[Таблица1]: LOAD [Номенклатура.Ссылка] as [temp] FROM [$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd) Where [Код номенклатуры] like '*700202' and [НомерБазы] = '03'; Concatenate 
	(Таблица0)  LOAD [НомерБазы], [Дата], 'Выработка' as [Документ], [Организации.Ссылка], [Номенклатура.Ссылка], [Количество] ,[Сумма], [Количество] as [Вес]
				FROM [$(vQvPath)\QVD\Реализация\База 03.qvd] (qvd) Where Exists(temp, Номенклатура.Ссылка); Drop Table [Таблица1]; Left Join
	(Таблица0)  LOAD '' as [НомерДокумента], '' as [Документ.Ссылка], '' as [Склады.Ссылка], '' as [ОтсутствиеПроводок] AutoGenerate 1;		
		
	STORE [Таблица0] into [$(vQvPath)\QVD\Выработка\Дополнение.qvd] (qvd); DROP Tables [Таблица0];
	
ENDSUB
///$tab 64


$(vConsole.LoadStart(64)); 										// Кредиторка Заводов

		FOR Each ВидДвижения in '+1', '-1'

			LET РегистрБухгалтерии.Типовой.Счет 			= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.СчетДт)', '$(РегистрБухгалтерии.Типовой.СчетКт)');
			LET РегистрБухгалтерии.Типовой.Субконто1 		= if($(ВидДвижения) = '+1', '$(РегистрБухгалтерии.Типовой.ДебитовоеСубконто1)', '$(РегистрБухгалтерии.Типовой.КредитовоеСубконто1)');
			LET ПериодSQL 									= 'cast(left($(РегистрБухгалтерии.Типовой.Период),8) as datetime)';
			LET ПериодQlik 									= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
		
			[Таблица0]:
			select

			   $(НомерБазы)          															as [НомерБазы]
	 		  ,$(ПериодQlik)																	as [ДатаДвижения]
	 		  		   
			  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Организация)+$(|)					as [Организации.Ссылка]
			  ,$(НомерБазы)+$(|)+left($(РегистрБухгалтерии.Типовой.Субконто1), 9)+$(|)			as [Контрагенты.Ссылка]
			  
		  	  ,$(РегистрБухгалтерии.Типовой.Сумма) 												as [Сумма]
		  	  ,$(ВидДвижения)																	as [ВидДвижения]
	
			from 
				$(РегистрБухгалтерии.Типовой) 										            as Типовой			(nolock)
				inner join $(ПланСчетов.Типовой) 									            as ПланСчетов		(nolock) on $(ПланСчетов.Типовой.Ссылка) = $(РегистрБухгалтерии.Типовой.Счет)

			Where  
			  	   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
			  and $(ПланСчетов.Типовой.Код) in ('3311')
			  and  $(РегистрБухгалтерии.Типовой.Активность) = ''		  
		  	;
		NEXT ВидДвижения

		FOR Each МесяцКвартала in 1, 2, 3

			LET 'Оборот за 1 месяц'								= '$(РегистрБухгалтерии.Типовой.Итоги.ДебитовыйОборотЗаМесяц1) - $(РегистрБухгалтерии.Типовой.Итоги.КредитовыйОборотЗаМесяц1)';
			LET 'Оборот за 2 месяц'								= '$(РегистрБухгалтерии.Типовой.Итоги.ДебитовыйОборотЗаМесяц2) - $(РегистрБухгалтерии.Типовой.Итоги.КредитовыйОборотЗаМесяц2)';
			LET Сальдо 											= if($(МесяцКвартала) = 1, '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо)', if($(МесяцКвартала) = 2, '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо) + $(Оборот за 1 месяц)', '$(РегистрБухгалтерии.Типовой.Итоги.Сальдо) + $(Оборот за 1 месяц) + $(Оборот за 2 месяц)'));
			LET РегистрБухгалтерии.Типовой.Итоги.Сумма 			= 'case when $(РегистрБухгалтерии.Типовой.Итоги.ТипИтогов) = 1 then $(Сальдо) end';
			LET ПериодQlik 										= 'replace(convert(varchar, dateadd(month, $(МесяцКвартала) - 1, $(РегистрБухгалтерии.Типовой.Итоги.Период)), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
			LET ПериодSQL 										= 'dateadd(month, $(МесяцКвартала) - 1, $(РегистрБухгалтерии.Типовой.Итоги.Период))';

			[Таблица0]:
			select
			   
			   $(НомерБазы)          															as [НомерБазы]
		 	  ,$(ПериодQlik)																	as [ДатаДвижения]
		 	  		 
			  ,$(НомерБазы)+$(|)+$(РегистрБухгалтерии.Типовой.Итоги.Организация)+$(|)			as [Организации.Ссылка]		   
			  ,$(НомерБазы)+$(|)+left($(РегистрБухгалтерии.Типовой.Итоги.Субконто1), 9)+$(|)	as [Контрагенты.Ссылка]
			  
		  	  ,$(РегистрБухгалтерии.Типовой.Итоги.Сумма) 										as [Сумма]
		  	  ,0 																				as [ВидДвижения]

			from 
			  $(РегистрБухгалтерии.Типовой.Итоги)  									            as ТиповойИтоги		(nolock)
			  inner join $(ПланСчетов.Типовой) 				 						            as ПланСчетов		(nolock) on $(ПланСчетов.Типовой.Ссылка) = $(РегистрБухгалтерии.Типовой.Итоги.Счет)

			where 
			  	  $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
			  and $(ПланСчетов.Типовой.Код) in ('3311')
			;
		NEXT МесяцКвартала

$(vConsole.LoadEnd); 

SUB Conf.64; ENDSUB		    
///$tab @


SUB ЗагрузкаФайлов(Root,n,Extension)
	for each FileExtension in Extension //,'xls','doc','mdb'
		for each FoundFile in filelist( Root & '\*.' & FileExtension)
			let FoundFile = PurgeChar(FoundFile , Chr(39));		
			[Файлы $(Extension)]: //FileList
			Load *, num(FileSize(Filename$(Extension)),'# ### ### ###',',',' ') as [FileSize$(Extension)], Date(FileTime(Filename$(Extension))) as [Дата$(Extension)], Time(FileTime(Filename$(Extension))) as [Время$(Extension)];
			load '$(FoundFile)' as [Filename$(Extension)], subfield('$(FoundFile)', '$(Extension)' & '\', 2) as [Файл$(Extension)]
			Autogenerate(1);
		next FoundFile
	next FileExtension
	for each SubDirectory in dirlist( Root & '\*' )
		call ЗагрузкаФайлов(SubDirectory,n+1,Extension)
	next SubDirectory
ENDSUB

SUB ПроверкаQVD	
		Execute cmd /C del /Q "$(vQvPath)\QVD\Temp*.qvd";	
		CALL ЗагрузкаФайлов('$(vQvPath)\QVD',2,'QVD');
		LET vTempFile = '[$(vQvPath)\QVD\Temp.qvd] (qvd)'; [Table.99]: SELECT * FROM [Настройки]; STORE [Table.99] into $(vTempFile); DROP Table [Table.99];
		[Таблица1]	: LOAD Distinct [ФайлQVD] as [Проверка] Resident [Файлы QVD] Where Date(ДатаQVD) >= Date(Today()); [Table.99]: SELECT * FROM [Настройки];
		[QVDTest1]	: LOAD [Файлы QVD] FROM $(vTempFile) Where [Обновление QVD] = 'ежедневно' and not Exists([Проверка], [Файлы QVD]); Drop Table [Таблица1]; NoConcatenate
		[QVDTest2]	: LOAD [Файлы QVD] as [Нехватка QVD] FROM $(vTempFile) Where not Exists([ФайлQVD], [Файлы QVD]); NoConcatenate 
		[Таблица1]	: LOAD [Файлы QVD] FROM $(vTempFile);
		[QVDTest3]	: LOAD [ФайлQVD] as [Избыток QVD] Resident [Файлы QVD] Where not Exists([Файлы QVD], [ФайлQVD]); Drop Table [Таблица1]; 
ENDSUB	

SUB ПроверкаQVW	
		CALL ЗагрузкаФайлов('$(vQvPath)\QVW',2,'QVW');
		LET vTempFile = '[$(vQvPath)\QVD\Temp.qvd] (qvd)'; [Table.99]: SELECT * FROM [Настройки]; STORE [Table.99] into $(vTempFile); DROP Table [Table.99];
		[Таблица1]	: LOAD Distinct [ФайлQVW] as [Проверка] Resident [Файлы QVW] Where Date(ДатаQVW) >= Date(Today());  NoConcatenate
		[QVWTest1]	: LOAD [Файлы QVW] From $(vTempFile) Where [Обновление QVW] = 'ежедневно' and not Exists([Проверка], [Файлы QVW]); Drop Table [Таблица1]; //NoConcatenate
		[QVWTest2]	: LOAD [Файлы QVW] as [Нехватка QVW] From $(vTempFile) Where not Exists([ФайлQVW], [Файлы QVW]); NoConcatenate 
		[Таблица1]	: LOAD [Файлы QVW] From $(vTempFile); 
		[QVWTest3]	: LOAD [ФайлQVW] as [Избыток QVW] Resident [Файлы QVW] Where not Exists([Файлы QVW], [ФайлQVW]); Drop Table [Таблица1]; 
ENDSUB	

SUB ПроверкаXLS	
		CALL ЗагрузкаФайлов('$(vQvPath)\XLS',2,'XLS');  RENAME Table [Файлы XLS] to [Файлы XLS 2]; Left Join // [Файлы XLS] :
		(XLReports)  LOAD Subfield([ФайлXLS], '\', 1) as [XlsName], Trim(Subfield(Subfield(Subfield([ФайлXLS], '\', 2), '20', 1), '.xls', 1)) as [XlsDescr], Max([ДатаXLS]) as [ДатаXLS]
		Resident [Файлы XLS 2] Group by Subfield([ФайлXLS], '\', 1),Trim(Subfield(Subfield(Subfield([ФайлXLS], '\', 2), '20', 1), '.xls', 1)); DROP Table [Файлы XLS 2];
ENDSUB	

SUB Сессии

	If FileSize('$(vConsol.QVSPath)\Sessions_*.log') > 0 Then
	$(vConsol.Trace(Load QVS Sessions table));
	
	Sessions:
	LOAD 
		Date(Floor(Timestamp)) AS Дата,
		Time(Timestamp) as Время,	
	
		SubField(if(len([QlikView User]) = 0 ,[Authenticated user],[QlikView User]), '\', 2)  as UserID,
		Lower(Document) as DocumentPath,
		Capitalize(LOWER(SubField(SubField(Document,'/',-1), '.', 1))) as DocumentName,
		
	     [Exit Reason], 
	     
	     [Session Start] AS Сессия, 
	     Time(Timestamp(ConvertToLocalTime( [Session Start])), 'hh:mm:ss') AS [Session Start],
//	     Timestamp(Timestamp#([Session Start],'h:mm:ss TT') ,'hh:mm:ss') AS [Session Start], 
	     Time( Timestamp( [Session Duration] ), 'hh:mm:ss') AS [Session Duration], 
	     Time( Timestamp(ConvertToLocalTime( [Session Start] + [Session Duration] )), 'hh:mm:ss') AS [Session End],
	
	     [CPU spent (s)], 
	     [Bytes Received], 
	     [Bytes Sent],
	
	     Calls as SessionCalls,
		 Selections as SessionSelections,
	
	      IF([Client Type] like '*MSIE*', 'Internet Explorer', 
	     	IF([Client Type] like '*gecko*', 'Firefox',
	     		If([Client Type] like '*chrome*', 'Chrome',
	     			If([Client Type] like 'Windows Exe', 'IE Plugin',
	     				If([Client Type] like '*android*', 'Android',
	     					If([Client Type] like '*safari.mobile*', 'Mobile Safari',
	     						If([Client Type] like '*browser.safari*', 'Safari',
	     							If([Client Type] like '*opera*', 'Opera',
	     								If([Client Type] like '*mobile.iphone*', 'Native iPhone', 'Other')
	     									)))))))) As [Client Type],
	
	     [Secure Protocol], 
	     [Server Port], 
	     [Client Port] 
	
	     FROM [$(vConsol.QVSPath)\Sessions_*.log] (txt, utf8, embedded labels, delimiter is '\t', msq)
	;
	
	ENDIF;
	[Table.01]: 	LOAD * FROM [$(vQvPath)\QVD\# Календарь.qvd] 					(qvd) Where Дата >= '01.01.2010';
ENDSUB

///$tab >


SUB Storing(vLoadSubEnd);
	IF НомерЗагрузки < 20 then; IF vLoadSubEnd then; 
		LET СтрокаСохранения = '$(vQvPath)\QVD\' & if(НомерЗагрузки < 20, 'Справочники\','') & vLoadName & '.qvd'; IF not isnull(FileSize('$(СтрокаСохранения)')) then; 
		[Таблица1]: LOAD Distinct [НомерБазы] as [Temp] From $(СтрокаСохранения) (qvd) Where not Exists(НомерБазы); 
		[Таблица0]: LOAD * From $(СтрокаСохранения) (qvd) Where Exists(Temp, НомерБазы); DROP Table [Таблица1]; ENDIF
		CALL CheckDir; STORE [Таблица0] into $(СтрокаСохранения) (qvd);  DROP Tables [Таблица0]; ENDIF	
	ELSEIF not Match(НомерЗагрузки, 21, 51) then; IF not vLoadSubEnd and vStoreList = '' then	
		CALL GetStorString; STORE [Таблица0] into $(СтрокаСохранения) (qvd);  DROP Table [Таблица0]; ENDIF
		IF vLoadSubEnd and vStoreList <> '' then; LET vMacro = MTLoadEnd(vStoreList) ; ENDIF 	
	ENDIF
ENDSUB
SUB GetStorString;
	IF НомерЗагрузки < 20 then; LET СтрокаСохранения = '$(vQvPath)\QVD\temp\temp '& СчетчикБаз & '.qvd'; ELSE
	LET ЧастьБазы = if('$(База)' like '*#*', ' #' & SubField('$(База)', '#', 2), '');
	LET СтрокаСохранения = '$(vQvPath)\QVD\' & vLoadName & if(НомерЗагрузки = 50, if('$(Версия 1С)' like '*УТ', '\Торговля', '\Бухгалтерия'), '\База')  & ' ' & Right('0' & $(Номер базы), 2) & '$(ЧастьБазы)' & '.qvd';
	CALL CheckDir; ENDIF
ENDSUB
SUB CheckDir 
	LET Var.1 = left('$(СтрокаСохранения)', index('$(СтрокаСохранения)', '\', -1)); LET Var.2 = left(Var.1, len(Var.1)-1); IF Len(FileTime(Var.2)) = 0 then; Execute cmd.exe /C mkdir $(Var.2) ; ENDIF
ENDSUB

IF not vConsol.FileScan and Len(vConsole.LoadList) > 2 then; LET vMacro = CheckLoadFiles(vConsole.LoadType); FOR i=1 to SubStringCount(vConsole.LoadList, chr(10))+1; 
	LET No = SubField(SubField(vConsole.LoadList, chr(10), i), ' '); LET Обновление = False(); CALL Load.$(No); NEXT; LET vMacro =  DelLoadFiles(); ENDIF;

//IF not vConsol.FileScan then; LET vMacro = CheckLoadFiles(vConsole.LoadType); FOR Each No in $(Список),'21','51'; IF not @$(No) like '*#*' then; LET Обновление = False(); CALL Load.$(No); ENDIF; NEXT; LET vMacro =  DelLoadFiles(); ENDIF;  
$(vConfigConnection); CALL ПроверкаQVD; CALL ПроверкаQVW; CALL Сессии;  // CALL ПроверкаXLS;  

CALL Выход; ENDIF
///$tab ?

SET Verbatim = 1; // This stops the auto trim for anything following it in the script
SET Verbatim = 0; // This restarts the auto trim for anything following it in the script

for i=1 to NoOfTables(); let table = TableName(i);  drop table [$(table)]; next

LOAD MsgBox ('Проверка') autogenerate 1;

SET ErrorMode = 0; SET ErrorMode = 1;

Execute cmd /C del /Q "$(vQvPath)\QVD\Temp*.qvd"; 

//	$(Must_Include=$(vQvPath)\Config\Scripts.qvs); 
//	$(must_include=http://stat.agroproduct.kz:8593/QvAjaxZfc/Web/Settings/Scripts.htm);
//	$(must_include=http://qlik.ucoz.net/qvScript.htm); 
///$tab 40


$(vConsole.LoadStart(40)); 										// Поступление

		IF '$(Версия 1С)' like '7.7*' then // and '$(База)' like 'Завод*'
		
			FOR Each Документ in 'ПоступлениеМатериалов', 'ПоступлениеТМЦИмпорт', 'ЗаготовкаМолока', 'ПоступлениеТоваров'; LET ИндексДокумента = Lookup('ИндексДокумента', 'НаименованиеДокумента', '$(Документ)', 'ДокументыКлик'); 
			
				IF '$(База)' = 'Завод "Coppa Italia"' and  '$(Документ)' = 'ЗаготовкаМолока' then; ELSE
	
					LET ПериодSQL 		 	= 'cast(left($(Журналы.Период), 8) as DateTime)';
					LET ПериодQlik 			= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
					LET Курс 				= '$(Документ.$(Документ).Курс)';
					LET Номенклатура		= if('$(Документ)' = 'ПоступлениеТМЦИмпорт', 'substring($(Документ.$(Документ).ТабЧасть.Номенклатура), 7, 9)', '$(Документ.$(Документ).ТабЧасть.Номенклатура)');
					LET $ 					= 'case when ''$(Документ)'' = ''ПоступлениеТоваров'' then '''' when left($(Документ.$(Документ).ТабЧасть.Номенклатура), 6) = ''B1  M1'' then ''$$'' else ''$'' end';
					LET ТМЦИмпорт			= if('$(Документ)' = 'ПоступлениеТМЦИмпорт', '
					  	,$(Документ.$(Документ).ТабЧасть.СуммаОформления)								as [СуммаОформления]
					  	,$(Документ.$(Документ).ТабЧасть.СуммаПошлины)									as [СуммаПошлины]
					  	,$(Документ.$(Документ).ТабЧасть.ТаможеннаяСтоимость)							as [ТаможеннаяСтоимость]
//					  	,$(Документ.$(Документ).СуммаП)													as [СуммаП]					
						', '
						,''''																			as [СуммаОформления]
						,''''																			as [СуммаПошлины]
						,''''																			as [ТаможеннаяСтоимость]						
						');
									
					[Таблица0]:
					Select 
		
					   	 $(НомерБазы)          															as [НомерБазы]	
				 		,$(ПериодQlik)																	as [Дата]	
	//			 		,'$(Документ)'	   																as [НаименованиеДокумента]
				 		,$(ИндексДокумента)	   															as [ИндексДокумента]
					    ,$(Журналы.НомерДокумента)  													as [НомерДокумента]
					    		 		
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)						as [Организации.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  					as [Контрагенты.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  						as [Валюты.Ссылка]
					  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  						as [Склады.Ссылка]			  	
						,$(НомерБазы)+$(|)+$(Документ.$(Документ).Ссылка)+$(|)							as [Документ.Ссылка]
						,$(НомерБазы)+$(|)+$($)+$(Номенклатура)+$(|)									as [Номенклатура.Ссылка]
	
						,$(Документ.$(Документ).ТабЧасть.Количество)									as [Количество]
					  	,$(Документ.$(Документ).ТабЧасть.Сумма)*$(Курс)									as [Сумма]
					  	,$(Документ.$(Документ).ТабЧасть.СуммаНДС)*$(Курс)								as [СуммаНДС]
				  		,$(Документ.$(Документ).Курс)  													as [Курс]

						$(ТМЦИмпорт)
					From
						$(Журналы) 															            as Журналы				(nolock)
						inner join $(Документ.$(Документ)) 									            as $(Документ) 			(nolock) on $(Документ.$(Документ).Ссылка)				= $(Журналы.Регистратор)
						inner join $(Документ.$(Документ).ТабЧасть) 						            as $(Документ)ТабЧасть 	(nolock) on $(Документ.$(Документ).ТабЧасть.Ссылка) 		= $(Журналы.Регистратор)
		
					Where 
							$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
						and $(Журналы.ПометкаУдаления) = 0
						and $(Журналы.Проведен) <> 4
					;

										
				ENDIF
			
			NEXT Документ
					
			LET Курс 								= '$(Документ.УслугиСтороннихОрганизаций.Курс)';
			LET  УслугиСтороннихОрганизаций			= 'substring($(Документ.УслугиСтороннихОрганизаций.ДокументПоступления), 5, 9)';
			[Таблица27]:
			Select 

			   	 $(НомерБазы)          															as [НомерБазы]	
		 		,$(ПериодQlik)																	as [Дата]	
//			 	,'$(Документ)'	   																as [НаименованиеДокумента]
		 		,8	   																			as [ИндексДокумента]
			    ,$(Журналы.НомерДокумента)  													as [НомерДокумента]
			    		 		
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Организация)+$(|)		as [Организации.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Контрагент)+$(|)	  	as [Контрагенты.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Валюта)+$(|)	  		as [Валюты.Ссылка]
			  	,$(НомерБазы)+$(|)+$(Документ.УслугиСтороннихОрганизаций.Склад)+$(|)	  		as [Склады.Ссылка]			  	

				,1																				as [Количество]
				,$(Документ.УслугиСтороннихОрганизаций.Сумма)*$(Курс)							as [Сумма]
			  	,$(Документ.УслугиСтороннихОрганизаций.СуммаНДС)*$(Курс)						as [СуммаБезНалогов]
		  		,$(Документ.УслугиСтороннихОрганизаций.Курс)  									as [Курс]
				,$(НомерБазы)+$(|)+$(УслугиСтороннихОрганизаций)+$(|)							as [ДокументПоступления]
			From
				$(Журналы) 															            as Журналы				(nolock)
				inner join $(Документ.УслугиСтороннихОрганизаций) 								as УслугиСтороннихОрганизаций 			(nolock) on $(Документ.УслугиСтороннихОрганизаций.Ссылка)				= $(Журналы.Регистратор)

			Where 
					$(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				and $(Журналы.ПометкаУдаления) = 0
				and $(Журналы.Проведен) <> 4
			;

		ELSEIF '$(Версия 1С)' like '8*' then 	

			FOR Each Документ in 'ПоступлениеТоваровУслуг'; LET ИндексДокумента = Lookup('ИндексДокумента', 'НаименованиеДокумента', '$(Документ)', 'ДокументыКлик'); 
				
				LET ПериодSQL 			= if('$(Смещение дат)' <> 0, 'dateadd(year, $(Смещение дат), $(Документ.$(Документ).Дата))', '$(Документ.$(Документ).Дата)');
				LET ПериодQlik 			= 'replace(convert(varchar, $(ПериодSQL), 103), '&chr(39)&'/'&chr(39)&', '&chr(39)&'.'&chr(39)&')';
	
				LET СуммаНДС			= if('$(База)' like '*ООО*', '$(РегистрНакопления.Продажи.Сумма) - $(РегистрНакопления.Продажи.СуммаБезНДС)', '$(РегистрНакопления.Продажи.СуммаНДС)');
			 	LET Сумма 				= 'case when $(Документ.$(Документ).СуммаВключаетНДС) = 1 then $(Документ.$(Документ).Товары.Сумма) else ($(Документ.$(Документ).Товары.Сумма) + $(Документ.$(Документ).Товары.СуммаНДС)) end';
			 	LET Курс 				= '$(Документ.$(Документ).Курс)';
			 	
			 	[Таблица0]:
				SELECT
					
				   	 $(НомерБазы)          																as [НомерБазы]
				  	,$(ПериодQlik)																		as [Дата]
	//			  	,'$(Документ)' 																		as [НаименованиеДокумента]
				  	,$(ИндексДокумента)	   																as [ИндексДокумента]
				  	,$(Документ.$(Документ).Номер)  													as [НомерДокумента]
	
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Организация)+$(|)							as [Организации.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Контрагент)+$(|)	  						as [Контрагенты.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Валюта)+$(|)	  							as [Валюты.Ссылка]
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Склад)+$(|)	  							as [Склады.Ссылка]	
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Ссылка)+$(|)								as [Документ.Ссылка]		  
				  	,$(НомерБазы)+$(|)+$(Документ.$(Документ).Товары.Номенклатура)+$(|)	  				as [Номенклатура.Ссылка]
				  
				  	,$(Документ.$(Документ).Товары.Количество)											as [Количество]
				  	,$(Сумма)*$(Курс)	   																as [Сумма]		 
				  	,$(Документ.$(Документ).Товары.СуммаНДС)*$(Курс)   									as [СуммаНДС]
				  	,$(Документ.$(Документ).Курс)  														as [Курс]

					,''																					as [СуммаОформления]
					,''																					as [СуммаПошлины]
					,''																					as [ТаможеннаяСтоимость]
//					,''																					as [СуммаП]
	
				  			
			  	From
			  				 $(Документ.$(Документ)) 										            as $(Документ) 				(nolock)
			  	  inner join $(Документ.$(Документ).Товары) 								            as $(Документ)Товары		(nolock) on $(Документ.$(Документ).Товары.Ссылка) 	= $(Документ.$(Документ).Ссылка)
	
				Where  
					   $(ПериодSQL) >= '$(Начало базы)' and $(ПериодSQL) <  '$(Окончание базы)'
				  and  $(Документ.$(Документ).Номер) not like '%УТ%' 
				  and  $(Документ.$(Документ).Номер) not like '%КН%' 
				  and  $(Документ.$(Документ).Проведен) = 1
				  and  $(Документ.$(Документ).ПометкаУдаления) = 0	
				;
				
			NEXT Документ
				
		ENDIF
		
$(vConsole.LoadEnd); 

SUB РасчетСебестоимостиПоступления1; $(vConsol.Trace(Расчет себестоимости поступления));
	
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd);
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [Организации.Ссылка], [Номенклатура.Ссылка]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [Организации.Ссылка], [Номенклатура.Ссылка] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [Организации.Ссылка], [Номенклатура.Ссылка], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата],
	     if([Организации.Ссылка]  like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Организации.Ссылка],  Index([Организации.Ссылка],  '06') +2), [Организации.Ссылка])  as [Организации.Ссылка], 
	     if([Номенклатура.Ссылка] like '06*' and [Дата] >= '01.01.2015', '07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +2), [Номенклатура.Ссылка]) as [Номенклатура.Ссылка], 
		 if(isnull(СебестоимостьПоступления) and [Номенклатура.Ссылка] = peek([Номенклатура.Ссылка]) and [Организации.Ссылка] = peek([Организации.Ссылка]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления],
		 if([Организации.Ссылка] like '06*' and [Дата] >= '01.01.2015', 2, 1) as [Маркер]
	Resident [Таблица0] Order By [Организации.Ссылка], [Номенклатура.Ссылка], [Дата]; DROP Table [Таблица0]; 

	[Таблица0]: LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], min([Маркер]) as [Маркер] 
				Resident [Таблица1] Where (len([СебестоимостьПоступления]) > 0 and [СебестоимостьПоступления] <> 0) Group By [Дата], [Организации.Ссылка], [Номенклатура.Ссылка]; Left Join 
	(Таблица0)  LOAD [Дата] as [Дата.1], [Организации.Ссылка], [Номенклатура.Ссылка], [СебестоимостьПоступления], [Маркер] Resident [Таблица1]; DROP Table [Таблица1]; DROP Field [Маркер]; Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB

SUB РасчетСебестоимостиПоступления2; $(vConsol.Trace(Расчет себестоимости поступления));
	$(vConfigConnection); NoConcatenate [Table.99]: SELECT * FROM [Базы SQL];
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd); Left Join
	(Таблица0)  LOAD if([Версия 1С] like '7.7*', right(0 & №, 2), '3'& left(№, 1) & '3' & right(№, 1)) as [НомерБазы], [Версия 1С], SubField([База], '" -', 1) as [База] Resident [Table.99]; Left Join
	(Таблица0)  LOAD [Номенклатура.Ссылка], [Код номенклатуры] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); Left Join
	(Таблица0)  LOAD [Организации.Ссылка], [РНН организации] From [$(vQvPath)\QVD\Справочники\Организации*] (qvd); 
 	DROP Table [Table.99];
 	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [База], [Версия 1С], [Код номенклатуры], [РНН организации], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [База], [Версия 1С], [Код номенклатуры], [РНН организации]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [База], [Версия 1С], [Код номенклатуры], [РНН организации] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [База], [Версия 1С], [Код номенклатуры], [РНН организации], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата] as [Дата.1], [База], [Версия 1С], [Код номенклатуры],[РНН организации],
		 if(isnull(СебестоимостьПоступления) and [Код номенклатуры] = peek([Код номенклатуры]) and [База] = peek([База]) and [Версия 1С] = peek([Версия 1С])
		 and [РНН организации] = peek([РНН организации]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления]
	Resident [Таблица0] Order By [База], [Версия 1С], [РНН организации], [Код номенклатуры], [Дата]; DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0]; CALL СоответствиеДатБазам2; Left Join
	(Таблица0)  LOAD [Номенклатура.Ссылка], [Код номенклатуры], [НомерБазы] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [Код номенклатуры]; Left Join
	(Таблица0)  LOAD [Организации.Ссылка], [РНН организации], [НомерБазы] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [РНН организации]; Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB

SUB РасчетСебестоимостиПоступления3; $(vConsol.Trace(Расчет себестоимости поступления));
	
	[Таблица0]: LOAD * FROM [$(vQvPath)\QVD\Поступление\*.qvd] (qvd); Left Join 
	(Таблица0)	LOAD [Организации.Ссылка], SubField([Организации.Ссылка], [НомерБазы], 2) as [Организации] From [$(vQvPath)\QVD\Справочники\Организации*] (qvd); DROP Field [Организации.Ссылка]; Left Join 
	(Таблица0)	LOAD [Номенклатура.Ссылка], SubField([Номенклатура.Ссылка], [НомерБазы], 2) as [Номенклатура] From [$(vQvPath)\QVD\Справочники\Номенклатура*] (qvd); DROP Field [Номенклатура.Ссылка];
	[Таблица1]: LOAD MonthStart(Дата) as [Дата], [Организации], [Номенклатура], Sum(Сумма - СуммаНДС) / Sum(Количество) as [СебестоимостьПоступления]
				Resident [Таблица0] Group by MonthStart(Дата), [Организации], [Номенклатура]; DROP Table [Таблица0];
	[Таблица0]: LOAD Дата FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd) Where Дата like '01.*' and Дата >= '01.01.2006' and Дата < AddMonths(Today(), 1); Left Join
	(Таблица0)  LOAD Distinct [Организации], [Номенклатура] Resident [Таблица1]; Left Join
	(Таблица0)  LOAD [Дата], [Организации], [Номенклатура], [СебестоимостьПоступления] Resident [Таблица1]; DROP Table [Таблица1];

	[Таблица1]: NoConcatenate
	LOAD [Дата], [Организации], [Номенклатура],
		 if(isnull(СебестоимостьПоступления) and [Номенклатура] = peek([Номенклатура]) and [Организации] = peek([Организации]), peek(СебестоимостьПоступления), [СебестоимостьПоступления]) as [СебестоимостьПоступления]
	Resident [Таблица0] Order By [Организации], [Номенклатура], [Дата]; DROP Table [Таблица0]; RENAME Table [Таблица1] to [Таблица0]; CALL СоответствиеДатБазам(Организации); CALL СоответствиеДатБазам(Номенклатура); Left Join
	(Таблица0)  LOAD [Дата], MonthStart(Дата) as [Дата.1] FROM [$(vQvPath)\QVD\# Календарь.qvd] (qvd); DROP Field [Дата.1]; 
				STORE [Таблица0] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd); DROP Tables [Таблица0];
		
ENDSUB
				
SUB Conf.40; $(vConsol.Trace(Расчет себестоимости поступления));
STORE [Таблица27] into [$(vQvPath)\QVD\# УслугиСтороннихОрганизаций.qvd] (qvd); DROP Table [Таблица27];
CALL РасчетСебестоимостиПоступления1
 /*
		[Таблица1]:
		LOAD 
			 MonthStart(Дата) 									as [Дата]
			,[НомерБазы]										as [НомерБазы]
			,[Организации.Ссылка] 								as [Организации.Ссылка]
			,[Номенклатура.Ссылка]								as [Номенклатура.Ссылка]
			,Sum(Количество) 									as [Количество] 
			,Sum(Сумма - СуммаНДС) 								as [Сумма]
		From [$(vQvPath)\QVD\Поступление\*.qvd] (qvd)
		Group by MonthStart(Дата), [НомерБазы], [Организации.Ссылка], [Номенклатура.Ссылка]; 
		
		[Таблица2]: LOAD * From	[$(vQvPath)\QVD\Справочники\Номенклатура*.qvd] (qvd);
		[Таблица3]: Inner Join(Таблица1) LOAD [НомерБазы], [Номенклатура.Ссылка], [Код номенклатуры] as [Номенклатура.Код] Resident [Таблица2] Where [Номенклатура.Тип] = 'Номенклатура' and [Номенклатурные группы (1)] <> 'Материалы'; DROP Table [Таблица2];

	LET Дата = '01.01.2010';
	DO	
		[Таблица0]:
		LOAD 
		   '$(Дата)'																		as [Дата]
		  ,'СебестоимостьПоступления'														as [Документ]
		  ,[Организации.Ссылка]																as [Организации.Ссылка]
		  ,[Номенклатура.Ссылка]	  														as [Номенклатура.Ссылка]
		  ,[Номенклатура.Код]	  															as [Номенклатура.Код]
		  
		  ,FirstSortedValue([Количество], -Дата)											as [Количество]
		  ,FirstSortedValue([Сумма], -Дата) 	   											as [Сумма]		 
		  
		  ,if('$(Дата)' >= '01.01.2015' and [Организации.Ссылка] like '06*', 0, 1)			as [Отбор]
			    			  			
		Resident [Таблица1] 
		where (Дата <= date('$(Дата)') And Дата > AddYears('$(Дата)', -3)) or InMonth(date('$(Дата)'), Дата, 0)
		Group by [Организации.Ссылка], [Номенклатура.Ссылка], [Номенклатура.Код];
		
		LET Дата = AddMonths(Дата, 1);
		
			IF Дата = '01.12.2014' then 
			
				[ТаблицаП]: LOAD [Номенклатура.Код] as [Проверка] Resident [Таблица1] where Дата = '01.01.2015' and [Организации.Ссылка] like '07*';
				
				Concatenate(Таблица1)
				LOAD 
	
				   '01.01.2015'																		as [Дата]

				  ,'07' & Mid([Организации.Ссылка], Index([Организации.Ссылка], '06') +1)			as [Организации.Ссылка]
				  ,'07' & Mid([Номенклатура.Ссылка], Index([Номенклатура.Ссылка], '06') +1)			as [Номенклатура.Ссылка]
				  ,[Номенклатура.Код]  																as [Номенклатура.Код]
				  
				  ,[Количество]																		as [Количество]
				  ,[Сумма] 	   																		as [Сумма]		 
					    			  			
				Resident [Таблица0] 
				where Дата = '01.12.2014' and [Организации.Ссылка] like '06*'
				and not Exists(Проверка, Номенклатура.Код)
				;
				DROP Tables [ТаблицаП];
				
			ENDIF
	
		LOOP while Дата <= AddMonths(Today(), 1); DROP Table [Таблица1];
		
		Inner Join(Таблица0) LOAD 1 as [Отбор] AUTOGENERATE 1; DROP Field [Отбор];


		[ТаблицаК]: LOAD [Date] as [Дата]; LOAD Date('2000-01-01' + IterNo() - 1)  as [Date]  AutoGenerate 1 While Date('2000-01-01' + IterNo() - 1) <= Date('2020-01-01');	Left Join 
		(ТаблицаК) LOAD Дата as [Дата] , MonthStart(Дата) as [Дата2] Resident [ТаблицаК];
	
		[Таблица1]:
		LOAD 
			 [Дата] 																	as [Дата2] 
		    ,[Номенклатура.Ссылка]                                                    	as [Номенклатура.Ссылка]
		    ,[Организации.Ссылка] 														as [Организации.Ссылка]
		    ,sum(Сумма) / sum(Количество) 												as [СебестоимостьПоступления]
		Resident [Таблица0]
		Group By [Дата], [Номенклатура.Ссылка], [Организации.Ссылка];
		
			Left Join (Таблица1) LOAD * Resident [ТаблицаК]; 
	
			
		DROP Tables [ТаблицаК], [Таблица0];  DROP Field [Дата2];	
	
	STORE [Таблица1] into [$(vQvPath)\QVD\# СебестоимостьПоступления.qvd] (qvd);  DROP Tables [Таблица1];
	*/
ENDSUB	

	
